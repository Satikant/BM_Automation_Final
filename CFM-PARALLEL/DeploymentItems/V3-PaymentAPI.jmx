<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="CFM-Payment API" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Token-Admin" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">D:\CFM-RunTimeFiles\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var wait = new support_ui.WebDriverWait(WDS.browser, 5000);
var props = org.apache.jmeter.util.JMeterUtils.getJMeterProperties()
var select=JavaImporter(org.openqa.selenium.support.ui.Select);

WDS.sampleResult.sampleStart()
java.lang.Thread.sleep(7000)
WDS.browser.get(&apos;https://acehardware.v5qa.brandmuscle.net/Login/Login.aspx&apos;)
var titlep=WDS.browser.getTitle()
WDS.log.info(&quot;titlep====&gt;&quot;+WDS.browser.getTitle());

var username=WDS.browser.findElement(pkg.By.id(&apos;UserName&apos;));
username.sendKeys(&apos;UAT_Admin&apos;);
var password=WDS.browser.findElement(pkg.By.id(&apos;Password&apos;));
password.sendKeys(&apos;H@RDWAR3&apos;);
var lgnbtn=WDS.browser.findElement(pkg.By.id(&apos;LoginButton&apos;));
lgnbtn.click();
java.lang.Thread.sleep(7000)

//var element = WDS.browser.findElement(org.openqa.selenium.By.name(&apos;ctl00$MainContent$ddlBusinessUnit&apos;))
//var select = new org.openqa.selenium.support.ui.Select(element)
//select.selectByVisibleText(&apos;ACE Hardware&apos;)

var element = WDS.browser.findElement(org.openqa.selenium.By.xpath(&apos;//span[text()=&quot;Manage Co-op&quot;]&apos;))
element.click();
java.lang.Thread.sleep(25000)

var tokenvalue = WDS.browser.executeScript(&quot;return window.sessionStorage.getItem(&apos;cfm_token&apos;);&quot;) 
WDS.log.info(&quot;token====&gt;&quot;+tokenvalue);
props.put(&quot;TOKEN&quot;,tokenvalue);
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">var props = org.apache.jmeter.util.JMeterUtils.getJMeterProperties();
var it = props.get(&quot;TOKEN&quot;);
log.info(&quot;BSFTOKEN==&gt;&quot;+it);
bsh.shared.token=it;
log.info(&quot;shared variable&quot;+bsh.shared.token);</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">true</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="2524">OK</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Token-LME" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">D:\CFM-RunTimeFiles\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var wait = new support_ui.WebDriverWait(WDS.browser, 5000);
var props = org.apache.jmeter.util.JMeterUtils.getJMeterProperties()
var select=JavaImporter(org.openqa.selenium.support.ui.Select);

WDS.sampleResult.sampleStart()
java.lang.Thread.sleep(7000)
WDS.browser.get(&apos;https://acehardware.v5qa.brandmuscle.net/Login/Login.aspx&apos;)
var titlep=WDS.browser.getTitle()
WDS.log.info(&quot;titlep====&gt;&quot;+WDS.browser.getTitle());

var username=WDS.browser.findElement(pkg.By.id(&apos;UserName&apos;));
username.sendKeys(&apos;UAT_RetailEmployee&apos;);
var password=WDS.browser.findElement(pkg.By.id(&apos;Password&apos;));
password.sendKeys(&apos;H@RDWAR3&apos;);
var lgnbtn=WDS.browser.findElement(pkg.By.id(&apos;LoginButton&apos;));
lgnbtn.click();
java.lang.Thread.sleep(7000)

//var element = WDS.browser.findElement(org.openqa.selenium.By.name(&apos;ctl00$MainContent$ddlBusinessUnit&apos;))
//var select = new org.openqa.selenium.support.ui.Select(element)
//select.selectByVisibleText(&apos;ACE Hardware&apos;)

var element = WDS.browser.findElement(org.openqa.selenium.By.xpath(&apos;//span[text()=&quot;Manage Co-op&quot;]&apos;))
element.click();
java.lang.Thread.sleep(25000)

var tokenvalue = WDS.browser.executeScript(&quot;return window.sessionStorage.getItem(&apos;cfm_token&apos;);&quot;) 
WDS.log.info(&quot;token====&gt;&quot;+tokenvalue);
props.put(&quot;TOKEN&quot;,tokenvalue);
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">var props = org.apache.jmeter.util.JMeterUtils.getJMeterProperties();
var it = props.get(&quot;TOKEN&quot;);
log.info(&quot;BSFTOKEN==&gt;&quot;+it);
bsh.shared.token=it;
log.info(&quot;shared variable&quot;+bsh.shared.token);</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">true</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="2524">OK</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header ManagerTest1-parametrised" enabled="false">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${__BeanShell(bsh.shared.token)}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header ManagerTest1" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${__BeanShell(bsh.shared.token)}</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header ManagerTest1" enabled="false">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IjdBa1RiVDBQZzd5dGRISDlvOEtHTlh1TUI2YyIsImtpZCI6IjdBa1RiVDBQZzd5dGRISDlvOEtHTlh1TUI2YyJ9..bzm9EvNrKP3sQ3MUwqh1NBB9IvBQ86YuE8KQavzlmpDMqGZwmolGQ0fnKBIqIZhy_QfY6CDhFxaf9aDoV0gsdIh5lChGOfJRLAVlEvcUU00mdAOHdwNPrJx6WpNsrxw33TL4by0EgBcZfXryPxOyXWQs_diBySu6ALtDUrWLGnW85ofXX3csQoUpuNDWroDjdHh76iUq14HHG_IS5wQb0FJhuq0t87Kay754k0IAhy9qU-UKdo4x1xkGUZCKZ1laxlO5pgpbfTbag0eC-ptL7G4HtyWQ4j-4Ab9BOpb6G2070w8h1V5hQqj2fuoAfkNnKh6LVQhxCVa6r60la_RgJA</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="TestPlan.comments"> https://gateway.kube01-i.qa01.brandmuscle.net/api/cfm-payment/v2/</stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
        <stringProp name="CounterConfig.start">0</stringProp>
        <stringProp name="CounterConfig.end"></stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">a</stringProp>
        <stringProp name="CounterConfig.format"></stringProp>
        <boolProp name="CounterConfig.per_user">true</boolProp>
      </CounterConfig>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="load" elementType="Argument">
            <stringProp name="Argument.name">load</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">load value</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PaymentUrlACE" elementType="Argument">
            <stringProp name="Argument.name">PaymentUrlACE</stringProp>
            <stringProp name="Argument.value">/api/cfm-payment/v3/tenants/acehardware/coop</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PaymentUrlDW" elementType="Argument">
            <stringProp name="Argument.name">PaymentUrlDW</stringProp>
            <stringProp name="Argument.value">/api/cfm-payment/v3/tenants/ditchwitch/coop</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ServerName" elementType="Argument">
            <stringProp name="Argument.name">ServerName</stringProp>
            <stringProp name="Argument.value">api-i.qa.brandmuscle.net</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/tenants/{tenantId}/coop/calculate-POST" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11077/api/ChannelFundPayment/v1/tenants/acehardware/coop/calculate</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517653669000</longProp>
        <longProp name="ThreadGroup.end_time">1517653669000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calculate Eligibility1+(Parameterization)" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;OrderId&quot;: &quot;432&quot;,&#xd;
&quot;UserId&quot;: &quot;${UserId}&quot;,&#xd;
&quot;LineItems&quot;: [&#xd;
{&#xd;
&quot;LineId&quot;: &quot;1&quot;,&#xd;
&quot;ProductId&quot;: &quot;${ProductId}&quot;,&#xd;
&quot;Quantity&quot;: &quot;${Quantity}&quot;,&#xd;
&quot;ItemCost&quot;: &quot;${ItemCost}&quot;,&#xd;
&quot;ShippingCost&quot;: &quot;${ShippingCost}&quot;,&#xd;
&quot;ItemTax&quot;: &quot;${ItemTax}&quot;,&#xd;
&quot;ShippingTax&quot;: &quot;${ShippingTax}&quot;,&#xd;
&quot;TotalOrderLineItemCost&quot;: &quot;${TotalOrderLineItemCost}&quot;,&#xd;
&quot;MailingListCost&quot;: &quot;${MailingListCost}&quot;,&#xd;
&quot;MailingListTax&quot;: &quot;${MailingListTax}&quot;,&#xd;
&quot;ProductAttributes&quot;:&#xd;
{ &quot;ProgramName&quot;: &quot;${ProgramName}&quot;,&#xd;
&quot;BrandName&quot;: &quot;${BrandName}&quot;&#xd;
}&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/calculate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will give the co-op order value eligibility</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">PaymentAPIInput.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="variableNames">UserId,ProductId,Quantity,ItemCost,ShippingCost,ItemTax,ShippingTax,TotalOrderLineItemCost,MailingListCost,MailingListTax,ProgramName,BrandName,ProductId2,Quantity2,ItemCost2,ShippingCost2,TotalOrderLineItemCost2,MailingListCost2,MailingListTax2,ProgramName2,BrandName2</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-apete1" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">token</stringProp>
                <stringProp name="Header.value">eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IkNfRV9uQ2ZyV2lzS011RnByNG1aR2ZveXpkMCIsImtpZCI6IkNfRV9uQ2ZyV2lzS011RnByNG1aR2ZveXpkMCJ9.eyJpc3MiOiJodHRwOi8vYWNlaGFyZHdhcmUudjVxYS5icmFuZG11c2NsZS5sb2NhbC92NW9wZW5pZCIsImF1ZCI6IkNGTSIsImV4cCI6MTUyODMxMTgwMiwibmJmIjoxNTI4MjgzMDAyLCJub25jZSI6ImQ4MzVhYjc2MTcwNDQ5N2ZiMDI0YWM0Zjg3Zjg2ZmI2IiwiaWF0IjoxNTI4MjgzMDAxLCJhdF9oYXNoIjoiRXQzYVBRUnNUX3htZGswa05oYV85USIsInNpZCI6IjZhMzFiYWYxMGNlNWRkOGEzM2E5NDc1NGFiNjE1OWQ5Iiwic3ViIjoiMzUxMjE3MiIsImF1dGhfdGltZSI6MTUyODI4MzAwMSwiaWRwIjoiaWRzcnYiLCJibWkuYnVzaW5lc3N1bml0aWQiOiI1NjgiLCJibWkuYnVzaW5lc3N1bml0c3lzdGVtbmFtZSI6ImFjZWhhcmR3YXJlIiwiYm1pLnBlcnNvbmlkIjoiNDExNDUxNyIsImJtaS51c2VybmFtZSI6IkFQZXRlMSIsImJtaS5maXJzdG5hbWUiOiJBbCIsImJtaS5sYXN0bmFtZSI6IlBldGUiLCJibWkuYWRkcmVzcyI6IjE1NjAgV2F1a2VnYW4gUmQuIiwiYm1pLmFkZHJlc3MyIjoiIiwiYm1pLmNpdHkiOiJHbGVudmlldyIsImJtaS50ZWxlcGhvbmUiOiIyMTY1MjY1MTEwIiwiYm1pLnppcGNvZGUiOiI0NDExNCIsImJtaS5zdGF0ZSI6Ik9IIiwiYm1pLmNvdW50cnkiOiJVU0EiLCJibWkudGl0bGUiOiIiLCJibWkuZW1haWwiOiJzdXZhbS5wYXJpamFAYnJhbmRtdXNjbGUuY29tIiwiYm1pLmlzaW50ZXJuYWwiOiJGYWxzZSIsImJtaS5yaWdodCI6WyJBZGRyZXNzQ3JlYXRlIiwiQWRkcmVzc0RlbGV0ZU1hbmFnZWQiLCJBZGRyZXNzRGVsZXRlT3duZWQiLCJBZGRyZXNzRWRpdE1hbmFnZWQiLCJBZGRyZXNzRWRpdE93bmVkIiwiQWRkcmVzc1ZpZXdNYW5hZ2VkIiwiQWxsb3dBZGRUb0Fzc2V0Rm9sZGVyIiwiQWxsb3dPcmRlckFuZFBheSIsIkFsbG93T3JkZXJXaXRob3V0UGF5bWVudCIsIkNhbkJlRW11bGF0ZWQiLCJDaGFuZ2VMb2NhdGlvblN0YXR1cyIsIkNyZWF0ZV9NYW5hZ2VfQWRkcmVzc0Jvb2siLCJDcmVhdGVfTWFuYWdlX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiQ3JlYXRlX093bl9BZGRyZXNzQm9vayIsIkNyZWF0ZV9Pd25fQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJDcmVhdGVOZXdBZE1hdGVyaWFsIiwiQ3JlYXRlT3duZWQiLCJEZWxldGVfQWxsX0FkZHJlc3NCb29rIiwiRGVsZXRlX0FsbF9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkRlbGV0ZV9NYW5hZ2VfQWRkcmVzc0Jvb2siLCJEZWxldGVfTWFuYWdlX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRGVsZXRlX093bl9BZGRyZXNzQm9vayIsIkRlbGV0ZV9Pd25fQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJEZWxldGVBZE1hdGVyaWFsIiwiRGVsZXRlRGVsaXZlcnlSZXF1ZXN0cyIsIkRlbGV0ZU93bmVkIiwiRG93bmxvYWRBc3NldHMiLCJFZGl0X0FsbF9BZGRyZXNzQm9vayIsIkVkaXRfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRWRpdF9NYW5hZ2VfQWRkcmVzc0Jvb2siLCJFZGl0X01hbmFnZV9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkVkaXRBZE1hdGVyaWFsIiwiRWRpdE93bmVkIiwiRW1haWxfQ3VzdG9taXplX1RlbXBsYXRlcyIsIkVtYWlsX01haWxpbmdMaXN0X1NlYXJjaEFkZHJlc3NCb29rIiwiRW1haWxfUmVwb3J0cyIsIkVtYWlsX1NlbmRfRW1haWxzIiwiRW1haWxfVXBsb2FkX0VtYWlsSWRsaXN0IiwiRU5URVJQUklTRUFETUlOIiwiUGFzc3Rocm91Z2hVc2VyQ3JlYXRpb24iLCJVc2VPbmxpbmVDb29wIiwiVmlld19BbGxfQWRkcmVzc0Jvb2siLCJWaWV3X0FsbF9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIlZpZXdfTWFuYWdlX0FkZHJlc3NCb29rIiwiVmlld19NYW5hZ2VfQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJWaWV3X01hbmFnZV9SZWZfQ29udGFjdCIsIlZpZXdfT3duX0FkZHJlc3NCb29rIiwiVmlld19Pd25fQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJWaWV3Q3JlYXRpdmVzIiwiVmlld0RlbGl2ZXJ5T3B0aW9ucyIsIlZpZXdEZWxpdmVyeVJlcXVlc3RzIiwiVmlld0Rvd25sb2FkSGlzdG9yeSIsIlZpZXdFbWFpbFdvcmtDZW50ZXIiLCJWaWV3SlBHIiwiVmlld0xvd1Jlc1BERiIsIlZpZXdPd25lZCIsInByZWFwcHJvdmFsLXZpZXciLCJzdGFydC13b3JrZmxvdyIsImJyYW5kaW5nLWRlbGV0ZSIsImNsYWltLXZpZXciLCJwcmVhcHByb3ZhbC1jcmVhdGUiLCJjbGFpbS1jcmVhdGUiLCJwcmVhcHByb3ZhbC1kZWxldGUiLCJjbGFpbS1kZWxldGUiLCJicmFuZGluZy1jcmVhdGUiLCJicmFuZGluZy12aWV3IiwicHJvZ3JhbS12aWV3IiwiYWNjb3VudC12aWV3Il0sImFtciI6WyJwYXNzd29yZCJdfQ.Zn-VXTTmPSTMGCl9KI5rZ8Y1jbRMcbQQQvsVLg_m1ZGTothTBpKMhdrsFasXAz6nT89Q-1DCK4f7l_GENMyIsAKQq2jnioK9-aS1J0T_U1Fjgq95_5cCiCU22SEC3U2q7uqi6E6xemtEiZU3SHUg-QqbMepmZCpQXUdrXYLN7C7_oU9nClDgFwM5qBTT0pzM9KIsCh0Eu-ilXiImwIXyKA-eWuxLZUd3ALJThoaiW2pDSOKKhVim_Lwl9fETAvwP5Z3n5XKyFCcskLoxhezJmJMi29av1BIDchBtz0KoH8dtErImxAW6Ppx5JBrW86svwf3NaU-8PlXSa9CNvnMUYQ</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calculate Eligibility1+(QA)-ACE" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;OrderId&quot;: &quot;432&quot;,&#xd;
&quot;UserId&quot;: &quot;4038968&quot;,&#xd;
&quot;LineItems&quot;: [&#xd;
{&#xd;
&quot;LineId&quot;: &quot;1&quot;,&#xd;
&quot;ProductId&quot;: &quot;500275&quot;,&#xd;
&quot;Quantity&quot;: 1,&#xd;
&quot;ItemCost&quot;: 8.25,&#xd;
&quot;ShippingCost&quot;: 5,&#xd;
&quot;ItemTax&quot;:9.48,&#xd;
&quot;ShippingTax&quot;:0.15,&#xd;
&quot;TotalOrderLineItemCost&quot;:12.18,&#xd;
&quot;MailingListCost&quot;:1.09,&#xd;
&quot;MailingListTax&quot;: 1.20,&#xd;
&quot;ProductAttributes&quot;:&#xd;
{ &quot;ProgramName&quot;: &quot;Reg Program Test&quot;,&#xd;
&quot;BrandName&quot;: &quot;ACE&quot;&#xd;
}&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${PaymentUrlACE}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/calculate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will give the co-op order value eligibility</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">marketingFundAccountId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${marketingFundAccountId_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${marketingFundAccountId_1}&quot;);
String[] mfaobj = vars.get(&quot;marketingFundAccountId_ALL&quot;).split(&quot;,&quot;); 
int len = mfaobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList MFAid = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	MFAid.add(mfaobj[i]);
}
bsh.shared.MFAid=MFAid;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calculate Eligibility2-" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;OrderId&quot;: &quot;432&quot;,&#xd;
  &quot;UserId&quot;: &quot;3512176&quot;,&#xd;
  &quot;LineItems&quot;: [&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;1&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product3&quot;,&#xd;
      &quot;Quantity&quot;: 1,&#xd;
      &quot;ItemCost&quot;: 10,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;InvalidProgramName&quot;,&#xd;
        &quot;BrandName&quot;: &quot;brand3&quot;&#xd;
      }&#xd;
&#xd;
              }&#xd;
             &#xd;
]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/calculate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario- Invalid Program Name</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
              <stringProp name="5069648">Successful creaed</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calculate Eligibility3-" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;OrderId&quot;: &quot;432&quot;,&#xd;
  &quot;UserId&quot;: &quot;3512176&quot;,&#xd;
  &quot;LineItems&quot;: [&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;1&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product3&quot;,&#xd;
      &quot;Quantity&quot;: 1,&#xd;
      &quot;ItemCost&quot;: 10,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;PL-API11-03feb&quot;,&#xd;
        &quot;BrandName&quot;: &quot;Invalidbrand1&quot;&#xd;
      }&#xd;
&#xd;
              }&#xd;
             &#xd;
]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/calculate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario- Invalid Brand Name</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calculate Eligibility1+" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;OrderId&quot;: &quot;432&quot;,&#xd;
&quot;UserId&quot;: &quot;4038969&quot;,&#xd;
&quot;LineItems&quot;: [&#xd;
{&#xd;
&quot;LineId&quot;: &quot;1&quot;,&#xd;
&quot;ProductId&quot;: &quot;ACE_Test&quot;,&#xd;
&quot;Quantity&quot;: 1,&#xd;
&quot;ItemCost&quot;: 8.25,&#xd;
&quot;ShippingCost&quot;: 5,&#xd;
&quot;ItemTax&quot;:9.48,&#xd;
&quot;ShippingTax&quot;:0.15,&#xd;
&quot;TotalOrderLineItemCost&quot;:82.71,&#xd;
&quot;MailingListCost&quot;:1.09,&#xd;
&quot;MailingListTax&quot;: 1.20,&#xd;
&quot;ProductAttributes&quot;:&#xd;
{ &quot;ProgramName&quot;: &quot;AceTestProgram&quot;,&#xd;
&quot;BrandName&quot;: &quot;ACE&quot;&#xd;
}&#xd;
}&#xd;
]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">gateway.kube01-i.prod01.brandmuscle.net</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/calculate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will give the co-op order value eligibility https://gateway.kube01-i.prod01.brandmuscle.net/api/ChannelBuilder/v1/</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calculate Eligibility2+" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;OrderId&quot;: &quot;432&quot;,&#xd;
&quot;UserId&quot;: &quot;4038969&quot;,&#xd;
&quot;LineItems&quot;: [&#xd;
{&#xd;
&quot;LineId&quot;: &quot;1&quot;,&#xd;
&quot;ProductId&quot;: &quot;Spectrum_Test&quot;,&#xd;
&quot;Quantity&quot;: 1,&#xd;
&quot;ItemCost&quot;: 8.25,&#xd;
&quot;ShippingCost&quot;: 5,&#xd;
&quot;ItemTax&quot;:9.48,&#xd;
&quot;ShippingTax&quot;:0.15,&#xd;
&quot;TotalOrderLineItemCost&quot;:81.76,&#xd;
&quot;MailingListCost&quot;:1.09,&#xd;
&quot;MailingListTax&quot;: 1.20,&#xd;
&quot;ProductAttributes&quot;:&#xd;
{ &quot;ProgramName&quot;: &quot;Ace Paint&quot;,&#xd;
&quot;BrandName&quot;: &quot;Valspar&quot;&#xd;
}&#xd;
}&#xd;
]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01p.brandmuscle.local</stringProp>
          <stringProp name="HTTPSampler.port">11077</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/calculate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will give the co-op order value eligibility https://gateway.kube01-i.prod01.brandmuscle.net/api/ChannelBuilder/v1/</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calculate Eligibility3+" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;OrderId&quot;: &quot;432&quot;,&#xd;
&quot;UserId&quot;: &quot;4038969&quot;,&#xd;
&quot;LineItems&quot;: [&#xd;
{&#xd;
&quot;LineId&quot;: &quot;1&quot;,&#xd;
&quot;ProductId&quot;: &quot;Spectrum_Test&quot;,&#xd;
&quot;Quantity&quot;: 1,&#xd;
&quot;ItemCost&quot;: 8.25,&#xd;
&quot;ShippingCost&quot;: 5,&#xd;
&quot;ItemTax&quot;:9.48,&#xd;
&quot;ShippingTax&quot;:0.15,&#xd;
&quot;TotalOrderLineItemCost&quot;:239.56,&#xd;
&quot;MailingListCost&quot;:1.09,&#xd;
&quot;MailingListTax&quot;: 1.20,&#xd;
&quot;ProductAttributes&quot;:&#xd;
{ &quot;ProgramName&quot;: &quot;Ace Brand&quot;,&#xd;
&quot;BrandName&quot;: &quot;ACE&quot;&#xd;
}&#xd;
}&#xd;
]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">gateway.kube01-i.prod01.brandmuscle.net</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/calculate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will give the co-op order value eligibility https://gateway.kube01-i.prod01.brandmuscle.net/api/ChannelBuilder/v1/</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calculate Eligibility4+" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;OrderId&quot;: &quot;432&quot;,&#xd;
&quot;UserId&quot;: &quot;4038969&quot;,&#xd;
&quot;LineItems&quot;: [&#xd;
{&#xd;
&quot;LineId&quot;: &quot;1&quot;,&#xd;
&quot;ProductId&quot;: &quot;Spectrum_Test&quot;,&#xd;
&quot;Quantity&quot;: 1,&#xd;
&quot;ItemCost&quot;: 8.25,&#xd;
&quot;ShippingCost&quot;: 5,&#xd;
&quot;ItemTax&quot;:9.48,&#xd;
&quot;ShippingTax&quot;:0.15,&#xd;
&quot;TotalOrderLineItemCost&quot;:83.18,&#xd;
&quot;MailingListCost&quot;:1.09,&#xd;
&quot;MailingListTax&quot;: 1.20,&#xd;
&quot;ProductAttributes&quot;:&#xd;
{ &quot;ProgramName&quot;: &quot;New Store Bonus Program&quot;,&#xd;
&quot;BrandName&quot;: &quot;ACE&quot;&#xd;
}&#xd;
}&#xd;
]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">gateway.kube01-i.prod01.brandmuscle.net</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/calculate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will give the co-op order value eligibility https://gateway.kube01-i.prod01.brandmuscle.net/api/ChannelBuilder/v1/</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calculate Eligibility1+(Parameterization)two line items" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;OrderId&quot;: &quot;432&quot;,&#xd;
&quot;UserId&quot;: &quot;${UserId}&quot;,&#xd;
&quot;LineItems&quot;: [&#xd;
{&#xd;
&quot;LineId&quot;: &quot;1&quot;,&#xd;
&quot;ProductId&quot;: &quot;${ProductId}&quot;,&#xd;
&quot;Quantity&quot;: &quot;${Quantity}&quot;,&#xd;
&quot;ItemCost&quot;: &quot;${ItemCost}&quot;,&#xd;
&quot;ShippingCost&quot;: &quot;${ShippingCost}&quot;,&#xd;
&quot;ItemTax&quot;: &quot;${ItemTax}&quot;,&#xd;
&quot;ShippingTax&quot;: &quot;${ShippingTax}&quot;,&#xd;
&quot;TotalOrderLineItemCost&quot;: &quot;${TotalOrderLineItemCost}&quot;,&#xd;
&quot;MailingListCost&quot;: &quot;${MailingListCost}&quot;,&#xd;
&quot;MailingListTax&quot;: &quot;${MailingListTax}&quot;,&#xd;
&quot;ProductAttributes&quot;:&#xd;
{ &quot;ProgramName&quot;: &quot;${ProgramName}&quot;,&#xd;
&quot;BrandName&quot;: &quot;${BrandName}&quot;&#xd;
}&#xd;
},&#xd;
{&#xd;
&quot;LineId&quot;: &quot;1&quot;,&#xd;
&quot;ProductId&quot;: &quot;${ProductId2}&quot;,&#xd;
&quot;Quantity&quot;: &quot;${Quantity2}&quot;,&#xd;
&quot;ItemCost&quot;: &quot;${ItemCost2}&quot;,&#xd;
&quot;ShippingCost&quot;: &quot;${ShippingCost2}&quot;,&#xd;
&quot;ItemTax&quot;: &quot;${ItemTax2}&quot;,&#xd;
&quot;ShippingTax&quot;: &quot;${ShippingTax2}&quot;,&#xd;
&quot;TotalOrderLineItemCost&quot;: &quot;${TotalOrderLineItemCost2}&quot;,&#xd;
&quot;MailingListCost&quot;: &quot;${MailingListCost2}&quot;,&#xd;
&quot;MailingListTax&quot;: &quot;${MailingListTax2}&quot;,&#xd;
&quot;ProductAttributes&quot;:&#xd;
{ &quot;ProgramName&quot;: &quot;${ProgramName2}&quot;,&#xd;
&quot;BrandName&quot;: &quot;${BrandName2}&quot;&#xd;
}&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/calculate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will give the co-op order value eligibility</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calculate Eligibility1+Testdummy" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;OrderId&quot;: &quot;2833716&quot;,&#xd;
  &quot;UserId&quot;: &quot;4038965&quot;,&#xd;
  &quot;LineItems&quot;: [&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;14004780&quot;,&#xd;
      &quot;ProductId&quot;: &quot;Spectrum_Test&quot;,&#xd;
      &quot;Quantity&quot;: 293,&#xd;
      &quot;ItemCost&quot;: 82.71,&#xd;
      &quot;ItemTax&quot;: 5.75,&#xd;
      &quot;ShippingCost&quot;: 141.21,&#xd;
      &quot;ShippingTax&quot;: 9.89,&#xd;
      &quot;TotalOrderLineItemCost&quot;: 239.56,&#xd;
      &quot;MailingListCost&quot;: 0,&#xd;
      &quot;MailingListTax&quot;: 0,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;Ace Brand&quot;,&#xd;
        &quot;BrandName&quot;: &quot;ACE&quot;&#xd;
      },&#xd;
      &quot;PaymentAccounts&quot;: null,&#xd;
      &quot;MarketingFundAccountId&quot;: null,&#xd;
      &quot;PaymentAmount&quot;: 0&#xd;
    },&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;14004777&quot;,&#xd;
      &quot;ProductId&quot;: &quot;Spectrum_Test&quot;,&#xd;
      &quot;Quantity&quot;: 100,&#xd;
      &quot;ItemCost&quot;: 28.23,&#xd;
      &quot;ItemTax&quot;: 1.96,&#xd;
      &quot;ShippingCost&quot;: 48.2,&#xd;
      &quot;ShippingTax&quot;: 3.37,&#xd;
      &quot;TotalOrderLineItemCost&quot;: 81.76,&#xd;
      &quot;MailingListCost&quot;: 0,&#xd;
      &quot;MailingListTax&quot;: 0,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;New Store Bonus Program&quot;,&#xd;
        &quot;BrandName&quot;: &quot;ACE&quot;&#xd;
      },&#xd;
      &quot;PaymentAccounts&quot;: null,&#xd;
      &quot;MarketingFundAccountId&quot;: null,&#xd;
      &quot;PaymentAmount&quot;: 0&#xd;
    }&#xd;
  ],&#xd;
  &quot;AccountDetails&quot;: null,&#xd;
  &quot;PaymentAmount&quot;: null,&#xd;
  &quot;PaymentId&quot;: null&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">gateway.kube01-i.prod01.brandmuscle.net</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/calculate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will give the co-op order value eligibility</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calculate Eligibility1+(Prod)" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;OrderId&quot;: &quot;432&quot;,&#xd;
&quot;UserId&quot;: &quot;4038964&quot;,&#xd;
&quot;LineItems&quot;: [&#xd;
{&#xd;
&quot;LineId&quot;: &quot;1&quot;,&#xd;
&quot;ProductId&quot;: &quot;500275&quot;,&#xd;
&quot;Quantity&quot;: 1,&#xd;
&quot;ItemCost&quot;: 8.25,&#xd;
&quot;ShippingCost&quot;: 5,&#xd;
&quot;ItemTax&quot;:9.48,&#xd;
&quot;ShippingTax&quot;:0.15,&#xd;
&quot;TotalOrderLineItemCost&quot;:120000000,&#xd;
&quot;MailingListCost&quot;:1.09,&#xd;
&quot;MailingListTax&quot;: 1.20,&#xd;
&quot;ProductAttributes&quot;:&#xd;
{ &quot;ProgramName&quot;: &quot;PL-API11-03feb&quot;,&#xd;
&quot;BrandName&quot;: &quot;brand4&quot;&#xd;
}&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">prod01asp01bmi.prod01asp01bmi.p.azurewebsites.net/api/ChannelFundPayment/v1/tenants/acehardware/coop</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/calculate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will give the co-op order value eligibility</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header ManagerTest1" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IkNfRV9uQ2ZyV2lzS011RnByNG1aR2ZveXpkMCIsImtpZCI6IkNfRV9uQ2ZyV2lzS011RnByNG1aR2ZveXpkMCJ9.eyJpc3MiOiJodHRwczovL2FjZWhhcmR3YXJlLmJyYW5kbXVzY2xlLm5ldC92NW9wZW5pZCIsImF1ZCI6Imh0dHBzOi8vYWNlaGFyZHdhcmUuYnJhbmRtdXNjbGUubmV0L3Y1b3BlbmlkL3Jlc291cmNlcyIsImV4cCI6MTU1NTk0NTMyNSwibmJmIjoxNTU1OTM0NTI1LCJjbGllbnRfaWQiOiJDRk0iLCJzY29wZSI6WyJvcGVuaWQiLCJidXNpbmVzc3VuaXQiLCJwcm9maWxlIiwicm9sZXMiLCJwZXJzb24iXSwic3ViIjoiNDAzODk2NCIsImF1dGhfdGltZSI6MTU1NTkzNDUyNSwiaWRwIjoiaWRzcnYiLCJibWkuYnVzaW5lc3N1bml0aWQiOiI1NjkiLCJibWkuYnVzaW5lc3N1bml0c3lzdGVtbmFtZSI6ImFjZWhhcmR3YXJlIiwiYm1pLnBlcnNvbmlkIjoiNDMxODcxMyIsImJtaS51c2VybmFtZSI6IlVBVF9BZG1pbiIsImJtaS5maXJzdG5hbWUiOiJKb2huIiwiYm1pLmxhc3RuYW1lIjoiU21pdGgiLCJibWkuYWRkcmVzcyI6IjExMDAgU3VwZXJpb3IgQXZlbnVlIiwiYm1pLmFkZHJlc3MyIjoiU3VpdGUgNTAwIiwiYm1pLmNpdHkiOiJDbGV2ZWxhbmQiLCJibWkudGVsZXBob25lIjoiMjE2LTQ1NC0xODI2IiwiYm1pLnppcGNvZGUiOiI0NDExNCIsImJtaS5zdGF0ZSI6Ik9IIiwiYm1pLmNvdW50cnkiOiJVU0EiLCJibWkudGl0bGUiOiJQcm9qZWN0IE1hbmFnZXIiLCJibWkuZW1haWwiOiIiLCJibWkuaXNpbnRlcm5hbCI6IkZhbHNlIiwiYm1pLmxvY2FsZSI6IkVOIiwiYm1pLnJpZ2h0IjpbIkFkZHJlc3NDcmVhdGUiLCJBZGRyZXNzRGVsZXRlTWFuYWdlZCIsIkFkZHJlc3NEZWxldGVPd25lZCIsIkFkZHJlc3NFZGl0TWFuYWdlZCIsIkFkZHJlc3NFZGl0T3duZWQiLCJBZGRyZXNzVmlld01hbmFnZWQiLCJBZHZhbmNlZFNlYXJjaFVzZXJzIiwiQWxsb3dPcmRlckFuZFBheSIsIkFsbG93T3JkZXJXaXRob3V0UGF5bWVudCIsIkFsbG93UmVzdWx0VG9FeGNlbCIsIkFwcHJvdmFsRXNjYWxhdGlvbiIsIkFzc2V0TWFuYWdlciIsIkNhbkNoYW5nZVBhc3N3b3JkIiwiQ2FuQ3JvcEFsbFVwbG9hZGVkSW1hZ2VzIiwiQ2FuQ3JvcFRlbXBsYXRlSW1hZ2VzIiwiQ2FuRW11bGF0ZSIsIkNoYW5nZUxvY2F0aW9uU3RhdHVzIiwiQ29uZmlndXJlR3VpZGVkU2VhcmNoIiwiQ29uZmlndXJlUXVpY2tTZWFyY2giLCJDcmVhdGVfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiQ3JlYXRlX093bl9BZGRyZXNzQm9vayIsIkNyZWF0ZV9Pd25fQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJDcmVhdGVBbGwiLCJDcmVhdGVHcm91cHMiLCJDcmVhdGVOZXdBZE1hdGVyaWFsIiwiQ3JlYXRlVXNlcnMiLCJDcmVhdGl2ZUFwcHJvdmFsTm90UmVxdWlyZWQiLCJEZWxldGVfQWxsX0FkZHJlc3NCb29rIiwiRGVsZXRlX0FsbF9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkRlbGV0ZV9NYW5hZ2VfQWRkcmVzc0Jvb2siLCJEZWxldGVfTWFuYWdlX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRGVsZXRlX093bl9BZGRyZXNzQm9vayIsIkRlbGV0ZV9Pd25fQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJEZWxldGVBZE1hdGVyaWFsIiwiRGVsZXRlQWxsIiwiRGVsZXRlRGVsaXZlcnlSZXF1ZXN0cyIsIkRlbGV0ZVVzZXJzIiwiRGVsaXZlcnlBcHByb3ZhbE5vdFJlcXVpcmVkIiwiRG8gTm90IERlbGV0ZSBVc2VyIHdpdGggVGhpcyBQZXJtaXNzaW9uIiwiRG93bmxvYWRBc3NldHMiLCJFZGl0X0FsbF9BZGRyZXNzQm9vayIsIkVkaXRfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRWRpdF9NYW5hZ2VfQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJFZGl0X093bl9BZGRyZXNzQm9vayIsIkVkaXRBZE1hdGVyaWFsIiwiRWRpdEFkTWF0ZXJpYWxCeUFwcHJvdmVyIiwiRWRpdEFsbCIsIkVkaXRBbGxVc2VyQXBwcm92ZXIiLCJFZGl0QWxsVXNlckdyb3VwcyIsIkVkaXRBbGxVc2VyTWFuYWdlcnMiLCJFRElURU1BSUxCWUFQUFJPVkVSIiwiRWRpdE1hbmFnZWRVc2VyQXBwcm92ZXIiLCJFZGl0TWFuYWdlZFVzZXJHcm91cHMiLCJFZGl0TWFuYWdlZFVzZXJNYW5hZ2VycyIsIkVESVRVU0VSUyIsIkVESVRXRUJQQUdFQllBUFBST1ZFUiIsIkVtYWlsX0FkbWluIiwiRW1haWxfQXBwcm92ZV9FbWFpbHMiLCJFbWFpbF9DdXN0b21pemVfVGVtcGxhdGVzIiwiRW1haWxfTWFpbGluZ0xpc3RfSG9zdGVkTWFpbGluZ0xpc3QiLCJFbWFpbF9NYWlsaW5nTGlzdF9VcGxvYWRNYWlsaW5nTGlzdCIsIkVtYWlsX01haWxpbmdMaXN0X1VzZXJIb3N0ZWRNYWlsaW5nTGlzdCIsIkVtYWlsX1JlcG9ydHMiLCJFbWFpbF9TZW5kX0VtYWlscyIsIkVtYWlsX1VwbG9hZF9FbWFpbElkbGlzdCIsIkVtYWlsU2VhcmNoTG9jYXRpb25zIiwiRU1BSUxWSUVXQUxMIiwiRU5URVJQUklTRUFETUlOIiwiSFRNTFNFQVJDSExPQ0FUSU9OUyIsIkhUTUxWSUVXQUxMIiwiSFRNTFZJRVdPV05FRCIsIkxvY2F0aW9uQWRtaW5pc3RyYXRvciIsIlBhc3N0aHJvdWdoVXNlckNyZWF0aW9uIiwiUHJpbnRfTWFpbGluZ0xpc3RfVVNBRGF0YSIsIlNlYXJjaEFuZEVtdWxhdGVVc2VycyIsIlNlYXJjaExvY2F0aW9ucyIsIlNlYXJjaFVzZXIiLCJTZWxlY3RBbmRFbXVsYXRlVXNlciIsIlNFVEZVTEZJTExNRU5UU0NIRURVTEUiLCJTTVNfTWFpbGluZ0xpc3RfUHViTGlzdCIsIlN1cGVyQ3JlYXRpdmVBcHByb3ZlciIsIlN1cGVyUmVxdWVzdEFwcHJvdmVyIiwiVXBsb2FkQXNzZXQiLCJVcGxvYWRJbWFnZXNUb0xvY2F0aW9uIiwiVXBsb2FkTWFpbGluZ0xpc3RGb3JEaXJlY3RtYWlsIiwiVXBsb2FkTWFpbGluZ0xpc3RGb3JFbWFpbCIsIlRoaXJkUGFydHlGb3JEaXJlY3RtYWlsIiwiVXNlQ0JQYXltZW50IiwiVXNlQ0NQYXltZW50IiwiVXNlT25saW5lQ29vcCIsIlZpZXdfQWxsX0FkZHJlc3NCb29rIiwiVmlld19BbGxfQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJWaWV3X093bl9BZGRyZXNzQm9vayIsIlZpZXdfT3duX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiVmlld0FsbCIsIlZpZXdBbGxEb2N1bWVudHMiLCJWaWV3QWxsRG93bmxvYWRIaXN0b3J5IiwiVmlld0FsbEVtYWlscyIsIlZpZXdBbGxVc2VyQXBwcm92ZXIiLCJWaWV3QWxsVXNlckdyb3VwcyIsIlZpZXdBbGxVc2VyTWFuYWdlcnMiLCJWaWV3QWxsV2ViUGFnZXMiLCJWaWV3Q3JlYXRpdmVBcHByb3ZhbHMiLCJWaWV3Q3JlYXRpdmVzIiwiVmlld0RlbGl2ZXJ5T3B0aW9ucyIsIlZpZXdEZWxpdmVyeVJlcXVlc3RzIiwiVmlld0Rvd25sb2FkSGlzdG9yeSIsIlZpZXdFbWFpbFdvcmtDZW50ZXIiLCJWaWV3R3JvdXBzIiwiVmlld0pQRyIsIlZpZXdMb3dSZXNQREYiLCJWaWV3TWFuYWdlZFVzZXJBcHByb3ZlciIsIlZpZXdNYW5hZ2VkVXNlckdyb3VwcyIsIlZpZXdNYW5hZ2VkVXNlck1hbmFnZXJzIiwiVmlld1JlcXVlc3RBcHByb3ZhbHMiLCJWaWV3VXNlcnMiLCJXZWJQYWdlU2VhcmNoTG9jYXRpb25zIiwiV0VCUEFHRVZJRVdBTEwiLCJEQVJfQ29ycG9yYXRlIiwiY2xhaW0tcmV2aWV3IiwicHJlYXBwcm92YWwtdmlldyIsInN0YXJ0LXdvcmtmbG93IiwiYnJhbmRpbmctZGVsZXRlIiwiY2xhaW0tdmlldyIsImFjY3J1YWwtY3JlYXRlIiwicHJlYXBwcm92YWwtY3JlYXRlIiwiZGVwbG95LXdvcmtmbG93IiwiZGlzYnVyc2VtZW50LXZpZXciLCJ0cmFuc2Zlci1jcmVhdGUiLCJjbGFpbS1jcmVhdGUiLCJhZGp1c3RtZW50LWNyZWF0ZSIsInByb2dyYW0tY3JlYXRlIiwiYnJhbmRpbmctcmV2aWV3IiwicHJlYXBwcm92YWwtZGVsZXRlIiwiY2xhaW0tZGVsZXRlIiwicHJvZ3JhbS11cGRhdGUiLCJwcmVhcHByb3ZhbC1yZXZpZXciLCJhY2NvdW50LWNyZWF0ZSIsImRpc2J1cnNlbWVudC1jcmVhdGUiLCJwcm9ncmFtLWRlbGV0ZSIsImJyYW5kaW5nLWNyZWF0ZSIsImJyYW5kaW5nLXZpZXciLCJkaXNidXJzZW1lbnQtcmV2aWV3IiwicHJvZ3JhbS12aWV3IiwiYWNjb3VudC12aWV3IiwiREFSX0NsaWVudCJdLCJhbXIiOlsicGFzc3dvcmQiXX0.p2_4BrS1HVKSYLFtundD82Wb6yjQXj7OP-q3BBMEZjYPUYt4sFz9LVjJtJjY-6XWt_wvSHQ5XwjNEeMIM8C5DevioTStcageSJkZZQOZzlU80gnNisLPR3z6cw8zSAF6LnaH6hhsjRnzxtYi0NyJ70iz0VDZ2ganuEiP4FM9p0rkJaJ1syxyBLLK4Kx2VoLS4-LhdFAh-kbctvEheBW3Q0LFpwe5xiPF-q5jRLTtr7ZR4aVGVSGnQf284kOvlnflYcAbLat0ZduRgdcXjRo_jyzZHyTCW483SB2LtRM-XWIXaQ3_o3FlB6GGqNd4RQoWSfrlEEEyp7d42ZCGayV2Rg</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">marketingFundAccountId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${marketingFundAccountId_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${marketingFundAccountId_1}&quot;);
String[] mfaobj = vars.get(&quot;marketingFundAccountId_ALL&quot;).split(&quot;,&quot;); 
int len = mfaobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList MFAid = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	MFAid.add(mfaobj[i]);
}
bsh.shared.MFAid=MFAid;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calculate Eligibility1+(QA)-DW" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;OrderId&quot;: &quot;3085790&quot;,&#xd;
  &quot;UserId&quot;: &quot;4038968&quot;,&#xd;
  &quot;LineItems&quot;: [&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;14403844&quot;,&#xd;
      &quot;ProductId&quot;: &quot;DW_UATFulfillment&quot;,&#xd;
      &quot;Quantity&quot;: 1,&#xd;
      &quot;ItemCost&quot;: 91.76,&#xd;
      &quot;ItemTax&quot;: 6.66,&#xd;
      &quot;ShippingCost&quot;: 17.24,&#xd;
      &quot;ShippingTax&quot;: 1.25,&#xd;
      &quot;TotalOrderLineItemCost&quot;: 116.91,&#xd;
      &quot;MailingListCost&quot;: 0,&#xd;
      &quot;MailingListTax&quot;: 0,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;DitchWitchTestProgramDemo&quot;,&#xd;
        &quot;BrandName&quot;: null&#xd;
      },&#xd;
      &quot;PaymentAccounts&quot;: null,&#xd;
      &quot;MarketingFundAccountId&quot;: null,&#xd;
      &quot;PaymentAmount&quot;: 0&#xd;
    }&#xd;
  ],&#xd;
  &quot;AccountDetails&quot;: null,&#xd;
  &quot;PaymentAmount&quot;: null,&#xd;
  &quot;PaymentId&quot;: null&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${PaymentUrlDW}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/calculate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will give the co-op order value eligibility</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">marketingFundAccountId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${marketingFundAccountId_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${marketingFundAccountId_1}&quot;);
String[] mfaobj = vars.get(&quot;marketingFundAccountId_ALL&quot;).split(&quot;,&quot;); 
int len = mfaobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList MFAid = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	MFAid.add(mfaobj[i]);
}
bsh.shared.MFAid=MFAid;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calculate Eligibility1+(QA)-ACE" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;OrderId&quot;: &quot;432&quot;,&#xd;
&quot;UserId&quot;: &quot;4038968&quot;,&#xd;
&quot;LineItems&quot;: [&#xd;
{&#xd;
&quot;LineId&quot;: &quot;1&quot;,&#xd;
&quot;ProductId&quot;: &quot;500275&quot;,&#xd;
&quot;Quantity&quot;: 1,&#xd;
&quot;ItemCost&quot;: 8.25,&#xd;
&quot;ShippingCost&quot;: 5,&#xd;
&quot;ItemTax&quot;:9.48,&#xd;
&quot;ShippingTax&quot;:0.15,&#xd;
&quot;TotalOrderLineItemCost&quot;:12.18,&#xd;
&quot;MailingListCost&quot;:1.09,&#xd;
&quot;MailingListTax&quot;: 1.20,&#xd;
&quot;ProductAttributes&quot;:&#xd;
{ &quot;ProgramName&quot;: &quot;Reg Program Test&quot;,&#xd;
&quot;BrandName&quot;: &quot;ACE&quot;&#xd;
}&#xd;
}&#xd;
]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerName}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PaymentUrlACE}/calculate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will give the co-op order value eligibility</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">marketingFundAccountId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${marketingFundAccountId_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${marketingFundAccountId_1}&quot;);
String[] mfaobj = vars.get(&quot;marketingFundAccountId_ALL&quot;).split(&quot;,&quot;); 
int len = mfaobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList MFAid = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	MFAid.add(mfaobj[i]);
}
bsh.shared.MFAid=MFAid;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Calculate Eligibility" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{ &quot;OrderId&quot; : &quot;4152275&quot;, &quot;UserId&quot; : &quot;4038968&quot;, &quot;LineItems&quot; : [{ &quot;LineId&quot; : &quot;15778372&quot;, &quot;ProductId&quot; : &quot;500275&quot;, &quot;Quantity&quot; : 8, &quot;ItemCost&quot; : &quot;45.93&quot;, &quot;ItemTax&quot; : &quot;0.0000&quot;, &quot;ShippingCost&quot; : &quot;3.13&quot;, &quot;ShippingTax&quot; : &quot;0.0000&quot;, &quot;TotalOrderLineItemCost&quot; : &quot;49.0600&quot;, &quot;MailingListCost&quot; : &quot;0.0&quot;, &quot;MailingListTax&quot; : &quot;0.0&quot;, &quot;ProductAttributes&quot; : { &quot;ProgramName&quot; : &quot;TestProgram3December&quot;, &quot;BrandName&quot; : &quot;ACE&quot; } }] }</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerName}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PaymentUrlACE}/calculate</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will give the co-op order value eligibility   </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">marketingFundAccountId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${marketingFundAccountId_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${marketingFundAccountId_1}&quot;);
String[] mfaobj = vars.get(&quot;marketingFundAccountId_ALL&quot;).split(&quot;,&quot;); 
int len = mfaobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList MFAid = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	MFAid.add(mfaobj[i]);
}
bsh.shared.MFAid=MFAid;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/tenants/{tenantId}/coop/authorizepayment-POST" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517653793000</longProp>
        <longProp name="ThreadGroup.end_time">1517653793000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">http://azweb02u:11077/api/ChannelFundPayment/v1/tenants/acehardware/coop/authorizepayment</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Payment_Authorization1+" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;OrderId&quot;: &quot;4152275&quot;,&#xd;
  &quot;UserId&quot;: &quot;4038968&quot;,&#xd;
  &quot;LineItems&quot;: [&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;15778372&quot;,&#xd;
      &quot;ProductId&quot;: &quot;500275&quot;,&#xd;
      &quot;Quantity&quot;: 8,&#xd;
      &quot;ItemCost&quot;: &quot;45.93&quot;,&#xd;
      &quot;ShippingCost&quot;: &quot;3.13&quot;,&#xd;
      &quot;ItemTax&quot;: &quot;0.0000&quot;,&#xd;
      &quot;ShippingTax&quot;: &quot;0.0000&quot;,&#xd;
      &quot;TotalOrderLineItemCost&quot;: &quot;49.0600&quot;,&#xd;
      &quot;MailingListCost&quot;: &quot;0.0&quot;,&#xd;
      &quot;MailingListTax&quot;: &quot;0.0&quot;,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;TestProgram3December&quot;,&#xd;
        &quot;BrandName&quot;: &quot;ACE&quot;&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;6D37EC6C-DF9B-49FA-A651-F68311EE06B0&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;PaymentAmount&quot;: [&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;6D37EC6C-DF9B-49FA-A651-F68311EE06B0&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 10.50,&#xd;
        &quot;Currency&quot;: &quot;USD&quot;&#xd;
      }&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerName}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PaymentUrlACE}/authorizepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">This will give payment authorization</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="TestPlan.comments">This will fetch Payment Id and it can be used in another Payment API methods</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">payid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..PaymentId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${payid_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${payid_1}&quot;);
String[] payidobj = vars.get(&quot;payid_ALL&quot;).split(&quot;,&quot;); 
int len = payidobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList PaymentID = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	PaymentID.add(payidobj[i]);
}
bsh.shared.PaymentID=PaymentID;
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Payment_Authorization1+(Parameterization)" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;OrderId&quot;: &quot;432&quot;,&#xd;
  &quot;UserId&quot;: &quot;${UserId}&quot;,&#xd;
  &quot;LineItems&quot;: [&#xd;
   {&#xd;
&quot;LineId&quot;: &quot;1&quot;,&#xd;
&quot;ProductId&quot;: &quot;${ProductId}&quot;,&#xd;
&quot;Quantity&quot;: &quot;${Quantity}&quot;,&#xd;
&quot;ItemCost&quot;: &quot;${ItemCost}&quot;,&#xd;
&quot;ShippingCost&quot;: &quot;${ShippingCost}&quot;,&#xd;
&quot;ItemTax&quot;: &quot;${ItemTax}&quot;,&#xd;
&quot;ShippingTax&quot;: &quot;${ShippingTax}&quot;,&#xd;
&quot;TotalOrderLineItemCost&quot;: &quot;${TotalOrderLineItemCost}&quot;,&#xd;
&quot;MailingListCost&quot;: &quot;${MailingListCost}&quot;,&#xd;
&quot;MailingListTax&quot;: &quot;${MailingListTax}&quot;,&#xd;
&quot;ProductAttributes&quot;:&#xd;
{ &quot;ProgramName&quot;: &quot;${ProgramName}&quot;,&#xd;
&quot;BrandName&quot;: &quot;${BrandName}&quot;&#xd;
},&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;${__BeanShell(bsh.shared.MFAid.get(${a}),)}&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;PaymentAmount&quot;: [&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;${__BeanShell(bsh.shared.MFAid.get(${a}),)}&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 100,&#xd;
        &quot;Currency&quot;: &quot;USD&quot;&#xd;
      }&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/authorizepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">This will give payment authorization</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="TestPlan.comments">This will fetch Payment Id and it can be used in another Payment API methods</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">payid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..PaymentId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${payid_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${payid_1}&quot;);
String[] payidobj = vars.get(&quot;payid_ALL&quot;).split(&quot;,&quot;); 
int len = payidobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList PaymentID = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	PaymentID.add(payidobj[i]);
}
bsh.shared.PaymentID=PaymentID;
//D:\JMETER\bin\Jmeterlogfile.csv</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Payment_Authorization2-" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;OrderId&quot;: &quot;Order123&quot;,&#xd;
  &quot;UserId&quot;: &quot;3512176&quot;,&#xd;
  &quot;LineItems&quot;: [&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;1&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product3&quot;,&#xd;
      &quot;Quantity&quot;: 10,&#xd;
      &quot;ItemCost&quot;: 10,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;PL-API11-03feb&quot;,&#xd;
        &quot;BrandName&quot;: &quot;brand3&quot;&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;7abafd12-4bb8-4053-a6d4-f9e5dd64b938&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;2&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product3&quot;,&#xd;
      &quot;Quantity&quot;: 2,&#xd;
      &quot;ItemCost&quot;: 20,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;PL-API11-03feb&quot;,&#xd;
        &quot;BrandName&quot;: &quot;brand3&quot;&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;7abafd12-4bb8-4053-a6d4-f9e5dd64b938&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;PaymentAmount&quot;: [&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;7abafd12-4bb8-4053-a6d4-f9e5dd64b938&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 100,&#xd;
        &quot;Currency&quot;: &quot;USD&quot;&#xd;
      }&#xd;
    },&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;7abafd12-4bb8-4053-a6d4-f9e5dd64b938&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 40,&#xd;
        &quot;Currency&quot;: &quot;USD&quot;&#xd;
      }&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/authorizepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Validating against the formulas</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Payment_Authorization3-" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;OrderId&quot;: &quot;Order123&quot;,&#xd;
  &quot;UserId&quot;: &quot;3512176&quot;,&#xd;
  &quot;LineItems&quot;: [&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;1&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product3&quot;,&#xd;
      &quot;Quantity&quot;: 10,&#xd;
      &quot;ItemCost&quot;: 10,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;PL-API11-03feb&quot;,&#xd;
        &quot;BrandName&quot;: &quot;brand3&quot;&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;Invalid 7abafd12-4bb8-4053-a6d4-f9e5dd64b938&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;2&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product3&quot;,&#xd;
      &quot;Quantity&quot;: 2,&#xd;
      &quot;ItemCost&quot;: 20,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;PL-API11-03feb&quot;,&#xd;
        &quot;BrandName&quot;: &quot;brand3&quot;&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;Invalid 7abafd12-4bb8-4053-a6d4-f9e5dd64b938&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;PaymentAmount&quot;: [&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;Invalid 7abafd12-4bb8-4053-a6d4-f9e5dd64b938&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 100,&#xd;
        &quot;Currency&quot;: &quot;USD&quot;&#xd;
      }&#xd;
    },&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;Invalid 7abafd12-4bb8-4053-a6d4-f9e5dd64b938&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 40,&#xd;
        &quot;Currency&quot;: &quot;USD&quot;&#xd;
      }&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/authorizepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass Invalid Marketing Fund Account Id</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Payment_Authorization4-" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;OrderId&quot;: &quot;Order123&quot;,&#xd;
  &quot;UserId&quot;: &quot;3512176&quot;,&#xd;
  &quot;LineItems&quot;: [&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;1&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product3&quot;,&#xd;
      &quot;Quantity&quot;: 1,&#xd;
      &quot;ItemCost&quot;: 10,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;PL-API11-03feb&quot;,&#xd;
        &quot;BrandName&quot;: &quot;brand3&quot;&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;7abafd12-4bb8-4053-a6d4-f9e5dd64b938&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;2&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product3&quot;,&#xd;
      &quot;Quantity&quot;: 2,&#xd;
      &quot;ItemCost&quot;: 20,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;PL-API11-03feb&quot;,&#xd;
        &quot;BrandName&quot;: &quot;brand3&quot;&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;7abafd12-4bb8-4053-a6d4-f9e5dd64b938&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;PaymentAmount&quot;: [&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;7abafd12-4bb8-4053-a6d4-f9e5dd64b938&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 100,&#xd;
        &quot;Currency&quot;: &quot;USD&quot;&#xd;
      }&#xd;
    },&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;7abafd12-4bb8-4053-a6d4-f9e5dd64b938&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 5000,&#xd;
        &quot;Currency&quot;: &quot;USD&quot;&#xd;
      }&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/authorizepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass Invalid value field</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Payment_Authorization5-" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;OrderId&quot;: &quot;Order123&quot;,&#xd;
  &quot;UserId&quot;: &quot;3512176&quot;,&#xd;
  &quot;LineItems&quot;: [&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product3&quot;,&#xd;
      &quot;Quantity&quot;: 10,&#xd;
      &quot;ItemCost&quot;: 10,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;Invalid PL-Test1-02Feb&quot;,&#xd;
        &quot;BrandName&quot;: &quot;brand3&quot;&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;76766E82-DE68-4B56-9F6A-4042FF7A8E49&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;1&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product3&quot;,&#xd;
      &quot;Quantity&quot;: 2,&#xd;
      &quot;ItemCost&quot;: 20,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;Invalid PL-Test1-02Feb&quot;,&#xd;
        &quot;BrandName&quot;: &quot;brand3&quot;&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;76766E82-DE68-4B56-9F6A-4042FF7A8E49&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;PaymentAmount&quot;: [&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;76766E82-DE68-4B56-9F6A-4042FF7A8E49&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 100,&#xd;
        &quot;Currency&quot;: &quot;USD&quot;&#xd;
      }&#xd;
    },&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;76766E82-DE68-4B56-9F6A-4042FF7A8E49&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 40,&#xd;
        &quot;Currency&quot;: &quot;USD&quot;&#xd;
      }&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/authorizepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass Invalid Program Name</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Payment_Authorization6-" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;OrderId&quot;: &quot;Order123&quot;,&#xd;
  &quot;UserId&quot;: &quot;3512176&quot;,&#xd;
  &quot;LineItems&quot;: [&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;1&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product3&quot;,&#xd;
      &quot;Quantity&quot;: 10,&#xd;
      &quot;ItemCost&quot;: 10,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;PL-API11-03feb&quot;,&#xd;
        &quot;BrandName&quot;: &quot;brand3&quot;&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;76766E82-DE68-4B56-9F6A-4042FF7A8E49&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;2&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product3&quot;,&#xd;
      &quot;Quantity&quot;: 2,&#xd;
      &quot;ItemCost&quot;: 20,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;PL-API11-03feb&quot;,&#xd;
        &quot;BrandName&quot;: &quot;brand3&quot;&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;76766E82-DE68-4B56-9F6A-4042FF7A8E49&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;PaymentAmount&quot;: [&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;76766E82-DE68-4B56-9F6A-4042FF7A8E49&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 100,&#xd;
        &quot;Currency&quot;: &quot;EUR&quot;&#xd;
      }&#xd;
    },&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;76766E82-DE68-4B56-9F6A-4042FF7A8E49&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 40,&#xd;
        &quot;Currency&quot;: &quot;EUR&quot;&#xd;
      }&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/authorizepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass Invalid Currency type</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Payment_Authorization7-" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;OrderId&quot;: &quot;Order123&quot;,&#xd;
  &quot;UserId&quot;: &quot;3512176&quot;,&#xd;
  &quot;LineItems&quot;: [&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;1&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product3&quot;,&#xd;
      &quot;Quantity&quot;: 1,&#xd;
      &quot;ItemCost&quot;: 10,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;PL-API11-03feb&quot;,&#xd;
        &quot;BrandName&quot;: &quot;Invalid brand3&quot;&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;76766E82-DE68-4B56-9F6A-4042FF7A8E49&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;2&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product3&quot;,&#xd;
      &quot;Quantity&quot;: 2,&#xd;
      &quot;ItemCost&quot;: 20,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;PL-API11-03feb&quot;,&#xd;
        &quot;BrandName&quot;: &quot;Invalid brand3&quot;&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;76766E82-DE68-4B56-9F6A-4042FF7A8E49&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;PaymentAmount&quot;: [&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;76766E82-DE68-4B56-9F6A-4042FF7A8E49&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 100,&#xd;
        &quot;Currency&quot;: &quot;USD&quot;&#xd;
      }&#xd;
    },&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;76766E82-DE68-4B56-9F6A-4042FF7A8E49&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 40,&#xd;
        &quot;Currency&quot;: &quot;USD&quot;&#xd;
      }&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb02u</stringProp>
          <stringProp name="HTTPSampler.port">11077</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/authorizepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Invalid Brand Name</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller_LOAD" enabled="false">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${load}</stringProp>
        </LoopController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Payment_Authorization1+" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;OrderId&quot;: &quot;432&quot;,&#xd;
  &quot;UserId&quot;: &quot;3512177&quot;,&#xd;
  &quot;LineItems&quot;: [&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;1&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product4&quot;,&#xd;
      &quot;Quantity&quot;: 1,&#xd;
      &quot;ItemCost&quot;: 8.25,&#xd;
      &quot;ShippingCost&quot;: 5,&#xd;
      &quot;ItemTax&quot;: 9.48,&#xd;
      &quot;ShippingTax&quot;: 0.15,&#xd;
      &quot;TotalOrderLineItemCost&quot;: 14.9,&#xd;
      &quot;MailingListCost&quot;: 1.09,&#xd;
      &quot;MailingListTax&quot;: 1.2,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;PL-API11-03feb&quot;,&#xd;
        &quot;BrandName&quot;: &quot;brand4&quot;&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;fad74d86-be88-4ac1-8c40-e906cd6f9bc6&quot;&#xd;
    },&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;2&quot;,&#xd;
      &quot;ProductId&quot;: &quot;product4&quot;,&#xd;
      &quot;Quantity&quot;: 1,&#xd;
      &quot;ItemCost&quot;: 9.48,&#xd;
      &quot;ShippingCost&quot;: 5,&#xd;
      &quot;ItemTax&quot;: 0.27,&#xd;
      &quot;ShippingTax&quot;: 0.15,&#xd;
      &quot;TotalOrderLineItemCost&quot;: 100,&#xd;
      &quot;MailingListCost&quot;: 1.09,&#xd;
      &quot;MailingListTax&quot;: 1.2,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;PL-API11-03feb&quot;,&#xd;
        &quot;BrandName&quot;: &quot;brand4&quot;&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;fad74d86-be88-4ac1-8c40-e906cd6f9bc6&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;PaymentAmount&quot;: [&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;fad74d86-be88-4ac1-8c40-e906cd6f9bc6&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 100,&#xd;
        &quot;Currency&quot;: &quot;USD&quot;&#xd;
      }&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/authorizepayment</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">This will give payment authorization</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2524">OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="TestPlan.comments">This will fetch Payment Id and it can be used in another Payment API methods</stringProp>
              <stringProp name="JSONPostProcessor.referenceNames">payid</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$..PaymentId</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
              <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
            </JSONPostProcessor>
            <hashTree/>
            <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
              <boolProp name="resetInterpreter">false</boolProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${payid_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${payid_1}&quot;);
String[] payidobj = vars.get(&quot;payid_ALL&quot;).split(&quot;,&quot;); 
int len = payidobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList PaymentID = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	PaymentID.add(payidobj[i]);
}
bsh.shared.PaymentID=PaymentID;
//D:\JMETER\bin\Jmeterlogfile.csv</stringProp>
            </BeanShellPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Capture Payment1+" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/payments/${__BeanShell(bsh.shared.PaymentID.get(${a}),)}/capturepayment</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Positive Scenario-This will capture the payment</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2524">OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Release Payment1+" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/payments/${__BeanShell(bsh.shared.PaymentID.get(${a}),)}/releasepayment</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Positive Scenario-This will release the Payment if there is any error after Capturing the payment</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2524">OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Unauthorize Payment1+" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/payments/${__BeanShell(bsh.shared.PaymentID.get(${a}),)}/unauthorizepayment</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Positive Scenario-Thiswill Unauthorize the Payment if there is any error after authorizing</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2524">OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Payment_Authorization1+" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;OrderId&quot;: &quot;432&quot;,&#xd;
  &quot;UserId&quot;: &quot;5473010&quot;,&#xd;
  &quot;LineItems&quot;: [&#xd;
    {&#xd;
      &quot;LineId&quot;: &quot;1&quot;,&#xd;
      &quot;ProductId&quot;: &quot;TestItem&quot;,&#xd;
      &quot;Quantity&quot;: 1,&#xd;
      &quot;ItemCost&quot;: 8.25,&#xd;
      &quot;ShippingCost&quot;: 5,&#xd;
      &quot;ItemTax&quot;: 9.48,&#xd;
      &quot;ShippingTax&quot;: 0.15,&#xd;
      &quot;TotalOrderLineItemCost&quot;: 12.18,&#xd;
      &quot;MailingListCost&quot;: 1.09,&#xd;
      &quot;MailingListTax&quot;: 1.2,&#xd;
      &quot;ProductAttributes&quot;: {&#xd;
        &quot;ProgramName&quot;: &quot;CNO Coop&quot;,&#xd;
        &quot;BrandName&quot;: null&#xd;
      },&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;48395af1-5c05-479b-8b93-f04e75978578&quot;&#xd;
    }&#xd;
  ],&#xd;
  &quot;PaymentAmount&quot;: [&#xd;
    {&#xd;
      &quot;MarketingFundAccountId&quot;: &quot;48395af1-5c05-479b-8b93-f04e75978578&quot;,&#xd;
      &quot;Amount&quot;: {&#xd;
        &quot;Value&quot;: 91.76,&#xd;
        &quot;Currency&quot;: &quot;USD&quot;&#xd;
      }&#xd;
    }&#xd;
  ]&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">api-i.brandmuscle.net/api/cfm-payment/v3/tenants/cnofinancial</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/coop/authorizepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">This will give payment authorization  https://api-i.brandmuscle.net/api/cfm-payment/v3/tenants/cnofinancial/coop/calculate</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="TestPlan.comments">This will fetch Payment Id and it can be used in another Payment API methods</stringProp>
            <stringProp name="JSONPostProcessor.referenceNames">payid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..PaymentId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${payid_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${payid_1}&quot;);
String[] payidobj = vars.get(&quot;payid_ALL&quot;).split(&quot;,&quot;); 
int len = payidobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList PaymentID = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	PaymentID.add(payidobj[i]);
}
bsh.shared.PaymentID=PaymentID;
</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/tenants/{tenantId}/coop/payments/{paymentId}/capturepayment-POST" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11077/api/ChannelFundPayment/v1/tenants/acehardware/coop/payments/paymentId/capturepayment</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517895887000</longProp>
        <longProp name="ThreadGroup.end_time">1517895887000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Capture Payment1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerName}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PaymentUrlACE}/payments/${__BeanShell(bsh.shared.PaymentID.get(${a}),)}/capturepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will capture the payment  /payments/${__BeanShell(bsh.shared.PaymentID.get(${a}),)}/capturepayment</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Capture Payment2-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/payments/5abc91752a97e019689c7503/capturepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Capturing a Payment which is already captured</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Capture Payment3-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ChannelFundPayment/v1/tenants/InvalidTenantId/coop/payments/5abc90cf2a97e019689c7500/capturepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Invalid TenantId</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Capture Payment4-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ChannelFundPayment/v1/tenants/acehardware/coop/payments/5abc901a2a97e019689c74fc/capturepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Invalid PaymentId</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Capture Payment5-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/ChannelFundPayment/v1/tenants/acehardware/coop/payments/5abc901a2a97e019689c74fc/capturepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-payment value as numeric value</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/tenants/{tenantId}/coop/payments/{paymentId}/releasepayment-POST" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11077/api/ChannelFundPayment/v1/tenants/acehardware/coop/payments/id/releasepayment</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517895942000</longProp>
        <longProp name="ThreadGroup.end_time">1517895942000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Release Payment1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerName}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PaymentUrlACE}/payments/${__BeanShell(bsh.shared.PaymentID.get(${a}),)}/releasepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will release the Payment if there is any error after Capturing the payment</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Release Payment2-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/payments/5abc91752a97e019689c7503/releasepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Releasing  a Payment which is already Released</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Release Payment3-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/InvalidTenantId/coop/payments/5abc91752a97e019689c7503/releasepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Invalid tenantId</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Release Payment4-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/payments/5ab8de852a97e024ec48f1d1/releasepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Invalid PaymentId</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/tenants/{tenantId}/coop/payments/{paymentId}/unauthorizepayment-POST" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11077/api/ChannelFundPayment/v1/tenants/acehardware/coop/payments/paymentId/unauthorizepayment</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517895098000</longProp>
        <longProp name="ThreadGroup.end_time">1517895098000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Unauthorize Payment1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ServerName}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${PaymentUrlACE}/payments/${__BeanShell(bsh.shared.PaymentID.get(${a}),)}/unauthorizepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-Thiswill Unauthorize the Payment if there is any error after authorizing</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Unauthorize Payment2-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/payments/6ab8d8252a97e024ec48f1c3/unauthorizepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Invalid Payment Id</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Unauthorize Payment3-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Invalid TenantId</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="paymentId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">5ab8d8252a97e024ec48f1c3</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">paymentId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/InvalidTenantId/coop/payments/5ab8d8252a97e024ec48f1c3/unauthorizepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Invalid tenantId</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Unauthorize Payment4-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelFundPayment/v1/tenants/acehardware/coop/payments/12345678/unauthorizepayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Invalid payment i.e., Numeric value not hexa decimal</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">6</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">true</boolProp>
            <intProp name="Assertion.test_type">20</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
      <hashTree/>
      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor-Validating Json Response" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">
import org.json.JSONException;
import org.json.JSONObject;

try
{
    JSONObject obj = new JSONObject(prev.getResponseDataAsString());
    log.info(&quot;valid json&quot;); 
}
catch(Exception e)
{
    log.error(&quot;==========&gt;&gt;&gt;&gt;&gt;Not a valid json&quot;);
    prev.setSuccessful(false);
}</stringProp>
        <stringProp name="TestPlan.comments"> prev.setResponseMessage(ex.getMessage());</stringProp>
      </BeanShellPostProcessor>
      <hashTree/>
      <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="TestPlan.comments">		https://api-i.qa.brandmuscle.net/api/cfm-payment/v3/tenants/acehardware/coop/authorizepayment														</stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
