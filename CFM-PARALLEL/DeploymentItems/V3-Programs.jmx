<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="4.0" jmeter="4.0 r1823414">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Programs" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">D:\CFM-RunTimeFiles\sqljdbc41.jar,D:\CFM-RunTimeFiles\sqljdbc42.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Token-Admin" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">D:\CFM-RunTimeFiles\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var wait = new support_ui.WebDriverWait(WDS.browser, 5000);
var props = org.apache.jmeter.util.JMeterUtils.getJMeterProperties()
var select=JavaImporter(org.openqa.selenium.support.ui.Select);

WDS.sampleResult.sampleStart()
java.lang.Thread.sleep(7000)
WDS.browser.get(&apos;https://acehardware.v5qa.brandmuscle.net/Login/Login.aspx&apos;)
var titlep=WDS.browser.getTitle()
WDS.log.info(&quot;titlep====&gt;&quot;+WDS.browser.getTitle());

var username=WDS.browser.findElement(pkg.By.id(&apos;UserName&apos;));
username.sendKeys(&apos;UAT_Admin&apos;);
var password=WDS.browser.findElement(pkg.By.id(&apos;Password&apos;));
password.sendKeys(&apos;mJP38dX3&apos;);
var lgnbtn=WDS.browser.findElement(pkg.By.id(&apos;LoginButton&apos;));
lgnbtn.click();
java.lang.Thread.sleep(7000)

var element = WDS.browser.findElement(org.openqa.selenium.By.name(&apos;ctl00$MainContent$ddlBusinessUnit&apos;))
var select = new org.openqa.selenium.support.ui.Select(element)
select.selectByVisibleText(&apos;ACE Hardware&apos;)

var element = WDS.browser.findElement(org.openqa.selenium.By.xpath(&apos;//a[@class=&quot;rmLink rmRootLink clickable CFMManageCoop&quot;]//span[@class=&quot;rmText&quot;][contains(text(),&quot;Manage Co-op&quot;)]&apos;))
element.click();
java.lang.Thread.sleep(25000)

var tokenvalue = WDS.browser.executeScript(&quot;return window.sessionStorage.getItem(&apos;token&apos;);&quot;) 
WDS.log.info(&quot;token====&gt;&quot;+tokenvalue);
props.put(&quot;TOKEN&quot;,tokenvalue);
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">var props = org.apache.jmeter.util.JMeterUtils.getJMeterProperties();
var it = props.get(&quot;TOKEN&quot;);
log.info(&quot;BSFTOKEN==&gt;&quot;+it);
bsh.shared.token=it;
log.info(&quot;shared variable&quot;+bsh.shared.token);</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">true</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="2524">OK</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Token(LME)" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig guiclass="com.googlecode.jmeter.plugins.webdriver.config.gui.ChromeDriverConfigGui" testclass="com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig" testname="jp@gc - Chrome Driver Config" enabled="true">
          <stringProp name="WebDriverConfig.proxy_type">SYSTEM</stringProp>
          <stringProp name="WebDriverConfig.proxy_pac_url"></stringProp>
          <stringProp name="WebDriverConfig.http_host"></stringProp>
          <intProp name="WebDriverConfig.http_port">8080</intProp>
          <boolProp name="WebDriverConfig.use_http_for_all_protocols">true</boolProp>
          <stringProp name="WebDriverConfig.https_host"></stringProp>
          <intProp name="WebDriverConfig.https_port">8080</intProp>
          <stringProp name="WebDriverConfig.ftp_host"></stringProp>
          <intProp name="WebDriverConfig.ftp_port">8080</intProp>
          <stringProp name="WebDriverConfig.socks_host"></stringProp>
          <intProp name="WebDriverConfig.socks_port">8080</intProp>
          <stringProp name="WebDriverConfig.no_proxy">localhost</stringProp>
          <boolProp name="WebDriverConfig.maximize_browser">true</boolProp>
          <boolProp name="WebDriverConfig.reset_per_iteration">false</boolProp>
          <boolProp name="WebDriverConfig.dev_mode">false</boolProp>
          <stringProp name="ChromeDriverConfig.chromedriver_path">D:\CFM-RunTimeFiles\chromedriver.exe</stringProp>
          <boolProp name="ChromeDriverConfig.android_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.headless_enabled">false</boolProp>
          <boolProp name="ChromeDriverConfig.insecurecerts_enabled">false</boolProp>
        </com.googlecode.jmeter.plugins.webdriver.config.ChromeDriverConfig>
        <hashTree/>
        <com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler guiclass="com.googlecode.jmeter.plugins.webdriver.sampler.gui.WebDriverSamplerGui" testclass="com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler" testname="jp@gc - WebDriver Sampler" enabled="true">
          <stringProp name="WebDriverSampler.script">var pkg = JavaImporter(org.openqa.selenium);
var support_ui = JavaImporter(org.openqa.selenium.support.ui.WebDriverWait);
var wait = new support_ui.WebDriverWait(WDS.browser, 5000);
var props = org.apache.jmeter.util.JMeterUtils.getJMeterProperties()
var select=JavaImporter(org.openqa.selenium.support.ui.Select);

WDS.sampleResult.sampleStart()
java.lang.Thread.sleep(7000)
WDS.browser.get(&apos;https://acehardware.v5qa.brandmuscle.net/Login/Login.aspx&apos;)
var titlep=WDS.browser.getTitle()
WDS.log.info(&quot;titlep====&gt;&quot;+WDS.browser.getTitle());

var username=WDS.browser.findElement(pkg.By.id(&apos;UserName&apos;));
username.sendKeys(&apos;UAT_RetailEmployee&apos;);
var password=WDS.browser.findElement(pkg.By.id(&apos;Password&apos;));
password.sendKeys(&apos;welcome&apos;);
var lgnbtn=WDS.browser.findElement(pkg.By.id(&apos;LoginButton&apos;));
lgnbtn.click();
java.lang.Thread.sleep(7000)


var element = WDS.browser.findElement(org.openqa.selenium.By.xpath(&apos;//span[text()=&quot;Manage Co-op&quot;]&apos;))
element.click();
java.lang.Thread.sleep(25000)

var tokenvalue = WDS.browser.executeScript(&quot;return window.sessionStorage.getItem(&apos;token&apos;);&quot;) 
WDS.log.info(&quot;token====&gt;&quot;+tokenvalue);
props.put(&quot;TOKEN&quot;,tokenvalue);
WDS.sampleResult.sampleEnd()
</stringProp>
          <stringProp name="WebDriverSampler.parameters"></stringProp>
          <stringProp name="WebDriverSampler.language">javascript</stringProp>
        </com.googlecode.jmeter.plugins.webdriver.sampler.WebDriverSampler>
        <hashTree/>
        <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
          <boolProp name="resetInterpreter">false</boolProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="script">var props = org.apache.jmeter.util.JMeterUtils.getJMeterProperties();
var itl = props.get(&quot;TOKENLME&quot;);
log.info(&quot;BSFTOKEN==&gt;&quot;+itl);
bsh.shared.tokenlme=itl;
log.info(&quot;shared variable&quot;+bsh.shared.tokenlme);</stringProp>
        </BeanShellPostProcessor>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="49586">200</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
          <boolProp name="Assertion.assume_success">true</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
        <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
          <collectionProp name="Asserion.test_strings">
            <stringProp name="2524">OK</stringProp>
          </collectionProp>
          <stringProp name="Assertion.custom_message"></stringProp>
          <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
          <boolProp name="Assertion.assume_success">false</boolProp>
          <intProp name="Assertion.test_type">2</intProp>
        </ResponseAssertion>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>false</message>
              <threadName>true</threadName>
              <dataType>false</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>false</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Admin" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer ${__BeanShell(bsh.shared.token)}</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${ProgramURL}</stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol">https</stringProp>
        <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
        <stringProp name="CounterConfig.start">0</stringProp>
        <stringProp name="CounterConfig.end"></stringProp>
        <stringProp name="CounterConfig.incr">1</stringProp>
        <stringProp name="CounterConfig.name">a</stringProp>
        <stringProp name="CounterConfig.format"></stringProp>
        <boolProp name="CounterConfig.per_user">true</boolProp>
      </CounterConfig>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables_old" enabled="false">
        <collectionProp name="Arguments.arguments">
          <elementProp name="load" elementType="Argument">
            <stringProp name="Argument.name">load</stringProp>
            <stringProp name="Argument.value">1</stringProp>
            <stringProp name="Argument.desc">This variable is for load</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="UserId" elementType="Argument">
            <stringProp name="Argument.name">UserId</stringProp>
            <stringProp name="Argument.value">4038964</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Test User Id Admin</stringProp>
          </elementProp>
          <elementProp name="load1" elementType="Argument">
            <stringProp name="Argument.name">load1</stringProp>
            <stringProp name="Argument.value">50</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="StartDate" elementType="Argument">
            <stringProp name="Argument.name">StartDate</stringProp>
            <stringProp name="Argument.value">2018-04-25</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">start date of program</stringProp>
          </elementProp>
          <elementProp name="EndDate" elementType="Argument">
            <stringProp name="Argument.name">EndDate</stringProp>
            <stringProp name="Argument.value">2019-06-13</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">end date of program</stringProp>
          </elementProp>
          <elementProp name="ClaimDate" elementType="Argument">
            <stringProp name="Argument.name">ClaimDate</stringProp>
            <stringProp name="Argument.value">2019-07-20</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">last transaction date of program</stringProp>
          </elementProp>
          <elementProp name="ExpiryDate" elementType="Argument">
            <stringProp name="Argument.name">ExpiryDate</stringProp>
            <stringProp name="Argument.value">2019-08-27</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Expiry date of program</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="load" elementType="Argument">
            <stringProp name="Argument.name">load</stringProp>
            <stringProp name="Argument.value">2</stringProp>
            <stringProp name="Argument.desc">load value</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ProgramURL" elementType="Argument">
            <stringProp name="Argument.name">ProgramURL</stringProp>
            <stringProp name="Argument.value">api-i.qa.brandmuscle.net/api/cfm-program/v2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ClaimURL" elementType="Argument">
            <stringProp name="Argument.name">ClaimURL</stringProp>
            <stringProp name="Argument.value">api-i.qa.brandmuscle.net/api/cfm-claim-management/v2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MFAURL" elementType="Argument">
            <stringProp name="Argument.name">MFAURL</stringProp>
            <stringProp name="Argument.value">api-i.qa.brandmuscle.net/api/cfm-account/v2</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LMEuser" elementType="Argument">
            <stringProp name="Argument.name">LMEuser</stringProp>
            <stringProp name="Argument.value">UAT_RetailEmployee</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AdminUser" elementType="Argument">
            <stringProp name="Argument.name">AdminUser</stringProp>
            <stringProp name="Argument.value">UAT_Admin</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TenantId" elementType="Argument">
            <stringProp name="Argument.name">TenantId</stringProp>
            <stringProp name="Argument.value">acehardware</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="TodayDate" elementType="Argument">
            <stringProp name="Argument.name">TodayDate</stringProp>
            <stringProp name="Argument.value">${__groovy(new Date().format(&apos;yyyy-MM-dd&apos;),)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="ApproverName" elementType="Argument">
            <stringProp name="Argument.name">ApproverName</stringProp>
            <stringProp name="Argument.value">John Smith</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="AdminByUserId" elementType="Argument">
            <stringProp name="Argument.name">AdminByUserId</stringProp>
            <stringProp name="Argument.value">4038964</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CreatedByUserId" elementType="Argument">
            <stringProp name="Argument.name">CreatedByUserId</stringProp>
            <stringProp name="Argument.value">4038968</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LMECreatedBy" elementType="Argument">
            <stringProp name="Argument.name">LMECreatedBy</stringProp>
            <stringProp name="Argument.value">RetailEmployee UAT</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Admin" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Authorization</stringProp>
            <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjBCRjEzRjlDMjdFQjVBMkIwQTMyRTE2OUFGODk5OTE5RkEzMkNEREQiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJDX0VfbkNmcldpc0tNdUZwcjRtWkdmb3l6ZDAifQ.eyJuYmYiOjE1NTUwNjM0MTYsImV4cCI6MTU1NTA3MDYxNiwiaXNzIjoiaHR0cHM6Ly9hY2VoYXJkd2FyZS52NXFhLmJyYW5kbXVzY2xlLm5ldC9hcGkvdjVvaWRjL3YxIiwiYXVkIjpbImh0dHBzOi8vYWNlaGFyZHdhcmUudjVxYS5icmFuZG11c2NsZS5uZXQvYXBpL3Y1b2lkYy92MS9yZXNvdXJjZXMiLCJicmFuZG11c2NsZWFwaSJdLCJjbGllbnRfaWQiOiJDRk0iLCJzdWIiOiJVQVRfQWRtaW4tNTY5IiwiYXV0aF90aW1lIjoxNTU1MDYzNDE2LCJpZHAiOiJsb2NhbCIsImJtaS5idXNpbmVzc3VuaXRpZCI6IjU2OSIsImJtaS5idXNpbmVzc3VuaXRzeXN0ZW1uYW1lIjoiYWNlaGFyZHdhcmUiLCJibWkudXNlcmlkIjoiNDAzODk2NCIsImJtaS51c2VybmFtZSI6IlVBVF9BZG1pbiIsImJtaS5maXJzdG5hbWUiOiJKb2huIiwiYm1pLmxhc3RuYW1lIjoiU21pdGgiLCJibWkuaXNpbnRlcm5hbCI6IlRydWUiLCJibWkudGl0bGUiOiJQcm9qZWN0IE1hbmFnZXIiLCJibWkuYWRkcmVzcyI6IjExMDAgU3VwZXJpb3IgQXZlbnVlIiwiYm1pLmFkZHJlc3MyIjoiU3VpdGUgNTAwIiwiYm1pLmNpdHkiOiJDbGV2ZWxhbmQiLCJibWkuY291bnRyeSI6IlVTQSIsImJtaS5zdGF0ZSI6Ik9IIiwiYm1pLnppcGNvZGUiOiI0NDExNCIsImJtaS50ZWxlcGhvbmUiOiIyMTYtNDU0LTE4MjYiLCJibWkuZW1haWwiOiJwcmFzYW5uYS5sYWtzaG1pQGJyYW5kbXVzY2xlLmNvbSIsImJtaS5sb2NhbGUiOiJFTiIsImJtaS5yaWdodCI6WyJBZGRyZXNzQ3JlYXRlIiwiQWRkcmVzc0RlbGV0ZU1hbmFnZWQiLCJBcHByb3ZhbEVzY2FsYXRpb24iLCJBc3NldE1hbmFnZXIiLCJDYW5Dcm9wQWxsVXBsb2FkZWRJbWFnZXMiLCJDYW5Dcm9wVGVtcGxhdGVJbWFnZXMiLCJDYW5FbXVsYXRlIiwiQ29uZmlndXJlR3VpZGVkU2VhcmNoIiwiQ29uZmlndXJlUXVpY2tTZWFyY2giLCJDcmVhdGVHcm91cHMiLCJDcmVhdGl2ZUFwcHJvdmFsTm90UmVxdWlyZWQiLCJEZWxpdmVyeUFwcHJvdmFsTm90UmVxdWlyZWQiLCJEbyBOb3QgRGVsZXRlIFVzZXIgd2l0aCBUaGlzIFBlcm1pc3Npb24iLCJFZGl0X0FsbF9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkVkaXRfTWFuYWdlX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRWRpdEFkTWF0ZXJpYWxCeUFwcHJvdmVyIiwiRWRpdEFsbFVzZXJBcHByb3ZlciIsIkVkaXRBbGxVc2VyR3JvdXBzIiwiRWRpdEFsbFVzZXJNYW5hZ2VycyIsIkVESVRFTUFJTEJZQVBQUk9WRVIiLCJFZGl0TWFuYWdlZFVzZXJBcHByb3ZlciIsIkVkaXRNYW5hZ2VkVXNlckdyb3VwcyIsIkVkaXRNYW5hZ2VkVXNlck1hbmFnZXJzIiwiRW1haWxfQWRtaW4iLCJFbWFpbF9NYWlsaW5nTGlzdF9Ib3N0ZWRNYWlsaW5nTGlzdCIsIkVtYWlsX01haWxpbmdMaXN0X1VwbG9hZE1haWxpbmdMaXN0IiwiRW1haWxfTWFpbGluZ0xpc3RfVXNlckhvc3RlZE1haWxpbmdMaXN0IiwiRW1haWxfU2VuZF9FbWFpbHMiLCJFbWFpbF9VcGxvYWRfRW1haWxJZGxpc3QiLCJIVE1MU0VBUkNITE9DQVRJT05TIiwiSFRNTFZJRVdBTEwiLCJIVE1MVklFV09XTkVEIiwiUHJpbnRfTWFpbGluZ0xpc3RfVVNBRGF0YSIsIlNlYXJjaEFuZEVtdWxhdGVVc2VycyIsIlNlbGVjdEFuZEVtdWxhdGVVc2VyIiwiU0VURlVMRklMTE1FTlRTQ0hFRFVMRSIsIlN1cGVyQ3JlYXRpdmVBcHByb3ZlciIsIlN1cGVyUmVxdWVzdEFwcHJvdmVyIiwiVXBsb2FkQXNzZXQiLCJVcGxvYWRJbWFnZXNUb0xvY2F0aW9uIiwiVXBsb2FkTWFpbGluZ0xpc3RGb3JFbWFpbCIsIlVzZUNCUGF5bWVudCIsIlVzZUNDUGF5bWVudCIsIlVzZU9ubGluZUNvb3AiLCJWaWV3QWxsVXNlckFwcHJvdmVyIiwiVmlld0FsbFVzZXJHcm91cHMiLCJWaWV3QWxsVXNlck1hbmFnZXJzIiwiVmlld0NyZWF0aXZlQXBwcm92YWxzIiwiVmlld0dyb3VwcyIsIlZpZXdNYW5hZ2VkVXNlckFwcHJvdmVyIiwiVmlld01hbmFnZWRVc2VyR3JvdXBzIiwiVmlld01hbmFnZWRVc2VyTWFuYWdlcnMiLCJWaWV3UmVxdWVzdEFwcHJvdmFscyIsIkRlbGl2ZXJBc3NldCIsIkNhbkJlRW11bGF0ZWQiLCJFRElUV0VCUEFHRUJZQVBQUk9WRVIiLCJFbWFpbF9BcHByb3ZlX0VtYWlscyIsIkxvY2F0aW9uSW1hZ2VBcHByb3ZhbE5vdFJlcXVpcmVkIiwiVXBsb2FkTWFpbGluZ0xpc3RGb3JEaXJlY3RtYWlsIiwiREFSX0NsaWVudCIsImNsYWltLXJldmlldyIsInByZWFwcHJvdmFsLXZpZXciLCJzdGFydC13b3JrZmxvdyIsImJyYW5kaW5nLWRlbGV0ZSIsImNsYWltLXZpZXciLCJhY2NydWFsLWNyZWF0ZSIsInByZWFwcHJvdmFsLWNyZWF0ZSIsImRlcGxveS13b3JrZmxvdyIsImRpc2J1cnNlbWVudC12aWV3IiwidHJhbnNmZXItY3JlYXRlIiwiY2xhaW0tY3JlYXRlIiwiYWRqdXN0bWVudC1jcmVhdGUiLCJwcm9ncmFtLWNyZWF0ZSIsImJyYW5kaW5nLXJldmlldyIsInByZWFwcHJvdmFsLWRlbGV0ZSIsImNsYWltLWRlbGV0ZSIsInByb2dyYW0tdXBkYXRlIiwicHJlYXBwcm92YWwtcmV2aWV3IiwiYWNjb3VudC1jcmVhdGUiLCJkaXNidXJzZW1lbnQtY3JlYXRlIiwicHJvZ3JhbS1kZWxldGUiLCJicmFuZGluZy1jcmVhdGUiLCJicmFuZGluZy12aWV3IiwiZGlzYnVyc2VtZW50LXJldmlldyIsInByb2dyYW0tdmlldyIsImFjY291bnQtdmlldyIsIkFkZHJlc3NEZWxldGVPd25lZCIsIkFkZHJlc3NFZGl0TWFuYWdlZCIsIkFkZHJlc3NFZGl0T3duZWQiLCJBZGRyZXNzVmlld01hbmFnZWQiLCJDcmVhdGVfT3duX0FkZHJlc3NCb29rIiwiQ3JlYXRlX093bl9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkRlbGV0ZV9BbGxfQWRkcmVzc0Jvb2siLCJEZWxldGVfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRGVsZXRlX01hbmFnZV9BZGRyZXNzQm9vayIsIkRlbGV0ZV9NYW5hZ2VfQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJEZWxldGVfT3duX0FkZHJlc3NCb29rIiwiRGVsZXRlX093bl9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkVkaXRfQWxsX0FkZHJlc3NCb29rIiwiRWRpdF9Pd25fQWRkcmVzc0Jvb2siLCJWaWV3X093bl9BZGRyZXNzQm9vayIsIlZpZXdfT3duX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiQ3JlYXRlVXNlcnMiLCJFTlRFUlBSSVNFQURNSU4iLCJQYXNzdGhyb3VnaFVzZXJDcmVhdGlvbiIsIlNNU19NYWlsaW5nTGlzdF9QdWJMaXN0IiwiVGhpcmRQYXJ0eUZvckRpcmVjdG1haWwiLCJBbGxvd09yZGVyQW5kUGF5IiwiQWxsb3dPcmRlcldpdGhvdXRQYXltZW50IiwiQWxsb3dSZXN1bHRUb0V4Y2VsIiwiQ3JlYXRlTmV3QWRNYXRlcmlhbCIsIkRlbGV0ZUFkTWF0ZXJpYWwiLCJEZWxldGVEZWxpdmVyeVJlcXVlc3RzIiwiRG93bmxvYWRBc3NldHMiLCJFZGl0QWRNYXRlcmlhbCIsIkVtYWlsU2VhcmNoTG9jYXRpb25zIiwiRU1BSUxWSUVXQUxMIiwiU2VhcmNoTG9jYXRpb25zIiwiVmlld19BbGxfQWRkcmVzc0Jvb2siLCJWaWV3QWxsIiwiVmlld0FsbERvY3VtZW50cyIsIlZpZXdBbGxEb3dubG9hZEhpc3RvcnkiLCJWaWV3QWxsRW1haWxzIiwiVmlld0FsbFdlYlBhZ2VzIiwiVmlld0NyZWF0aXZlcyIsIlZpZXdEZWxpdmVyeU9wdGlvbnMiLCJWaWV3RGVsaXZlcnlSZXF1ZXN0cyIsIlZpZXdKUEciLCJWaWV3TG93UmVzUERGIiwiV2ViUGFnZVNlYXJjaExvY2F0aW9ucyIsIldFQlBBR0VWSUVXQUxMIiwiRW1haWxfQ3VzdG9taXplX1RlbXBsYXRlcyIsIkVtYWlsX1JlcG9ydHMiLCJWaWV3RW1haWxXb3JrQ2VudGVyIiwiQ2hhbmdlTG9jYXRpb25TdGF0dXMiLCJDcmVhdGVfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiQ3JlYXRlQWxsIiwiRGVsZXRlQWxsIiwiRWRpdEFsbCIsIkxvY2F0aW9uQWRtaW5pc3RyYXRvciIsIlZpZXdfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiVmlld0Rvd25sb2FkSGlzdG9yeSIsIkFkdmFuY2VkU2VhcmNoVXNlcnMiLCJEZWxldGVVc2VycyIsIkVESVRVU0VSUyIsIlNlYXJjaFVzZXIiLCJWaWV3VXNlcnMiLCJEQVJfQ29ycG9yYXRlIl0sImp0aSI6ImMwYjU4YjUxNDc4YWVmYzVmY2NjYjY4ZDY3YjdlZDFhIiwic2NvcGUiOlsib3BlbmlkIiwiYnVzaW5lc3N1bml0IiwicHJvZmlsZSIsInJvbGVzIl0sImFtciI6WyJwd2QiXX0.SvTIIbEbjllJm2pTtZLkOzgB9vJAggjQPF7a3b7kq9oP7KZnZqv-27VpHekBNxfHT3-LXzSQaWmL7nupaRH2hqEiyglTZLtI5txQdihb7xWEntKzex0s7lBPCyJR46JPU_H39SVoP2zgBRgSvFLDdB_c6t6-4Iov2Un8j1LBTC2tfrCO56yyyJ3_BqOG8j1UwpU_SY43lcf9e7igbzTkcpX8lcJeBAg0NtIFnbgp5DlAahchKbffUmlCdCNOQ3DMFURXN1Ck4OCTaNjPKsgAVtoy-O8XKgTP7OcydwLoyZDxu-OSgcWmisFW_irkeV3BEphYtJcWo7Yl_HysMvOnTg</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs-POST" enabled="false">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs?tenantId=tenant1</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517563758000</longProp>
        <longProp name="ThreadGroup.end_time">1517563758000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create New Program1+" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
  &quot;ClaimDecisionId&quot;: &quot;24&quot;,&#xd;
  &quot;FundDistributionHierarchy&quot;: &quot;org&quot;,&#xd;
  &quot;HierarchyLevel&quot;: &quot;6,7&quot;,&#xd;
  &quot;Documents&quot;: [],&#xd;
  &quot;ProgramName&quot;: &quot;API-${__javaScript(new Date().getTime();)}&quot;,&#xd;
  &quot;Description&quot;: &quot;Creating a Program&quot;,&#xd;
  &quot;ProgramCurrency&quot;: &quot;USD&quot;,&#xd;
  &quot;StartDate&quot;: &quot;${StartDate}&quot;,&#xd;
  &quot;EndDate&quot;: &quot;${EndDate}&quot;,&#xd;
  &quot;ClaimWorkflowId&quot;: 23,&#xd;
  &quot;AllowOverdraft&quot;: &quot;Yes&quot;,&#xd;
  &quot;BrandingRequired&quot;: &quot;Yes&quot;,&#xd;
  &quot;AllowECom&quot;: &quot;yes&quot;,&#xd;
  &quot;AccrualType&quot;: &quot;Flat&quot;,&#xd;
  &quot;FlatAccrualPeriod&quot;: &quot;Annual&quot;,&#xd;
  &quot;RollingAccrualPeriod&quot;: &quot;&quot;,&#xd;
  &quot;LastTransactionDate&quot;: &quot;${ClaimDate}&quot;,&#xd;
  &quot;ExpirationDate&quot;: &quot;${ExpiryDate}&quot;,&#xd;
  &quot;Activities&quot;: [&#xd;
    {&#xd;
      &quot;DirectMailName&quot;: &quot;Direct Mail&quot;,&#xd;
      &quot;DirectMailDescription&quot;: &quot;1. Image of the creative. &lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;FleetgraphicsDescription&quot;: &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;FleetgraphicsName&quot;: &quot;Fleet graphics&quot;,&#xd;
      &quot;ROPName&quot;: &quot;ROP&quot;,&#xd;
      &quot;ROPDescription&quot;: &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&lt;/n&gt; 3. One (1) original full-page tear sheet. (A tear heet is a page from the publication that serves as verification that the advertisement was published).&quot;,&#xd;
      &quot;DigitalandSocialMediaName&quot;: &quot;Digital and Social Media&quot;,&#xd;
      &quot;DigitalandSocialMediaDescription&quot;: &quot;1. Image of the Creative (Screenshot of the ad from the system or mobile).&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;OutofHomeName&quot;: &quot;Out of Home&quot;,&#xd;
      &quot;OutofHomeDescription&quot;: &quot;1. Image of the Billboard.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;SponsorshipName&quot;: &quot;Sponsorship&quot;,&#xd;
      &quot;PrePrintName&quot;: &quot;Pre Print&quot;,&#xd;
      &quot;TVName&quot;: &quot;TV&quot;,&#xd;
      &quot;TVDescription&quot;: &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
      &quot;ReceiptAdvertisingName&quot;: &quot;Receipt Advertising&quot;,&#xd;
      &quot;BlueCMNBucketName&quot;: &quot;Blue CMN Bucket&quot;,&#xd;
      &quot;RadioName&quot;: &quot;Radio&quot;,&#xd;
      &quot;RadioDescription&quot;: &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
      &quot;ReimbursementType&quot;: &quot;Fixed&quot;,&#xd;
      &quot;FixedReimbursement&quot;: 10,&#xd;
      &quot;AllowCapping&quot;: &quot;yes&quot;,&#xd;
      &quot;DirectMail&quot;: false,&#xd;
      &quot;Fleetgraphics&quot;: false,&#xd;
      &quot;ROP&quot;: false,&#xd;
      &quot;DigitalandSocialMedia&quot;: true,&#xd;
      &quot;OutofHome&quot;: false,&#xd;
      &quot;Sponsorship&quot;: false,&#xd;
      &quot;SponsorshipDescription&quot;: &quot;&quot;,&#xd;
      &quot;PrePrint&quot;: false,&#xd;
      &quot;PrePrintDescription&quot;: &quot;&quot;,&#xd;
      &quot;TV&quot;: true,&#xd;
      &quot;ReceiptAdvertising&quot;: false,&#xd;
      &quot;ReceiptAdvertisingDescription&quot;: &quot;&quot;,&#xd;
      &quot;BlueCMNBucket&quot;: false,&#xd;
      &quot;BlueCMNBucketDescription&quot;: &quot;&quot;,&#xd;
      &quot;Radio&quot;: false,&#xd;
      &quot;ActivitiesTableTextField&quot;: &quot;&quot;,&#xd;
      &quot;DirectMailRP&quot;: null,&#xd;
      &quot;DirectMailCapRP&quot;: null,&#xd;
      &quot;FleetgraphicsRP&quot;: null,&#xd;
      &quot;FleetgraphicsCapRP&quot;: null,&#xd;
      &quot;ROPRP&quot;: null,&#xd;
      &quot;ROPCapRP&quot;: null,&#xd;
      &quot;DigitalandSocialMediaRP&quot;: null,&#xd;
      &quot;DigitalandSocialMediaCapRP&quot;: 55,&#xd;
      &quot;OutofHomeRP&quot;: null,&#xd;
      &quot;OutofHomeCapRP&quot;: null,&#xd;
      &quot;SponsorshipRP&quot;: null,&#xd;
      &quot;SponsorshipCapRP&quot;: null,&#xd;
      &quot;PrePrintRP&quot;: null,&#xd;
      &quot;PrePrintCapRP&quot;: null,&#xd;
      &quot;TVRP&quot;: null,&#xd;
      &quot;TVCapRP&quot;: 25,&#xd;
      &quot;ReceiptAdvertisingRP&quot;: null,&#xd;
      &quot;ReceiptAdvertisingCapRP&quot;: null,&#xd;
      &quot;BlueCMNBucketRP&quot;: null,&#xd;
      &quot;BlueCMNBucketCapRP&quot;: null,&#xd;
      &quot;RadioRP&quot;: null,&#xd;
      &quot;RadioCapRP&quot;: null&#xd;
    }&#xd;
  ],&#xd;
  &quot;FormKey&quot;: &quot;programsace&quot;,&#xd;
  &quot;ProgramStatusName&quot;: &quot;Active&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will create a program</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="1170183121">&quot;Program Created successfully.&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetProgramsForDashboard" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramsForDashboard?tenantId=acehardware</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1522829120000</longProp>
        <longProp name="ThreadGroup.end_time">1522829120000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="KatalonTesting" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetProgramsForDashboard?tenantId=acehar</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-this will fetch Programs for Dashboard</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Admin" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjBCRjEzRjlDMjdFQjVBMkIwQTMyRTE2OUFGODk5OTE5RkEzMkNEREQiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJDX0VfbkNmcldpc0tNdUZwcjRtWkdmb3l6ZDAifQ.eyJuYmYiOjE1NTU0MTkyODAsImV4cCI6MTU1NTQyNjQ4MCwiaXNzIjoiaHR0cHM6Ly9hY2VoYXJkd2FyZS52NXFhLmJyYW5kbXVzY2xlLm5ldC9hcGkvdjVvaWRjL3YxIiwiYXVkIjpbImh0dHBzOi8vYWNlaGFyZHdhcmUudjVxYS5icmFuZG11c2NsZS5uZXQvYXBpL3Y1b2lkYy92MS9yZXNvdXJjZXMiLCJicmFuZG11c2NsZWFwaSJdLCJjbGllbnRfaWQiOiJDRk0iLCJzdWIiOiJVQVRfQWRtaW4tNTY5IiwiYXV0aF90aW1lIjoxNTU1NDE5MjgwLCJpZHAiOiJsb2NhbCIsImJtaS5idXNpbmVzc3VuaXRpZCI6IjU2OSIsImJtaS5idXNpbmVzc3VuaXRzeXN0ZW1uYW1lIjoiYWNlaGFyZHdhcmUiLCJibWkudXNlcmlkIjoiNDAzODk2NCIsImJtaS51c2VybmFtZSI6IlVBVF9BZG1pbiIsImJtaS5maXJzdG5hbWUiOiJKb2huIiwiYm1pLmxhc3RuYW1lIjoiU21pdGgiLCJibWkuaXNpbnRlcm5hbCI6IlRydWUiLCJibWkudGl0bGUiOiJQcm9qZWN0IE1hbmFnZXIiLCJibWkuYWRkcmVzcyI6IjExMDAgU3VwZXJpb3IgQXZlbnVlIiwiYm1pLmFkZHJlc3MyIjoiU3VpdGUgNTAwIiwiYm1pLmNpdHkiOiJDbGV2ZWxhbmQiLCJibWkuY291bnRyeSI6IlVTQSIsImJtaS5zdGF0ZSI6Ik9IIiwiYm1pLnppcGNvZGUiOiI0NDExNCIsImJtaS50ZWxlcGhvbmUiOiIyMTYtNDU0LTE4MjYiLCJibWkuZW1haWwiOiJwcmFzYW5uYS5sYWtzaG1pQGJyYW5kbXVzY2xlLmNvbSIsImJtaS5sb2NhbGUiOiJFTiIsImJtaS5yaWdodCI6WyJBZGRyZXNzQ3JlYXRlIiwiQWRkcmVzc0RlbGV0ZU1hbmFnZWQiLCJBcHByb3ZhbEVzY2FsYXRpb24iLCJBc3NldE1hbmFnZXIiLCJDYW5Dcm9wQWxsVXBsb2FkZWRJbWFnZXMiLCJDYW5Dcm9wVGVtcGxhdGVJbWFnZXMiLCJDYW5FbXVsYXRlIiwiQ29uZmlndXJlR3VpZGVkU2VhcmNoIiwiQ29uZmlndXJlUXVpY2tTZWFyY2giLCJDcmVhdGVHcm91cHMiLCJDcmVhdGl2ZUFwcHJvdmFsTm90UmVxdWlyZWQiLCJEZWxpdmVyeUFwcHJvdmFsTm90UmVxdWlyZWQiLCJEbyBOb3QgRGVsZXRlIFVzZXIgd2l0aCBUaGlzIFBlcm1pc3Npb24iLCJFZGl0X0FsbF9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkVkaXRfTWFuYWdlX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRWRpdEFkTWF0ZXJpYWxCeUFwcHJvdmVyIiwiRWRpdEFsbFVzZXJBcHByb3ZlciIsIkVkaXRBbGxVc2VyR3JvdXBzIiwiRWRpdEFsbFVzZXJNYW5hZ2VycyIsIkVESVRFTUFJTEJZQVBQUk9WRVIiLCJFZGl0TWFuYWdlZFVzZXJBcHByb3ZlciIsIkVkaXRNYW5hZ2VkVXNlckdyb3VwcyIsIkVkaXRNYW5hZ2VkVXNlck1hbmFnZXJzIiwiRW1haWxfQWRtaW4iLCJFbWFpbF9NYWlsaW5nTGlzdF9Ib3N0ZWRNYWlsaW5nTGlzdCIsIkVtYWlsX01haWxpbmdMaXN0X1VwbG9hZE1haWxpbmdMaXN0IiwiRW1haWxfTWFpbGluZ0xpc3RfVXNlckhvc3RlZE1haWxpbmdMaXN0IiwiRW1haWxfU2VuZF9FbWFpbHMiLCJFbWFpbF9VcGxvYWRfRW1haWxJZGxpc3QiLCJIVE1MU0VBUkNITE9DQVRJT05TIiwiSFRNTFZJRVdBTEwiLCJIVE1MVklFV09XTkVEIiwiUHJpbnRfTWFpbGluZ0xpc3RfVVNBRGF0YSIsIlNlYXJjaEFuZEVtdWxhdGVVc2VycyIsIlNlbGVjdEFuZEVtdWxhdGVVc2VyIiwiU0VURlVMRklMTE1FTlRTQ0hFRFVMRSIsIlN1cGVyQ3JlYXRpdmVBcHByb3ZlciIsIlN1cGVyUmVxdWVzdEFwcHJvdmVyIiwiVXBsb2FkQXNzZXQiLCJVcGxvYWRJbWFnZXNUb0xvY2F0aW9uIiwiVXBsb2FkTWFpbGluZ0xpc3RGb3JFbWFpbCIsIlVzZUNCUGF5bWVudCIsIlVzZUNDUGF5bWVudCIsIlVzZU9ubGluZUNvb3AiLCJWaWV3QWxsVXNlckFwcHJvdmVyIiwiVmlld0FsbFVzZXJHcm91cHMiLCJWaWV3QWxsVXNlck1hbmFnZXJzIiwiVmlld0NyZWF0aXZlQXBwcm92YWxzIiwiVmlld0dyb3VwcyIsIlZpZXdNYW5hZ2VkVXNlckFwcHJvdmVyIiwiVmlld01hbmFnZWRVc2VyR3JvdXBzIiwiVmlld01hbmFnZWRVc2VyTWFuYWdlcnMiLCJWaWV3UmVxdWVzdEFwcHJvdmFscyIsIkRlbGl2ZXJBc3NldCIsIkNhbkJlRW11bGF0ZWQiLCJFRElUV0VCUEFHRUJZQVBQUk9WRVIiLCJFbWFpbF9BcHByb3ZlX0VtYWlscyIsIkxvY2F0aW9uSW1hZ2VBcHByb3ZhbE5vdFJlcXVpcmVkIiwiVXBsb2FkTWFpbGluZ0xpc3RGb3JEaXJlY3RtYWlsIiwiREFSX0NsaWVudCIsImNsYWltLXJldmlldyIsInByZWFwcHJvdmFsLXZpZXciLCJzdGFydC13b3JrZmxvdyIsImJyYW5kaW5nLWRlbGV0ZSIsImNsYWltLXZpZXciLCJhY2NydWFsLWNyZWF0ZSIsInByZWFwcHJvdmFsLWNyZWF0ZSIsImRlcGxveS13b3JrZmxvdyIsImRpc2J1cnNlbWVudC12aWV3IiwidHJhbnNmZXItY3JlYXRlIiwiY2xhaW0tY3JlYXRlIiwiYWRqdXN0bWVudC1jcmVhdGUiLCJwcm9ncmFtLWNyZWF0ZSIsImJyYW5kaW5nLXJldmlldyIsInByZWFwcHJvdmFsLWRlbGV0ZSIsImNsYWltLWRlbGV0ZSIsInByb2dyYW0tdXBkYXRlIiwicHJlYXBwcm92YWwtcmV2aWV3IiwiYWNjb3VudC1jcmVhdGUiLCJkaXNidXJzZW1lbnQtY3JlYXRlIiwicHJvZ3JhbS1kZWxldGUiLCJicmFuZGluZy1jcmVhdGUiLCJicmFuZGluZy12aWV3IiwiZGlzYnVyc2VtZW50LXJldmlldyIsInByb2dyYW0tdmlldyIsImFjY291bnQtdmlldyIsIkFkZHJlc3NEZWxldGVPd25lZCIsIkFkZHJlc3NFZGl0TWFuYWdlZCIsIkFkZHJlc3NFZGl0T3duZWQiLCJBZGRyZXNzVmlld01hbmFnZWQiLCJDcmVhdGVfT3duX0FkZHJlc3NCb29rIiwiQ3JlYXRlX093bl9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkRlbGV0ZV9BbGxfQWRkcmVzc0Jvb2siLCJEZWxldGVfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRGVsZXRlX01hbmFnZV9BZGRyZXNzQm9vayIsIkRlbGV0ZV9NYW5hZ2VfQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJEZWxldGVfT3duX0FkZHJlc3NCb29rIiwiRGVsZXRlX093bl9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkVkaXRfQWxsX0FkZHJlc3NCb29rIiwiRWRpdF9Pd25fQWRkcmVzc0Jvb2siLCJWaWV3X093bl9BZGRyZXNzQm9vayIsIlZpZXdfT3duX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiQ3JlYXRlVXNlcnMiLCJFTlRFUlBSSVNFQURNSU4iLCJQYXNzdGhyb3VnaFVzZXJDcmVhdGlvbiIsIlNNU19NYWlsaW5nTGlzdF9QdWJMaXN0IiwiVGhpcmRQYXJ0eUZvckRpcmVjdG1haWwiLCJBbGxvd09yZGVyQW5kUGF5IiwiQWxsb3dPcmRlcldpdGhvdXRQYXltZW50IiwiQWxsb3dSZXN1bHRUb0V4Y2VsIiwiQ3JlYXRlTmV3QWRNYXRlcmlhbCIsIkRlbGV0ZUFkTWF0ZXJpYWwiLCJEZWxldGVEZWxpdmVyeVJlcXVlc3RzIiwiRG93bmxvYWRBc3NldHMiLCJFZGl0QWRNYXRlcmlhbCIsIkVtYWlsU2VhcmNoTG9jYXRpb25zIiwiRU1BSUxWSUVXQUxMIiwiU2VhcmNoTG9jYXRpb25zIiwiVmlld19BbGxfQWRkcmVzc0Jvb2siLCJWaWV3QWxsIiwiVmlld0FsbERvY3VtZW50cyIsIlZpZXdBbGxEb3dubG9hZEhpc3RvcnkiLCJWaWV3QWxsRW1haWxzIiwiVmlld0FsbFdlYlBhZ2VzIiwiVmlld0NyZWF0aXZlcyIsIlZpZXdEZWxpdmVyeU9wdGlvbnMiLCJWaWV3RGVsaXZlcnlSZXF1ZXN0cyIsIlZpZXdKUEciLCJWaWV3TG93UmVzUERGIiwiV2ViUGFnZVNlYXJjaExvY2F0aW9ucyIsIldFQlBBR0VWSUVXQUxMIiwiRW1haWxfQ3VzdG9taXplX1RlbXBsYXRlcyIsIkVtYWlsX1JlcG9ydHMiLCJWaWV3RW1haWxXb3JrQ2VudGVyIiwiQ2hhbmdlTG9jYXRpb25TdGF0dXMiLCJDcmVhdGVfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiQ3JlYXRlQWxsIiwiRGVsZXRlQWxsIiwiRWRpdEFsbCIsIkxvY2F0aW9uQWRtaW5pc3RyYXRvciIsIlZpZXdfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiVmlld0Rvd25sb2FkSGlzdG9yeSIsIkFkdmFuY2VkU2VhcmNoVXNlcnMiLCJEZWxldGVVc2VycyIsIkVESVRVU0VSUyIsIlNlYXJjaFVzZXIiLCJWaWV3VXNlcnMiLCJEQVJfQ29ycG9yYXRlIl0sImp0aSI6IjQwZmM4ZmNiM2M3ZDgzOGM2Y2E4Zjk5OGMxOTMwNWFmIiwic2NvcGUiOlsib3BlbmlkIiwiYnVzaW5lc3N1bml0IiwicHJvZmlsZSIsInJvbGVzIl0sImFtciI6WyJwd2QiXX0.yVgrcc-OT7yKrs9OKC_mkxv0dGaXmp_vU4XNjeSHtMZ0-B3QAUh07V9kxbGfP0qjUJ_pfQiGyflGLRsykLLiRqw-iqUuy6esCc66maJ2p4h-qW5B9c3oy7trbvEAHZyMPvYfC9LfejJIN7jXPzSbEypftpd0pT7YHvJI0fRE_pWKJczOAmhQiQNRFswJJy0cdXeFh4XMsu1hIfSThW2yXcla5BtHrccimoqGi6pSjCWDxABQ6CNVMOdHwqUHiRmH14WEROb2phZIPzEAe7ZvK8QaxE6GY9F3aP9D6ePOr6f8btNxjbUqSozbqaHFrWMVqBFHsX7A74F2Aj6TCjm18g</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="34333898">&quot;_id&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="35548181">&quot;ProgramName&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">programid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..$oid</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${programid_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${programid_1}&quot;);
String[] prgid = vars.get(&quot;programid_ALL&quot;).split(&quot;,&quot;); 
int len = prgid.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList numProgramid = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	numProgramid.add(prgid[i]);
}
bsh.shared.numProgramid=numProgramid;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pname</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..ProgramName</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${pname_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${pname_1}&quot;);
String[] prgname = vars.get(&quot;pname_ALL&quot;).split(&quot;,&quot;); 
int len = prgname.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList Programname = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	Programname.add(prgname[i]);
}
bsh.shared.Programname=Programname;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">userid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..CreatedByUserId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${userid_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${userid_1}&quot;);
String[] usridobj = vars.get(&quot;userid_ALL&quot;).split(&quot;,&quot;); 
int len = usridobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList UserId = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	UserId.add(usridobj[i]);
}

var UserId=&quot;3512177&quot;;
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${bsh.shared.UserId}&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DashboardPrograms" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ProgramURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetProgramsForDashboard?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-this will fetch Programs for Dashboard</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="34333898">&quot;_id&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="35548181">&quot;ProgramName&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">programid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..$oid</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${programid_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${programid_1}&quot;);
String[] prgid = vars.get(&quot;programid_ALL&quot;).split(&quot;,&quot;); 
int len = prgid.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList numProgramid = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	numProgramid.add(prgid[i]);
}
bsh.shared.numProgramid=numProgramid;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pname</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..ProgramName</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${pname_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${pname_1}&quot;);
String[] prgname = vars.get(&quot;pname_ALL&quot;).split(&quot;,&quot;); 
int len = prgname.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList Programname = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	Programname.add(prgname[i]);
}
bsh.shared.Programname=Programname;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">userid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..CreatedByUserId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${userid_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${userid_1}&quot;);
String[] usridobj = vars.get(&quot;userid_ALL&quot;).split(&quot;,&quot;); 
int len = usridobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList UserId = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	UserId.add(usridobj[i]);
}

var UserId=&quot;3512177&quot;;
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${bsh.shared.UserId}&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetProgramMappedMarketingEntity-GET" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramMappedMarketingEntity</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1518083107000</longProp>
        <longProp name="ThreadGroup.end_time">1518083107000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program Mapped Marketing Entity1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__BeanShell(bsh.shared.numProgramid.get(${a}),)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programId</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">acehardware</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="transactionProcessType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Claim</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">transactionProcessType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ProgramURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetProgramMappedMarketingEntity</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${__BeanShell(bsh.shared.numProgramid.get(${a}),)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">lmeid1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..LMEId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${lmeid1_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${lmeid1_1}&quot;);
String[] lmeid1obj = vars.get(&quot;lmeid1_ALL&quot;).split(&quot;,&quot;); 
int len = lmeid1obj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList LMEid = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	LMEid.add(lmeid1obj[i]);
}
bsh.shared.LMEid=LMEid;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">mfaid1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..MarketingFundAccountId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${mfaid1_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${mfaid1_1}&quot;);
String[] mfaid1obj = vars.get(&quot;mfaid1_ALL&quot;).split(&quot;,&quot;); 
int len = mfaid1obj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList mfaid1Id = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	mfaid1Id.add(mfaid1obj[i]);
}
bsh.shared.mfaid1Id=mfaid1Id;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">lmename1</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..LMEName</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${lmename1_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${lmename1_1}&quot;);
String[] lmename1obj = vars.get(&quot;lmename1_ALL&quot;).split(&quot;,&quot;); 
int len = lmename1obj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; lmename &quot; + len);
ArrayList lmename1Id = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	lmename1Id.add(lmename1obj[i]);
}
bsh.shared.lmename1Id=lmename1Id;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program Mapped Marketing Entity2-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">5a962c642a97e11d3811adf0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programId</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="transactionProcessType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Positive Accrual</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">transactionProcessType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramMappedMarketingEntity</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass wrong transactionProcessType as Positive Accrual/Pre-approval/Disbursement</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program Mapped Marketing Entity3-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">5a962c642a97e11d3811adf0</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programId</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewittwrongid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="transactionProcessType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Positive Accrual</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">transactionProcessType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramMappedMarketingEntity</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass wrong tenantId</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program Mapped Marketing Entity4-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">wrongid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programId</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="transactionProcessType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Positive Accrual</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">transactionProcessType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramMappedMarketingEntity</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass wrong ProgramId</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Transaction/Transaction-POST" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517832774000</longProp>
        <longProp name="ThreadGroup.end_time">1517832774000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AllocateAccrual" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
{&#xd;
  &quot;MarketingFundAccountTransactionId&quot;: 0,&#xd;
  &quot;MarketingFundAccountId&quot;: &quot;${__BeanShell(bsh.shared.MFAid.get(${a}),)}&quot;,&#xd;
  &quot;MarketingFundAccountTransactionType&quot;: &quot;PositiveAccrual from API&quot;,&#xd;
  &quot;TransactionAmount&quot;: 400,&#xd;
  &quot;TransactionPeriod&quot;: &quot;04/2019&quot;,&#xd;
  &quot;Comments&quot;: &quot;400 dollars accrued&quot;,&#xd;
  &quot;CreatedByUserId&quot;: &quot;4038964&quot;,&#xd;
  &quot;CreatedDate&quot;: &quot;2018-05-04T06:10:05.438Z&quot;,&#xd;
  &quot;ModifiedByUserId&quot;: &quot;${AdminByUserId}&quot;,&#xd;
  &quot;ModifiedDate&quot;: &quot;2019-04-18T06:10:05.438Z&quot;,&#xd;
  &quot;MarketingFundAccountTransactionSourceName&quot;: &quot;System&quot;&#xd;
}&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ProgramURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Transaction/Transaction?tenantId=acehardware </stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${__BeanShell(bsh.shared.MFAid.get(${a}),)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/ProgramSnapshot-GET" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/ProgramSnapshot?programId=1hsfgy326e32ghj3&amp;lmeList=310</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1518070117000</longProp>
        <longProp name="ThreadGroup.end_time">1518070117000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Transaction Details_Program Snapshot 1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ProgramURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/ProgramSnapshot?programId=${__BeanShell(bsh.shared.numProgramid.get(${a}),)}&amp;lmeList=${__BeanShell(bsh.shared.LMEid.get(${a}),)}&amp;tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">This will fetch all the Transaction details of a program for LME</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/{id}-GET-----------this method is not been used" enabled="false">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/213</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1518081485000</longProp>
        <longProp name="ThreadGroup.end_time">1518081485000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Detail of single Program1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/${__BeanShell(bsh.shared.numProgramid.get(${a}),)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will fetch Details of a single program   </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Test1" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IkNfRV9uQ2ZyV2lzS011RnByNG1aR2ZveXpkMCIsImtpZCI6IkNfRV9uQ2ZyV2lzS011RnByNG1aR2ZveXpkMCJ9..U6IIsrKGxCXq9EeRB71DseajD0TQTUqf1KEC8kcua_4rI8MMy9kBBsenqunR-e_dAHuFTCA9qwSvQjD0heuHyUuIJz3ZX73yN7j3nYwltfo30jT9fHM7-hEsW5y4tHTAUqCkYb9glzXNSqCtT8m8A-ho-L-LITri9YFkBQ0ZlS-j8uINljSMy-b1Fa5jDHcOgpIcNFO9C7a4w56D87itUb3GMUv6KLHCMLfASFwfbuLru4vvktN0tJ5hoVx2FTpINFpC3OHjgnAg--_LwQceKv3ds1a4ei1mR4pAaQaVS9lARlbrSwd9_YluVZMVg-BoRw44fRZF5hdoU4xPB5QPDw</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">tenantId</stringProp>
                <stringProp name="Header.value">acehardware</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Detail of single Program1+" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/${__BeanShell(bsh.shared.users.get(${a}),)}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will fetch Details of a single program</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Detail of single Program2-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/wrong Id</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-Pass wrong Program Id</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Detail of single Program3-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/Multiple ids</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-Pass multiple program ids at same time</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/UploadFile-POST----------------------------" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/UploadFile</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1518082002000</longProp>
        <longProp name="ThreadGroup.end_time">1518082002000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Programs Upload File1+" enabled="true">
          <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
            <collectionProp name="HTTPFileArgs.files">
              <elementProp name="D:\CFM-RunTimeFiles\CFM-sample.docx" elementType="HTTPFileArg">
                <stringProp name="File.path">D:\CFM-RunTimeFiles\CFM-sample.docx</stringProp>
                <stringProp name="File.paramname"></stringProp>
                <stringProp name="File.mimetype"></stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/Programs/UploadFile?folderid=abcd&amp;foldername=testfolder&amp;directoryName=testdir</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">This will Upload file for program Creation</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Admin" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__BeanShell(bsh.shared.token)}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetProgramDetails-GET" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramDetails</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1518084631000</longProp>
        <longProp name="ThreadGroup.end_time">1518084631000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Program Details1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__BeanShell(bsh.shared.numProgramid.get(${a}),)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programId</stringProp>
              </elementProp>
              <elementProp name="lmeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__BeanShell(bsh.shared.LMEid.get(${a}),)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeId</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">acehardware</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="transactionProcessType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Claim</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">transactionProcessType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ProgramURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetProgramDetails</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${__BeanShell(bsh.shared.numProgramid.get(${a}),)}${__BeanShell(bsh.shared.LMEid.get(${a}),)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Program Details2-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">5a9785962a97e1115c8e7305wrongid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programId</stringProp>
              </elementProp>
              <elementProp name="lmeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">18299</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeId</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="transactionProcessType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Claim</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">transactionProcessType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb02u</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramDetails</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative  Scenario-Pass wrong ProgramId</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Program Details3-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">5a9785962a97e1115c8e7305</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programId</stringProp>
              </elementProp>
              <elementProp name="lmeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">18299wrong</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeId</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="transactionProcessType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Claim</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">transactionProcessType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb02u</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramDetails</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative  Scenario-Pass wrong lmeid</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Program Details4-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">5a9785962a97e1115c8e7305</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programId</stringProp>
              </elementProp>
              <elementProp name="lmeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">18299</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeId</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewittwrong</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="transactionProcessType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Claim</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">transactionProcessType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb02u</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramDetails</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative  Scenario-Pass wrong Tenantid</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Program Details5-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">5a9785962a97e1115c8e7305</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programId</stringProp>
              </elementProp>
              <elementProp name="lmeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">18299</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeId</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="transactionProcessType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Claimwrongid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">transactionProcessType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb02u</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramDetails</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative  Scenario-Pass wrong transaction Process type</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetLmeForBusinessProcessType-GET" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetLmeForBusinessProcessType?businessProcessTypeId=23&amp;tenantId=we&amp;isPreApprovalAllowed=er&amp;transactionProcessType=wer</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519974551000</longProp>
        <longProp name="ThreadGroup.end_time">1519974551000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LME-BusinessProcessType1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">acehardware</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="isPreApprovalAllowed" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">No</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isPreApprovalAllowed</stringProp>
              </elementProp>
              <elementProp name="transactionProcessType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Claim</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">transactionProcessType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ProgramURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetLmeForBusinessProcessType</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will fetch LME List related to a Business Process Type</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LME-BusinessProcessType2-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="businessProcessTypeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2wrongid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">businessProcessTypeId</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewittwrong</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="isPreApprovalAllowed" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">no</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isPreApprovalAllowed</stringProp>
              </elementProp>
              <elementProp name="transactionProcessType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Claim</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">transactionProcessType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetLmeForBusinessProcessType</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass wrong teanatid</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LME-BusinessProcessType3-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="businessProcessTypeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2Invalid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">businessProcessTypeId</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="isPreApprovalAllowed" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">no</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isPreApprovalAllowed</stringProp>
              </elementProp>
              <elementProp name="transactionProcessType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Claim</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">transactionProcessType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetLmeForBusinessProcessType</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass wrong businessProcessTypeId</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LME-BusinessProcessType4-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="businessProcessTypeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">businessProcessTypeId</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="isPreApprovalAllowed" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">nowrongvalue</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isPreApprovalAllowed</stringProp>
              </elementProp>
              <elementProp name="transactionProcessType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Claim</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">transactionProcessType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetLmeForBusinessProcessType</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass wrong isPreApprovalAllowed</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LME-BusinessProcessType5-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="businessProcessTypeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">2</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">businessProcessTypeId</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="isPreApprovalAllowed" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">no</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">isPreApprovalAllowed</stringProp>
              </elementProp>
              <elementProp name="transactionProcessType" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Claimwrongvalue</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">transactionProcessType</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetLmeForBusinessProcessType</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass wrong transactionProcessType</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetProgramList-GET" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramList?tenantId=fr4</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519975176000</longProp>
        <longProp name="ThreadGroup.end_time">1519975176000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetProgramList" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">acehardware</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ProgramURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetProgramList</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will fetch all the Programs based on the Tenant Id</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Admin" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjBCRjEzRjlDMjdFQjVBMkIwQTMyRTE2OUFGODk5OTE5RkEzMkNEREQiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJDX0VfbkNmcldpc0tNdUZwcjRtWkdmb3l6ZDAifQ.eyJuYmYiOjE1NTU0MTkyODAsImV4cCI6MTU1NTQyNjQ4MCwiaXNzIjoiaHR0cHM6Ly9hY2VoYXJkd2FyZS52NXFhLmJyYW5kbXVzY2xlLm5ldC9hcGkvdjVvaWRjL3YxIiwiYXVkIjpbImh0dHBzOi8vYWNlaGFyZHdhcmUudjVxYS5icmFuZG11c2NsZS5uZXQvYXBpL3Y1b2lkYy92MS9yZXNvdXJjZXMiLCJicmFuZG11c2NsZWFwaSJdLCJjbGllbnRfaWQiOiJDRk0iLCJzdWIiOiJVQVRfQWRtaW4tNTY5IiwiYXV0aF90aW1lIjoxNTU1NDE5MjgwLCJpZHAiOiJsb2NhbCIsImJtaS5idXNpbmVzc3VuaXRpZCI6IjU2OSIsImJtaS5idXNpbmVzc3VuaXRzeXN0ZW1uYW1lIjoiYWNlaGFyZHdhcmUiLCJibWkudXNlcmlkIjoiNDAzODk2NCIsImJtaS51c2VybmFtZSI6IlVBVF9BZG1pbiIsImJtaS5maXJzdG5hbWUiOiJKb2huIiwiYm1pLmxhc3RuYW1lIjoiU21pdGgiLCJibWkuaXNpbnRlcm5hbCI6IlRydWUiLCJibWkudGl0bGUiOiJQcm9qZWN0IE1hbmFnZXIiLCJibWkuYWRkcmVzcyI6IjExMDAgU3VwZXJpb3IgQXZlbnVlIiwiYm1pLmFkZHJlc3MyIjoiU3VpdGUgNTAwIiwiYm1pLmNpdHkiOiJDbGV2ZWxhbmQiLCJibWkuY291bnRyeSI6IlVTQSIsImJtaS5zdGF0ZSI6Ik9IIiwiYm1pLnppcGNvZGUiOiI0NDExNCIsImJtaS50ZWxlcGhvbmUiOiIyMTYtNDU0LTE4MjYiLCJibWkuZW1haWwiOiJwcmFzYW5uYS5sYWtzaG1pQGJyYW5kbXVzY2xlLmNvbSIsImJtaS5sb2NhbGUiOiJFTiIsImJtaS5yaWdodCI6WyJBZGRyZXNzQ3JlYXRlIiwiQWRkcmVzc0RlbGV0ZU1hbmFnZWQiLCJBcHByb3ZhbEVzY2FsYXRpb24iLCJBc3NldE1hbmFnZXIiLCJDYW5Dcm9wQWxsVXBsb2FkZWRJbWFnZXMiLCJDYW5Dcm9wVGVtcGxhdGVJbWFnZXMiLCJDYW5FbXVsYXRlIiwiQ29uZmlndXJlR3VpZGVkU2VhcmNoIiwiQ29uZmlndXJlUXVpY2tTZWFyY2giLCJDcmVhdGVHcm91cHMiLCJDcmVhdGl2ZUFwcHJvdmFsTm90UmVxdWlyZWQiLCJEZWxpdmVyeUFwcHJvdmFsTm90UmVxdWlyZWQiLCJEbyBOb3QgRGVsZXRlIFVzZXIgd2l0aCBUaGlzIFBlcm1pc3Npb24iLCJFZGl0X0FsbF9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkVkaXRfTWFuYWdlX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRWRpdEFkTWF0ZXJpYWxCeUFwcHJvdmVyIiwiRWRpdEFsbFVzZXJBcHByb3ZlciIsIkVkaXRBbGxVc2VyR3JvdXBzIiwiRWRpdEFsbFVzZXJNYW5hZ2VycyIsIkVESVRFTUFJTEJZQVBQUk9WRVIiLCJFZGl0TWFuYWdlZFVzZXJBcHByb3ZlciIsIkVkaXRNYW5hZ2VkVXNlckdyb3VwcyIsIkVkaXRNYW5hZ2VkVXNlck1hbmFnZXJzIiwiRW1haWxfQWRtaW4iLCJFbWFpbF9NYWlsaW5nTGlzdF9Ib3N0ZWRNYWlsaW5nTGlzdCIsIkVtYWlsX01haWxpbmdMaXN0X1VwbG9hZE1haWxpbmdMaXN0IiwiRW1haWxfTWFpbGluZ0xpc3RfVXNlckhvc3RlZE1haWxpbmdMaXN0IiwiRW1haWxfU2VuZF9FbWFpbHMiLCJFbWFpbF9VcGxvYWRfRW1haWxJZGxpc3QiLCJIVE1MU0VBUkNITE9DQVRJT05TIiwiSFRNTFZJRVdBTEwiLCJIVE1MVklFV09XTkVEIiwiUHJpbnRfTWFpbGluZ0xpc3RfVVNBRGF0YSIsIlNlYXJjaEFuZEVtdWxhdGVVc2VycyIsIlNlbGVjdEFuZEVtdWxhdGVVc2VyIiwiU0VURlVMRklMTE1FTlRTQ0hFRFVMRSIsIlN1cGVyQ3JlYXRpdmVBcHByb3ZlciIsIlN1cGVyUmVxdWVzdEFwcHJvdmVyIiwiVXBsb2FkQXNzZXQiLCJVcGxvYWRJbWFnZXNUb0xvY2F0aW9uIiwiVXBsb2FkTWFpbGluZ0xpc3RGb3JFbWFpbCIsIlVzZUNCUGF5bWVudCIsIlVzZUNDUGF5bWVudCIsIlVzZU9ubGluZUNvb3AiLCJWaWV3QWxsVXNlckFwcHJvdmVyIiwiVmlld0FsbFVzZXJHcm91cHMiLCJWaWV3QWxsVXNlck1hbmFnZXJzIiwiVmlld0NyZWF0aXZlQXBwcm92YWxzIiwiVmlld0dyb3VwcyIsIlZpZXdNYW5hZ2VkVXNlckFwcHJvdmVyIiwiVmlld01hbmFnZWRVc2VyR3JvdXBzIiwiVmlld01hbmFnZWRVc2VyTWFuYWdlcnMiLCJWaWV3UmVxdWVzdEFwcHJvdmFscyIsIkRlbGl2ZXJBc3NldCIsIkNhbkJlRW11bGF0ZWQiLCJFRElUV0VCUEFHRUJZQVBQUk9WRVIiLCJFbWFpbF9BcHByb3ZlX0VtYWlscyIsIkxvY2F0aW9uSW1hZ2VBcHByb3ZhbE5vdFJlcXVpcmVkIiwiVXBsb2FkTWFpbGluZ0xpc3RGb3JEaXJlY3RtYWlsIiwiREFSX0NsaWVudCIsImNsYWltLXJldmlldyIsInByZWFwcHJvdmFsLXZpZXciLCJzdGFydC13b3JrZmxvdyIsImJyYW5kaW5nLWRlbGV0ZSIsImNsYWltLXZpZXciLCJhY2NydWFsLWNyZWF0ZSIsInByZWFwcHJvdmFsLWNyZWF0ZSIsImRlcGxveS13b3JrZmxvdyIsImRpc2J1cnNlbWVudC12aWV3IiwidHJhbnNmZXItY3JlYXRlIiwiY2xhaW0tY3JlYXRlIiwiYWRqdXN0bWVudC1jcmVhdGUiLCJwcm9ncmFtLWNyZWF0ZSIsImJyYW5kaW5nLXJldmlldyIsInByZWFwcHJvdmFsLWRlbGV0ZSIsImNsYWltLWRlbGV0ZSIsInByb2dyYW0tdXBkYXRlIiwicHJlYXBwcm92YWwtcmV2aWV3IiwiYWNjb3VudC1jcmVhdGUiLCJkaXNidXJzZW1lbnQtY3JlYXRlIiwicHJvZ3JhbS1kZWxldGUiLCJicmFuZGluZy1jcmVhdGUiLCJicmFuZGluZy12aWV3IiwiZGlzYnVyc2VtZW50LXJldmlldyIsInByb2dyYW0tdmlldyIsImFjY291bnQtdmlldyIsIkFkZHJlc3NEZWxldGVPd25lZCIsIkFkZHJlc3NFZGl0TWFuYWdlZCIsIkFkZHJlc3NFZGl0T3duZWQiLCJBZGRyZXNzVmlld01hbmFnZWQiLCJDcmVhdGVfT3duX0FkZHJlc3NCb29rIiwiQ3JlYXRlX093bl9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkRlbGV0ZV9BbGxfQWRkcmVzc0Jvb2siLCJEZWxldGVfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRGVsZXRlX01hbmFnZV9BZGRyZXNzQm9vayIsIkRlbGV0ZV9NYW5hZ2VfQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJEZWxldGVfT3duX0FkZHJlc3NCb29rIiwiRGVsZXRlX093bl9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkVkaXRfQWxsX0FkZHJlc3NCb29rIiwiRWRpdF9Pd25fQWRkcmVzc0Jvb2siLCJWaWV3X093bl9BZGRyZXNzQm9vayIsIlZpZXdfT3duX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiQ3JlYXRlVXNlcnMiLCJFTlRFUlBSSVNFQURNSU4iLCJQYXNzdGhyb3VnaFVzZXJDcmVhdGlvbiIsIlNNU19NYWlsaW5nTGlzdF9QdWJMaXN0IiwiVGhpcmRQYXJ0eUZvckRpcmVjdG1haWwiLCJBbGxvd09yZGVyQW5kUGF5IiwiQWxsb3dPcmRlcldpdGhvdXRQYXltZW50IiwiQWxsb3dSZXN1bHRUb0V4Y2VsIiwiQ3JlYXRlTmV3QWRNYXRlcmlhbCIsIkRlbGV0ZUFkTWF0ZXJpYWwiLCJEZWxldGVEZWxpdmVyeVJlcXVlc3RzIiwiRG93bmxvYWRBc3NldHMiLCJFZGl0QWRNYXRlcmlhbCIsIkVtYWlsU2VhcmNoTG9jYXRpb25zIiwiRU1BSUxWSUVXQUxMIiwiU2VhcmNoTG9jYXRpb25zIiwiVmlld19BbGxfQWRkcmVzc0Jvb2siLCJWaWV3QWxsIiwiVmlld0FsbERvY3VtZW50cyIsIlZpZXdBbGxEb3dubG9hZEhpc3RvcnkiLCJWaWV3QWxsRW1haWxzIiwiVmlld0FsbFdlYlBhZ2VzIiwiVmlld0NyZWF0aXZlcyIsIlZpZXdEZWxpdmVyeU9wdGlvbnMiLCJWaWV3RGVsaXZlcnlSZXF1ZXN0cyIsIlZpZXdKUEciLCJWaWV3TG93UmVzUERGIiwiV2ViUGFnZVNlYXJjaExvY2F0aW9ucyIsIldFQlBBR0VWSUVXQUxMIiwiRW1haWxfQ3VzdG9taXplX1RlbXBsYXRlcyIsIkVtYWlsX1JlcG9ydHMiLCJWaWV3RW1haWxXb3JrQ2VudGVyIiwiQ2hhbmdlTG9jYXRpb25TdGF0dXMiLCJDcmVhdGVfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiQ3JlYXRlQWxsIiwiRGVsZXRlQWxsIiwiRWRpdEFsbCIsIkxvY2F0aW9uQWRtaW5pc3RyYXRvciIsIlZpZXdfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiVmlld0Rvd25sb2FkSGlzdG9yeSIsIkFkdmFuY2VkU2VhcmNoVXNlcnMiLCJEZWxldGVVc2VycyIsIkVESVRVU0VSUyIsIlNlYXJjaFVzZXIiLCJWaWV3VXNlcnMiLCJEQVJfQ29ycG9yYXRlIl0sImp0aSI6IjQwZmM4ZmNiM2M3ZDgzOGM2Y2E4Zjk5OGMxOTMwNWFmIiwic2NvcGUiOlsib3BlbmlkIiwiYnVzaW5lc3N1bml0IiwicHJvZmlsZSIsInJvbGVzIl0sImFtciI6WyJwd2QiXX0.yVgrcc-OT7yKrs9OKC_mkxv0dGaXmp_vU4XNjeSHtMZ0-B3QAUh07V9kxbGfP0qjUJ_pfQiGyflGLRsykLLiRqw-iqUuy6esCc66maJ2p4h-qW5B9c3oy7trbvEAHZyMPvYfC9LfejJIN7jXPzSbEypftpd0pT7YHvJI0fRE_pWKJczOAmhQiQNRFswJJy0cdXeFh4XMsu1hIfSThW2yXcla5BtHrccimoqGi6pSjCWDxABQ6CNVMOdHwqUHiRmH14WEROb2phZIPzEAe7ZvK8QaxE6GY9F3aP9D6ePOr6f8btNxjbUqSozbqaHFrWMVqBFHsX7A74F2Aj6TCjm18g</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProgramList based on Tenantid 2-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewittwrongid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramList</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative scenario-Pass wrong TenantId</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ProgramList based on Tenantid 1+" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">acehardware</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetProgramList?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will fetch all the Programs based on the Tenant Id</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/ExpiringAmount-GET" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/ExpiringAmount?programId=wer&amp;lmeList=wr&amp;accrualPeriod=wer&amp;tenantId=we</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519975445000</longProp>
        <longProp name="ThreadGroup.end_time">1519975445000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Expiring Amount Programs List 1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ProgramURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/ExpiringAmount?programId=${__BeanShell(bsh.shared.numProgramid.get(${a}),)}&amp;lmeList=${__BeanShell(bsh.shared.LMEid.get(${a}),)}&amp;accrualPeriod=Annual&amp;tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will fetch all the Programs expiring amount${__BeanShell(bsh.shared.LMEid.get(${a}),)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Expiring Amount Programs List 2-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">5a9785962a97e1115c8e7305wrong</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programId</stringProp>
              </elementProp>
              <elementProp name="lmeList" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">07204</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeList</stringProp>
              </elementProp>
              <elementProp name="accrualPeriod" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Annual</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">accrualPeriod</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/ExpiringAmount</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative scenario-Pass wrong ProgramId</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Expiring Amount Programs List 3-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">5a9785962a97e1115c8e7305</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programId</stringProp>
              </elementProp>
              <elementProp name="lmeList" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">07204wrong</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeList</stringProp>
              </elementProp>
              <elementProp name="accrualPeriod" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Annual</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">accrualPeriod</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/ExpiringAmount</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative scenario-Pass wrong lmelist</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Expiring Amount Programs List 4-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">5a9785962a97e1115c8e7305</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programId</stringProp>
              </elementProp>
              <elementProp name="lmeList" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">07204</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeList</stringProp>
              </elementProp>
              <elementProp name="accrualPeriod" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Annualwrong</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">accrualPeriod</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/ExpiringAmount</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative scenario-Pass wrong AccrualPeriod</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Expiring Amount Programs List 5-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">5a9785962a97e1115c8e7305</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programId</stringProp>
              </elementProp>
              <elementProp name="lmeList" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">07204</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeList</stringProp>
              </elementProp>
              <elementProp name="accrualPeriod" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Annual</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">accrualPeriod</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewittwrong</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/ExpiringAmount</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative scenario-Pass wrong tenantId</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Expiring Amount Programs List 1+" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">5aaa14792a97e124dcd9e762</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programId</stringProp>
              </elementProp>
              <elementProp name="lmeList" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">__rc51HgFl6G9xLHBxXf8g</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeList</stringProp>
              </elementProp>
              <elementProp name="accrualPeriod" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Annual</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">accrualPeriod</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">acehardware</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/ExpiringAmount</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will fetch all the Programs expiring amount</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetProgramsForBrandingClaim-GET" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramsForBrandingClaim?lmeId=324&amp;activity=ref&amp;startDate=rf&amp;endDate=fd&amp;tenantId=r</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519975706000</longProp>
        <longProp name="ThreadGroup.end_time">1519975706000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Programs-Branding Claim1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="lmeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${__BeanShell(bsh.shared.LMEid.get(${a}),)}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeId</stringProp>
              </elementProp>
              <elementProp name="activity" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Direct%20Mail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">activity</stringProp>
              </elementProp>
              <elementProp name="startDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">03/13/2019</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">startDate</stringProp>
              </elementProp>
              <elementProp name="endDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">04/14/2019</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">endDate</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">acehardware</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ProgramURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetProgramsForBrandingClaim</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-Gets Programs For BusinessProcessType${__BeanShell(bsh.shared.LMEid.get(${a}),)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Programs-Branding Claim2-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="lmeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">18004wrong</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeId</stringProp>
              </elementProp>
              <elementProp name="activity" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Direct Mail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">activity</stringProp>
              </elementProp>
              <elementProp name="startDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">13/03/2018</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">startDate</stringProp>
              </elementProp>
              <elementProp name="endDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">22/03/2018</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">endDate</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramsForBrandingClaim</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-pass wrong lmeid</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Programs-Branding Claim3-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="lmeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">18004</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeId</stringProp>
              </elementProp>
              <elementProp name="activity" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Direct Mail wrong</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">activity</stringProp>
              </elementProp>
              <elementProp name="startDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">13/03/2018</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">startDate</stringProp>
              </elementProp>
              <elementProp name="endDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">22/03/2018</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">endDate</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramsForBrandingClaim</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-pass wrong activity</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Programs-Branding Claim4-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="lmeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">18004</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeId</stringProp>
              </elementProp>
              <elementProp name="activity" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Direct Mail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">activity</stringProp>
              </elementProp>
              <elementProp name="startDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">13/03/2018Invalid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">startDate</stringProp>
              </elementProp>
              <elementProp name="endDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">22/03/2018</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">endDate</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramsForBrandingClaim</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-pass wrong startdate</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Programs-Branding Claim5-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="lmeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">18004</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeId</stringProp>
              </elementProp>
              <elementProp name="activity" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Direct Mail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">activity</stringProp>
              </elementProp>
              <elementProp name="startDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">13/03/2018</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">startDate</stringProp>
              </elementProp>
              <elementProp name="endDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">22/03/2018Invalid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">endDate</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramsForBrandingClaim</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-pass wrong enddate</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Programs-Branding Claim6-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="lmeId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">18004</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeId</stringProp>
              </elementProp>
              <elementProp name="activity" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Direct Mail</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">activity</stringProp>
              </elementProp>
              <elementProp name="startDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">13/03/2018</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">startDate</stringProp>
              </elementProp>
              <elementProp name="endDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">22/03/2018</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">endDate</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">JacksonhewittInvalid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramsForBrandingClaim</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-pass wrong tenantid</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetProgramNames-GET" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramNames?tenantId=34r&amp;lmeCheck=true</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519975994000</longProp>
        <longProp name="ThreadGroup.end_time">1519975994000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program Names1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">acehardware</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="lmeCheck" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeCheck</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ProgramURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetProgramNames</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will fetch all program Names</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program Names2-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="lmeCheck" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">false</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeCheck</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramNames</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass LmeCheck as false</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program Names3-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewittinvalid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="lmeCheck" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">true</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeCheck</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramNames</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass Invalid Tenantid</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program Names4-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="lmeCheck" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">trueInvalid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">lmeCheck</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramNames</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass Invalid lmeCheck</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetProgramDocuments-GET" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramDocuments?tenantId=rf</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519976002000</longProp>
        <longProp name="ThreadGroup.end_time">1519976002000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program Documents1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">acehardware</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ProgramURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetProgramDocuments</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will fetch all Documents of programs</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program Documents2-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">JacksonhewittInvalid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramDocuments</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass Invalid tenantId</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetSchedulerExpiredProgramList-GET---------Not present in Swagger" enabled="false">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetSchedulerExpiredProgramList</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519976705000</longProp>
        <longProp name="ThreadGroup.end_time">1519976705000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Scheduler Expired Program List1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetSchedulerExpiredProgramList?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-Gets programs list for program which are closed or for which accrual type is rolling.</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetAccrualValidatedProgramList-POST" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetAccrualValidatedProgramList?tenantId=35r</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519976721000</longProp>
        <longProp name="ThreadGroup.end_time">1519976721000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Accrual Validated Programs1+" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
	&quot;${__BeanShell(bsh.shared.Programname.get(${a}),)}&quot;,&quot;ProgramJunePromo2019&quot;&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ProgramURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetAccrualValidatedProgramList</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will fetch all the Validated Programs for Accruals</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="0"></stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Accrual Validated Programs2-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewittwrong</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="programNameList" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[Prgm name1,Prgname2,Prgname3.....]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programNameList</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">http://azweb01d:11071/api/ChannelBuilder/v1/Programs/GetAccrualValidatedProgramList</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass wrong TenantId</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Accrual Validated Programs3-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="programNameList" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Invalid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programNameList</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetAccrualValidatedProgramList</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass wrong programNameList</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetValidatedProgramsForEcomPayment-POST" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetValidatedProgramsForEcomPayment?tenantId=dsf</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519976745000</longProp>
        <longProp name="ThreadGroup.end_time">1519976745000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetValidatedProgramsForEcomPayment" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
&quot;${__BeanShell(bsh.shared.Programname.get(${a}),)}&quot;&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ProgramURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetValidatedProgramsForEcomPayment?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-Gets programs list whether they are eligible for E-Com or not</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="0"></stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Ecom Validated Programs1+" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
&quot;${__BeanShell(bsh.shared.Programname.get(${a}),)}&quot;]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetValidatedProgramsForEcomPayment?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-Gets programs list whether they are eligible for E-Com or not</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="0"></stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Ecom Validated Programs2-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programNames" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">PY-Prog 1-March5 invalid</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programNames</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewitt</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetValidatedProgramsForEcomPayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass Invalid ProgramName</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Ecom Validated Programs3-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="programNames" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">PY-Prog 1-March5</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">programNames</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">Jacksonhewittwrong</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetValidatedProgramsForEcomPayment</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-Pass Invalid TenantId</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/api/Program-GET-------------------------------" enabled="false">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/api/Program</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519976797000</longProp>
        <longProp name="ThreadGroup.end_time">1519976797000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Bulk Accrual1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/api/Program</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will fetch sample excel file for bulk accrual</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetProgramUserLmeDetails-GET-Known Issue(Bug)" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramUserLmeDetails?tenantId=acehardware </stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1522828899000</longProp>
        <longProp name="ThreadGroup.end_time">1522828899000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LME User Details" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${ProgramURL}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetProgramUserLmeDetails?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments"> Load Testing is not required for this.. as this is backend process.. it will fetch 1lac 20k users so it will take lot of time for one user</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>false</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>false</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <hostname>true</hostname>
            <threadCounts>true</threadCounts>
            <sampleCount>true</sampleCount>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Transaction/Transfer-POST" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517832774000</longProp>
        <longProp name="ThreadGroup.end_time">1517832774000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Transaction/Transfer</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransferAmount1+" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
  {&#xd;
    &quot;MarketingFundAccountTransactionId&quot;: 0,&#xd;
    &quot;MarketingFundAccountId&quot;: &quot;2C1108FD-510C-4BCB-A459-221D1039EF8B&quot;,&#xd;
    &quot;MarketingFundAccountTransactionType&quot;: &quot;NegativeTransfer&quot;,&#xd;
    &quot;TransactionAmount&quot;: 20,&#xd;
    &quot;TransactionPeriod&quot;: &quot;04/2019&quot;,&#xd;
    &quot;Comments&quot;: &quot;transferring from one account to another&quot;,&#xd;
    &quot;CreatedByUserId&quot;: &quot;${UserId}&quot;,&#xd;
    &quot;CreatedDate&quot;: &quot;2019-04-18T06:10:05.464Z&quot;,&#xd;
    &quot;ModifiedByUserId&quot;: &quot;${UserId}&quot;,&#xd;
    &quot;ModifiedDate&quot;: &quot;2019-04-18T06:10:05.465Z&quot;,&#xd;
    &quot;MarketingFundAccountTransactionSourceName&quot;: &quot;System&quot;&#xd;
  }&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Transaction/Transfer?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${__BeanShell(bsh.shared.MFAid.get(${a}),)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Transaction/GetTransactionPeriod-GET" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517832774000</longProp>
        <longProp name="ThreadGroup.end_time">1517832774000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Transaction/GetTransactionPeriod?AccId=12&amp;startDate=12&amp;accrualType=12&amp;ExpirationDate=12&amp;accrualPeriod=12&amp;transactionProcessType=12</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetTransactionPeriod1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Transaction/GetTransactionPeriod?AccId=FED1D266-36DF-4610-B8E1-5E15B4F4978B&amp;startDate=${StartDate}&amp;accrualType=Flat&amp;ExpirationDate=${ExpiryDate}&amp;accrualPeriod=0&amp;transactionProcessType=Claim&amp;tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">yyyy-mm-dd</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Transaction/TransactionList-GET" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517832774000</longProp>
        <longProp name="ThreadGroup.end_time">1517832774000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Transaction/TransactionList?programId=123&amp;TransactionTypeId=123&amp;tenantId=acehardware</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransactionList1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Transaction/TransactionList?programId=5cb0332aba69314f34349b2d&amp;TransactionTypeId=3,10&amp;tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${__BeanShell(bsh.shared.numProgramid.get(${a}),)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/{id}-DELETE----Not Working" enabled="false">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/{id}</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1518071369000</longProp>
        <longProp name="ThreadGroup.end_time">1518071369000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete a Program 1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/${__BeanShell(bsh.shared.numProgramid.get(${a}),)}</stringProp>
          <stringProp name="HTTPSampler.method">DELETE</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">This will delete a program by passing Program Id</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs-GET-not used" enabled="false">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517563721000</longProp>
        <longProp name="ThreadGroup.end_time">1517563721000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="List of All Programs1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="period" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">30</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">period</stringProp>
              </elementProp>
              <elementProp name="startDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">startDate</stringProp>
              </elementProp>
              <elementProp name="endDate" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">null</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">endDate</stringProp>
              </elementProp>
              <elementProp name="tenantId" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">acehardware</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">tenantId</stringProp>
              </elementProp>
              <elementProp name="limit" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">1</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">limit</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will fetch all the Programs List and their Details</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="34333898">&quot;_id&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="35548181">&quot;ProgramName&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">programid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..$oid</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${programid_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${programid_1}&quot;);
String[] prgid = vars.get(&quot;programid_ALL&quot;).split(&quot;,&quot;); 
int len = prgid.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList numProgramid = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	numProgramid.add(prgid[i]);
}
bsh.shared.numProgramid=numProgramid;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pname</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..ProgramName</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${pname_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${pname_1}&quot;);
String[] prgname = vars.get(&quot;pname_ALL&quot;).split(&quot;,&quot;); 
int len = prgname.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList Programname = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	Programname.add(prgname[i]);
}
bsh.shared.Programname=Programname;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">userid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..CreatedByUserId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${userid_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${userid_1}&quot;);
String[] usridobj = vars.get(&quot;userid_ALL&quot;).split(&quot;,&quot;); 
int len = usridobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList UserId = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	UserId.add(usridobj[i]);
}
bsh.shared.UserId=UserId;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/UpdateScheduledProgramStatus-PUT-not used" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517566467000</longProp>
        <longProp name="ThreadGroup.end_time">1517566467000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/UpdateScheduledProgramStatus?id=</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Program Status1+" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[{&#xd;
&quot;_id&quot; :&#xd;
&#xd;
{ &quot;$oid&quot;: &quot;${__BeanShell(bsh.shared.numProgramid.get(${a}),)}&quot; }&#xd;
,&#xd;
&quot;ProgramStatusId&quot; :1,&#xd;
&quot;ModifiedByUserId&quot; : &quot;${UserId}&quot;,&#xd;
&quot;TenantId&quot; : &quot;acehardware&quot;&#xd;
&#xd;
}]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/UpdateScheduledProgramStatus?id=${__BeanShell(bsh.shared.numProgramid.get(${a}),)}</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will Update Program status</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="0"></stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Program Status2-" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"> {&#xd;
  &quot;ClaimDecisionId&quot;: &quot;24&quot;,&#xd;
  &quot;FundDistributionHierarchy&quot;: &quot;org&quot;,&#xd;
  &quot;HierarchyLevel&quot;: &quot;6,7&quot;,&#xd;
  &quot;Documents&quot;: [],&#xd;
  &quot;ProgramName&quot;: &quot;PL-APITest111-06mar&quot;,&#xd;
  &quot;Description&quot;: &quot;Creating a Program&quot;,&#xd;
  &quot;ProgramCurrency&quot;: &quot;USD&quot;,&#xd;
  &quot;StartDate&quot;: &quot;2018-02-28T18:30:00.000Z&quot;,&#xd;
  &quot;EndDate&quot;: &quot;2018-04-13T18:30:00.000Z&quot;,&#xd;
  &quot;ClaimWorkflowId&quot;: 23,&#xd;
  &quot;AllowOverdraft&quot;: &quot;Yes&quot;,&#xd;
  &quot;BrandingRequired&quot;: &quot;Yes&quot;,&#xd;
  &quot;AllowECom&quot;: &quot;yes&quot;,&#xd;
  &quot;AccrualType&quot;: &quot;Flat&quot;,&#xd;
  &quot;FlatAccrualPeriod&quot;: &quot;Annual&quot;,&#xd;
  &quot;RollingAccrualPeriod&quot;: &quot;&quot;,&#xd;
  &quot;LastTransactionDate&quot;: &quot;2018-04-20T18:30:00.000Z&quot;,&#xd;
  &quot;ExpirationDate&quot;: &quot;2018-04-27T18:30:00.000Z&quot;,&#xd;
  &quot;Activities&quot;: [&#xd;
    {&#xd;
      &quot;DirectMailName&quot;: &quot;Direct Mail&quot;,&#xd;
      &quot;DirectMailDescription&quot;: &quot;1. Image of the creative. &lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;FleetgraphicsDescription&quot;: &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;FleetgraphicsName&quot;: &quot;Fleet graphics&quot;,&#xd;
      &quot;ROPName&quot;: &quot;ROP&quot;,&#xd;
      &quot;ROPDescription&quot;: &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&lt;/n&gt; 3. One (1) original full-page tear sheet. (A tear heet is a page from the publication that serves as verification that the advertisement was published).&quot;,&#xd;
      &quot;DigitalandSocialMediaName&quot;: &quot;Digital and Social Media&quot;,&#xd;
      &quot;DigitalandSocialMediaDescription&quot;: &quot;1. Image of the Creative (Screenshot of the ad from the system or mobile).&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;OutofHomeName&quot;: &quot;Out of Home&quot;,&#xd;
      &quot;OutofHomeDescription&quot;: &quot;1. Image of the Billboard.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;SponsorshipName&quot;: &quot;Sponsorship&quot;,&#xd;
      &quot;PrePrintName&quot;: &quot;Pre Print&quot;,&#xd;
      &quot;TVName&quot;: &quot;TV&quot;,&#xd;
      &quot;TVDescription&quot;: &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
      &quot;ReceiptAdvertisingName&quot;: &quot;Receipt Advertising&quot;,&#xd;
      &quot;BlueCMNBucketName&quot;: &quot;Blue CMN Bucket&quot;,&#xd;
      &quot;RadioName&quot;: &quot;Radio&quot;,&#xd;
      &quot;RadioDescription&quot;: &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
      &quot;ReimbursementType&quot;: &quot;Fixed&quot;,&#xd;
      &quot;FixedReimbursement&quot;: 10,&#xd;
      &quot;AllowCapping&quot;: &quot;yes&quot;,&#xd;
      &quot;DirectMail&quot;: false,&#xd;
      &quot;Fleetgraphics&quot;: false,&#xd;
      &quot;ROP&quot;: false,&#xd;
      &quot;DigitalandSocialMedia&quot;: true,&#xd;
      &quot;OutofHome&quot;: false,&#xd;
      &quot;Sponsorship&quot;: false,&#xd;
      &quot;SponsorshipDescription&quot;: &quot;&quot;,&#xd;
      &quot;PrePrint&quot;: false,&#xd;
      &quot;PrePrintDescription&quot;: &quot;&quot;,&#xd;
      &quot;TV&quot;: false,&#xd;
      &quot;ReceiptAdvertising&quot;: false,&#xd;
      &quot;ReceiptAdvertisingDescription&quot;: &quot;&quot;,&#xd;
      &quot;BlueCMNBucket&quot;: false,&#xd;
      &quot;BlueCMNBucketDescription&quot;: &quot;&quot;,&#xd;
      &quot;Radio&quot;: false,&#xd;
      &quot;ActivitiesTableTextField&quot;: &quot;&quot;,&#xd;
      &quot;DirectMailRP&quot;: null,&#xd;
      &quot;DirectMailCapRP&quot;: null,&#xd;
      &quot;FleetgraphicsRP&quot;: null,&#xd;
      &quot;FleetgraphicsCapRP&quot;: null,&#xd;
      &quot;ROPRP&quot;: null,&#xd;
      &quot;ROPCapRP&quot;: null,&#xd;
      &quot;DigitalandSocialMediaRP&quot;: null,&#xd;
      &quot;DigitalandSocialMediaCapRP&quot;: 55,&#xd;
      &quot;OutofHomeRP&quot;: null,&#xd;
      &quot;OutofHomeCapRP&quot;: null,&#xd;
      &quot;SponsorshipRP&quot;: null,&#xd;
      &quot;SponsorshipCapRP&quot;: null,&#xd;
      &quot;PrePrintRP&quot;: null,&#xd;
      &quot;PrePrintCapRP&quot;: null,&#xd;
      &quot;TVRP&quot;: null,&#xd;
      &quot;TVCapRP&quot;: null,&#xd;
      &quot;ReceiptAdvertisingRP&quot;: null,&#xd;
      &quot;ReceiptAdvertisingCapRP&quot;: null,&#xd;
      &quot;BlueCMNBucketRP&quot;: null,&#xd;
      &quot;BlueCMNBucketCapRP&quot;: null,&#xd;
      &quot;RadioRP&quot;: null,&#xd;
      &quot;RadioCapRP&quot;: null&#xd;
    }&#xd;
  ],&#xd;
  &quot;FormKey&quot;: &quot;programsace&quot;,&#xd;
  &quot;ProgramStatusId&quot;: 150&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/UpdateScheduledProgramStatus?id=5a9e86d04956283cb868e9db</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-This will Update wrong Program status (150) which is invalid</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Program Status3-" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"> {&#xd;
  &quot;ClaimDecisionId&quot;: &quot;24&quot;,&#xd;
  &quot;FundDistributionHierarchy&quot;: &quot;org&quot;,&#xd;
  &quot;HierarchyLevel&quot;: &quot;6,7&quot;,&#xd;
  &quot;Documents&quot;: [],&#xd;
  &quot;ProgramName&quot;: &quot;PL-APITest111-06mar&quot;,&#xd;
  &quot;Description&quot;: &quot;Creating a Program&quot;,&#xd;
  &quot;ProgramCurrency&quot;: &quot;USD&quot;,&#xd;
  &quot;StartDate&quot;: &quot;2018-02-28T18:30:00.000Z&quot;,&#xd;
  &quot;EndDate&quot;: &quot;2018-04-13T18:30:00.000Z&quot;,&#xd;
  &quot;ClaimWorkflowId&quot;: 23,&#xd;
  &quot;AllowOverdraft&quot;: &quot;Yes&quot;,&#xd;
  &quot;BrandingRequired&quot;: &quot;Yes&quot;,&#xd;
  &quot;AllowECom&quot;: &quot;yes&quot;,&#xd;
  &quot;AccrualType&quot;: &quot;Flat&quot;,&#xd;
  &quot;FlatAccrualPeriod&quot;: &quot;Annual&quot;,&#xd;
  &quot;RollingAccrualPeriod&quot;: &quot;&quot;,&#xd;
  &quot;LastTransactionDate&quot;: &quot;2018-04-20T18:30:00.000Z&quot;,&#xd;
  &quot;ExpirationDate&quot;: &quot;2018-04-27T18:30:00.000Z&quot;,&#xd;
  &quot;Activities&quot;: [&#xd;
    {&#xd;
      &quot;DirectMailName&quot;: &quot;Direct Mail&quot;,&#xd;
      &quot;DirectMailDescription&quot;: &quot;1. Image of the creative. &lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;FleetgraphicsDescription&quot;: &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;FleetgraphicsName&quot;: &quot;Fleet graphics&quot;,&#xd;
      &quot;ROPName&quot;: &quot;ROP&quot;,&#xd;
      &quot;ROPDescription&quot;: &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&lt;/n&gt; 3. One (1) original full-page tear sheet. (A tear heet is a page from the publication that serves as verification that the advertisement was published).&quot;,&#xd;
      &quot;DigitalandSocialMediaName&quot;: &quot;Digital and Social Media&quot;,&#xd;
      &quot;DigitalandSocialMediaDescription&quot;: &quot;1. Image of the Creative (Screenshot of the ad from the system or mobile).&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;OutofHomeName&quot;: &quot;Out of Home&quot;,&#xd;
      &quot;OutofHomeDescription&quot;: &quot;1. Image of the Billboard.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;SponsorshipName&quot;: &quot;Sponsorship&quot;,&#xd;
      &quot;PrePrintName&quot;: &quot;Pre Print&quot;,&#xd;
      &quot;TVName&quot;: &quot;TV&quot;,&#xd;
      &quot;TVDescription&quot;: &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
      &quot;ReceiptAdvertisingName&quot;: &quot;Receipt Advertising&quot;,&#xd;
      &quot;BlueCMNBucketName&quot;: &quot;Blue CMN Bucket&quot;,&#xd;
      &quot;RadioName&quot;: &quot;Radio&quot;,&#xd;
      &quot;RadioDescription&quot;: &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
      &quot;ReimbursementType&quot;: &quot;Fixed&quot;,&#xd;
      &quot;FixedReimbursement&quot;: 10,&#xd;
      &quot;AllowCapping&quot;: &quot;yes&quot;,&#xd;
      &quot;DirectMail&quot;: false,&#xd;
      &quot;Fleetgraphics&quot;: false,&#xd;
      &quot;ROP&quot;: false,&#xd;
      &quot;DigitalandSocialMedia&quot;: true,&#xd;
      &quot;OutofHome&quot;: false,&#xd;
      &quot;Sponsorship&quot;: false,&#xd;
      &quot;SponsorshipDescription&quot;: &quot;&quot;,&#xd;
      &quot;PrePrint&quot;: false,&#xd;
      &quot;PrePrintDescription&quot;: &quot;&quot;,&#xd;
      &quot;TV&quot;: false,&#xd;
      &quot;ReceiptAdvertising&quot;: false,&#xd;
      &quot;ReceiptAdvertisingDescription&quot;: &quot;&quot;,&#xd;
      &quot;BlueCMNBucket&quot;: false,&#xd;
      &quot;BlueCMNBucketDescription&quot;: &quot;&quot;,&#xd;
      &quot;Radio&quot;: false,&#xd;
      &quot;ActivitiesTableTextField&quot;: &quot;&quot;,&#xd;
      &quot;DirectMailRP&quot;: null,&#xd;
      &quot;DirectMailCapRP&quot;: null,&#xd;
      &quot;FleetgraphicsRP&quot;: null,&#xd;
      &quot;FleetgraphicsCapRP&quot;: null,&#xd;
      &quot;ROPRP&quot;: null,&#xd;
      &quot;ROPCapRP&quot;: null,&#xd;
      &quot;DigitalandSocialMediaRP&quot;: null,&#xd;
      &quot;DigitalandSocialMediaCapRP&quot;: 55,&#xd;
      &quot;OutofHomeRP&quot;: null,&#xd;
      &quot;OutofHomeCapRP&quot;: null,&#xd;
      &quot;SponsorshipRP&quot;: null,&#xd;
      &quot;SponsorshipCapRP&quot;: null,&#xd;
      &quot;PrePrintRP&quot;: null,&#xd;
      &quot;PrePrintCapRP&quot;: null,&#xd;
      &quot;TVRP&quot;: null,&#xd;
      &quot;TVCapRP&quot;: null,&#xd;
      &quot;ReceiptAdvertisingRP&quot;: null,&#xd;
      &quot;ReceiptAdvertisingCapRP&quot;: null,&#xd;
      &quot;BlueCMNBucketRP&quot;: null,&#xd;
      &quot;BlueCMNBucketCapRP&quot;: null,&#xd;
      &quot;RadioRP&quot;: null,&#xd;
      &quot;RadioCapRP&quot;: null&#xd;
    }&#xd;
  ],&#xd;
  &quot;FormKey&quot;: &quot;programsace&quot;,&#xd;
  &quot;ProgramStatusId&quot;: 1&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/UpdateScheduledProgramStatus?id=5a9e86d04956283cb868e9db</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-This will Update Program status to Active even if the Porgram has not been accrued </stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Program Status4-" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"> {&#xd;
  &quot;ClaimDecisionId&quot;: &quot;24&quot;,&#xd;
  &quot;FundDistributionHierarchy&quot;: &quot;org&quot;,&#xd;
  &quot;HierarchyLevel&quot;: &quot;6,7&quot;,&#xd;
  &quot;Documents&quot;: [],&#xd;
  &quot;ProgramName&quot;: &quot;PL-APITest111-06mar&quot;,&#xd;
  &quot;Description&quot;: &quot;Creating a Program&quot;,&#xd;
  &quot;ProgramCurrency&quot;: &quot;USD&quot;,&#xd;
  &quot;StartDate&quot;: &quot;2018-02-28T18:30:00.000Z&quot;,&#xd;
  &quot;EndDate&quot;: &quot;2018-04-13T18:30:00.000Z&quot;,&#xd;
  &quot;ClaimWorkflowId&quot;: 23,&#xd;
  &quot;AllowOverdraft&quot;: &quot;Yes&quot;,&#xd;
  &quot;BrandingRequired&quot;: &quot;Yes&quot;,&#xd;
  &quot;AllowECom&quot;: &quot;yes&quot;,&#xd;
  &quot;AccrualType&quot;: &quot;Flat&quot;,&#xd;
  &quot;FlatAccrualPeriod&quot;: &quot;Annual&quot;,&#xd;
  &quot;RollingAccrualPeriod&quot;: &quot;&quot;,&#xd;
  &quot;LastTransactionDate&quot;: &quot;2018-04-20T18:30:00.000Z&quot;,&#xd;
  &quot;ExpirationDate&quot;: &quot;2018-04-27T18:30:00.000Z&quot;,&#xd;
  &quot;Activities&quot;: [&#xd;
    {&#xd;
      &quot;DirectMailName&quot;: &quot;Direct Mail&quot;,&#xd;
      &quot;DirectMailDescription&quot;: &quot;1. Image of the creative. &lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;FleetgraphicsDescription&quot;: &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;FleetgraphicsName&quot;: &quot;Fleet graphics&quot;,&#xd;
      &quot;ROPName&quot;: &quot;ROP&quot;,&#xd;
      &quot;ROPDescription&quot;: &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&lt;/n&gt; 3. One (1) original full-page tear sheet. (A tear heet is a page from the publication that serves as verification that the advertisement was published).&quot;,&#xd;
      &quot;DigitalandSocialMediaName&quot;: &quot;Digital and Social Media&quot;,&#xd;
      &quot;DigitalandSocialMediaDescription&quot;: &quot;1. Image of the Creative (Screenshot of the ad from the system or mobile).&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;OutofHomeName&quot;: &quot;Out of Home&quot;,&#xd;
      &quot;OutofHomeDescription&quot;: &quot;1. Image of the Billboard.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;SponsorshipName&quot;: &quot;Sponsorship&quot;,&#xd;
      &quot;PrePrintName&quot;: &quot;Pre Print&quot;,&#xd;
      &quot;TVName&quot;: &quot;TV&quot;,&#xd;
      &quot;TVDescription&quot;: &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
      &quot;ReceiptAdvertisingName&quot;: &quot;Receipt Advertising&quot;,&#xd;
      &quot;BlueCMNBucketName&quot;: &quot;Blue CMN Bucket&quot;,&#xd;
      &quot;RadioName&quot;: &quot;Radio&quot;,&#xd;
      &quot;RadioDescription&quot;: &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
      &quot;ReimbursementType&quot;: &quot;Fixed&quot;,&#xd;
      &quot;FixedReimbursement&quot;: 10,&#xd;
      &quot;AllowCapping&quot;: &quot;yes&quot;,&#xd;
      &quot;DirectMail&quot;: false,&#xd;
      &quot;Fleetgraphics&quot;: false,&#xd;
      &quot;ROP&quot;: false,&#xd;
      &quot;DigitalandSocialMedia&quot;: true,&#xd;
      &quot;OutofHome&quot;: false,&#xd;
      &quot;Sponsorship&quot;: false,&#xd;
      &quot;SponsorshipDescription&quot;: &quot;&quot;,&#xd;
      &quot;PrePrint&quot;: false,&#xd;
      &quot;PrePrintDescription&quot;: &quot;&quot;,&#xd;
      &quot;TV&quot;: false,&#xd;
      &quot;ReceiptAdvertising&quot;: false,&#xd;
      &quot;ReceiptAdvertisingDescription&quot;: &quot;&quot;,&#xd;
      &quot;BlueCMNBucket&quot;: false,&#xd;
      &quot;BlueCMNBucketDescription&quot;: &quot;&quot;,&#xd;
      &quot;Radio&quot;: false,&#xd;
      &quot;ActivitiesTableTextField&quot;: &quot;&quot;,&#xd;
      &quot;DirectMailRP&quot;: null,&#xd;
      &quot;DirectMailCapRP&quot;: null,&#xd;
      &quot;FleetgraphicsRP&quot;: null,&#xd;
      &quot;FleetgraphicsCapRP&quot;: null,&#xd;
      &quot;ROPRP&quot;: null,&#xd;
      &quot;ROPCapRP&quot;: null,&#xd;
      &quot;DigitalandSocialMediaRP&quot;: null,&#xd;
      &quot;DigitalandSocialMediaCapRP&quot;: 55,&#xd;
      &quot;OutofHomeRP&quot;: null,&#xd;
      &quot;OutofHomeCapRP&quot;: null,&#xd;
      &quot;SponsorshipRP&quot;: null,&#xd;
      &quot;SponsorshipCapRP&quot;: null,&#xd;
      &quot;PrePrintRP&quot;: null,&#xd;
      &quot;PrePrintCapRP&quot;: null,&#xd;
      &quot;TVRP&quot;: null,&#xd;
      &quot;TVCapRP&quot;: null,&#xd;
      &quot;ReceiptAdvertisingRP&quot;: null,&#xd;
      &quot;ReceiptAdvertisingCapRP&quot;: null,&#xd;
      &quot;BlueCMNBucketRP&quot;: null,&#xd;
      &quot;BlueCMNBucketCapRP&quot;: null,&#xd;
      &quot;RadioRP&quot;: null,&#xd;
      &quot;RadioCapRP&quot;: null&#xd;
    }&#xd;
  ],&#xd;
  &quot;FormKey&quot;: &quot;programsace&quot;,&#xd;
  &quot;ProgramStatusId&quot;: 4&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/UpdateScheduledProgramStatus?id=5a9e86d04956283cb868e9db</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-This will Update Program status to Inactive Even if the program&apos;s End date has not been reached yet</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Program Status5-" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"> {&#xd;
  &quot;ClaimDecisionId&quot;: &quot;24&quot;,&#xd;
  &quot;FundDistributionHierarchy&quot;: &quot;org&quot;,&#xd;
  &quot;HierarchyLevel&quot;: &quot;6,7&quot;,&#xd;
  &quot;Documents&quot;: [],&#xd;
  &quot;ProgramName&quot;: &quot;PL-APITest111-06mar&quot;,&#xd;
  &quot;Description&quot;: &quot;Creating a Program&quot;,&#xd;
  &quot;ProgramCurrency&quot;: &quot;USD&quot;,&#xd;
  &quot;StartDate&quot;: &quot;2018-02-28T18:30:00.000Z&quot;,&#xd;
  &quot;EndDate&quot;: &quot;2018-04-13T18:30:00.000Z&quot;,&#xd;
  &quot;ClaimWorkflowId&quot;: 23,&#xd;
  &quot;AllowOverdraft&quot;: &quot;Yes&quot;,&#xd;
  &quot;BrandingRequired&quot;: &quot;Yes&quot;,&#xd;
  &quot;AllowECom&quot;: &quot;yes&quot;,&#xd;
  &quot;AccrualType&quot;: &quot;Flat&quot;,&#xd;
  &quot;FlatAccrualPeriod&quot;: &quot;Annual&quot;,&#xd;
  &quot;RollingAccrualPeriod&quot;: &quot;&quot;,&#xd;
  &quot;LastTransactionDate&quot;: &quot;2018-04-20T18:30:00.000Z&quot;,&#xd;
  &quot;ExpirationDate&quot;: &quot;2018-04-27T18:30:00.000Z&quot;,&#xd;
  &quot;Activities&quot;: [&#xd;
    {&#xd;
      &quot;DirectMailName&quot;: &quot;Direct Mail&quot;,&#xd;
      &quot;DirectMailDescription&quot;: &quot;1. Image of the creative. &lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;FleetgraphicsDescription&quot;: &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;FleetgraphicsName&quot;: &quot;Fleet graphics&quot;,&#xd;
      &quot;ROPName&quot;: &quot;ROP&quot;,&#xd;
      &quot;ROPDescription&quot;: &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&lt;/n&gt; 3. One (1) original full-page tear sheet. (A tear heet is a page from the publication that serves as verification that the advertisement was published).&quot;,&#xd;
      &quot;DigitalandSocialMediaName&quot;: &quot;Digital and Social Media&quot;,&#xd;
      &quot;DigitalandSocialMediaDescription&quot;: &quot;1. Image of the Creative (Screenshot of the ad from the system or mobile).&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;OutofHomeName&quot;: &quot;Out of Home&quot;,&#xd;
      &quot;OutofHomeDescription&quot;: &quot;1. Image of the Billboard.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;SponsorshipName&quot;: &quot;Sponsorship&quot;,&#xd;
      &quot;PrePrintName&quot;: &quot;Pre Print&quot;,&#xd;
      &quot;TVName&quot;: &quot;TV&quot;,&#xd;
      &quot;TVDescription&quot;: &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
      &quot;ReceiptAdvertisingName&quot;: &quot;Receipt Advertising&quot;,&#xd;
      &quot;BlueCMNBucketName&quot;: &quot;Blue CMN Bucket&quot;,&#xd;
      &quot;RadioName&quot;: &quot;Radio&quot;,&#xd;
      &quot;RadioDescription&quot;: &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
      &quot;ReimbursementType&quot;: &quot;Fixed&quot;,&#xd;
      &quot;FixedReimbursement&quot;: 10,&#xd;
      &quot;AllowCapping&quot;: &quot;yes&quot;,&#xd;
      &quot;DirectMail&quot;: false,&#xd;
      &quot;Fleetgraphics&quot;: false,&#xd;
      &quot;ROP&quot;: false,&#xd;
      &quot;DigitalandSocialMedia&quot;: true,&#xd;
      &quot;OutofHome&quot;: false,&#xd;
      &quot;Sponsorship&quot;: false,&#xd;
      &quot;SponsorshipDescription&quot;: &quot;&quot;,&#xd;
      &quot;PrePrint&quot;: false,&#xd;
      &quot;PrePrintDescription&quot;: &quot;&quot;,&#xd;
      &quot;TV&quot;: false,&#xd;
      &quot;ReceiptAdvertising&quot;: false,&#xd;
      &quot;ReceiptAdvertisingDescription&quot;: &quot;&quot;,&#xd;
      &quot;BlueCMNBucket&quot;: false,&#xd;
      &quot;BlueCMNBucketDescription&quot;: &quot;&quot;,&#xd;
      &quot;Radio&quot;: false,&#xd;
      &quot;ActivitiesTableTextField&quot;: &quot;&quot;,&#xd;
      &quot;DirectMailRP&quot;: null,&#xd;
      &quot;DirectMailCapRP&quot;: null,&#xd;
      &quot;FleetgraphicsRP&quot;: null,&#xd;
      &quot;FleetgraphicsCapRP&quot;: null,&#xd;
      &quot;ROPRP&quot;: null,&#xd;
      &quot;ROPCapRP&quot;: null,&#xd;
      &quot;DigitalandSocialMediaRP&quot;: null,&#xd;
      &quot;DigitalandSocialMediaCapRP&quot;: 55,&#xd;
      &quot;OutofHomeRP&quot;: null,&#xd;
      &quot;OutofHomeCapRP&quot;: null,&#xd;
      &quot;SponsorshipRP&quot;: null,&#xd;
      &quot;SponsorshipCapRP&quot;: null,&#xd;
      &quot;PrePrintRP&quot;: null,&#xd;
      &quot;PrePrintCapRP&quot;: null,&#xd;
      &quot;TVRP&quot;: null,&#xd;
      &quot;TVCapRP&quot;: null,&#xd;
      &quot;ReceiptAdvertisingRP&quot;: null,&#xd;
      &quot;ReceiptAdvertisingCapRP&quot;: null,&#xd;
      &quot;BlueCMNBucketRP&quot;: null,&#xd;
      &quot;BlueCMNBucketCapRP&quot;: null,&#xd;
      &quot;RadioRP&quot;: null,&#xd;
      &quot;RadioCapRP&quot;: null&#xd;
    }&#xd;
  ],&#xd;
  &quot;FormKey&quot;: &quot;programsace&quot;,&#xd;
  &quot;ProgramStatusId&quot;: 5&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/UpdateScheduledProgramStatus?id=5a9e86d04956283cb868e9db</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-This will Update Program status to Closed Even if the program&apos;s Expiry date has not been reached yet</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update Program Status1+" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value"> &quot;_id&quot;: {&#xd;
    &quot;$oid&quot;: &quot;5aaa14792a97e124dcd9e762&quot;&#xd;
  },&#xd;
  {&#xd;
  &quot;ClaimDecisionId&quot;: &quot;24&quot;,&#xd;
  &quot;FundDistributionHierarchy&quot;: &quot;org&quot;,&#xd;
  &quot;HierarchyLevel&quot;: &quot;6,7&quot;,&#xd;
  &quot;Documents&quot;: [],&#xd;
  &quot;ProgramName&quot;: &quot;PL-API1-15march01&quot;,&#xd;
  &quot;Description&quot;: &quot;Creating a Program&quot;,&#xd;
  &quot;ProgramCurrency&quot;: &quot;USD&quot;,&#xd;
  &quot;StartDate&quot;: &quot;2018-02-28T18:30:00.000Z&quot;,&#xd;
  &quot;EndDate&quot;: &quot;2018-04-13T18:30:00.000Z&quot;,&#xd;
  &quot;ClaimWorkflowId&quot;: 23,&#xd;
  &quot;AllowOverdraft&quot;: &quot;Yes&quot;,&#xd;
  &quot;BrandingRequired&quot;: &quot;Yes&quot;,&#xd;
  &quot;AllowECom&quot;: &quot;yes&quot;,&#xd;
  &quot;AccrualType&quot;: &quot;Flat&quot;,&#xd;
  &quot;FlatAccrualPeriod&quot;: &quot;Annual&quot;,&#xd;
  &quot;RollingAccrualPeriod&quot;: &quot;&quot;,&#xd;
  &quot;LastTransactionDate&quot;: &quot;2018-04-20T18:30:00.000Z&quot;,&#xd;
  &quot;ExpirationDate&quot;: &quot;2018-04-27T18:30:00.000Z&quot;,&#xd;
  &quot;Activities&quot;: [&#xd;
    {&#xd;
      &quot;DirectMailName&quot;: &quot;Direct Mail&quot;,&#xd;
      &quot;DirectMailDescription&quot;: &quot;1. Image of the creative. &lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;FleetgraphicsDescription&quot;: &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;FleetgraphicsName&quot;: &quot;Fleet graphics&quot;,&#xd;
      &quot;ROPName&quot;: &quot;ROP&quot;,&#xd;
      &quot;ROPDescription&quot;: &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&lt;/n&gt; 3. One (1) original full-page tear sheet. (A tear heet is a page from the publication that serves as verification that the advertisement was published).&quot;,&#xd;
      &quot;DigitalandSocialMediaName&quot;: &quot;Digital and Social Media&quot;,&#xd;
      &quot;DigitalandSocialMediaDescription&quot;: &quot;1. Image of the Creative (Screenshot of the ad from the system or mobile).&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;OutofHomeName&quot;: &quot;Out of Home&quot;,&#xd;
      &quot;OutofHomeDescription&quot;: &quot;1. Image of the Billboard.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;SponsorshipName&quot;: &quot;Sponsorship&quot;,&#xd;
      &quot;PrePrintName&quot;: &quot;Pre Print&quot;,&#xd;
      &quot;TVName&quot;: &quot;TV&quot;,&#xd;
      &quot;TVDescription&quot;: &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
      &quot;ReceiptAdvertisingName&quot;: &quot;Receipt Advertising&quot;,&#xd;
      &quot;BlueCMNBucketName&quot;: &quot;Blue CMN Bucket&quot;,&#xd;
      &quot;RadioName&quot;: &quot;Radio&quot;,&#xd;
      &quot;RadioDescription&quot;: &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
      &quot;ReimbursementType&quot;: &quot;Fixed&quot;,&#xd;
      &quot;FixedReimbursement&quot;: 10,&#xd;
      &quot;AllowCapping&quot;: &quot;yes&quot;,&#xd;
      &quot;DirectMail&quot;: false,&#xd;
      &quot;Fleetgraphics&quot;: false,&#xd;
      &quot;ROP&quot;: false,&#xd;
      &quot;DigitalandSocialMedia&quot;: true,&#xd;
      &quot;OutofHome&quot;: false,&#xd;
      &quot;Sponsorship&quot;: false,&#xd;
      &quot;SponsorshipDescription&quot;: &quot;&quot;,&#xd;
      &quot;PrePrint&quot;: false,&#xd;
      &quot;PrePrintDescription&quot;: &quot;&quot;,&#xd;
      &quot;TV&quot;: false,&#xd;
      &quot;ReceiptAdvertising&quot;: false,&#xd;
      &quot;ReceiptAdvertisingDescription&quot;: &quot;&quot;,&#xd;
      &quot;BlueCMNBucket&quot;: false,&#xd;
      &quot;BlueCMNBucketDescription&quot;: &quot;&quot;,&#xd;
      &quot;Radio&quot;: false,&#xd;
      &quot;ActivitiesTableTextField&quot;: &quot;&quot;,&#xd;
      &quot;DirectMailRP&quot;: null,&#xd;
      &quot;DirectMailCapRP&quot;: null,&#xd;
      &quot;FleetgraphicsRP&quot;: null,&#xd;
      &quot;FleetgraphicsCapRP&quot;: null,&#xd;
      &quot;ROPRP&quot;: null,&#xd;
      &quot;ROPCapRP&quot;: null,&#xd;
      &quot;DigitalandSocialMediaRP&quot;: null,&#xd;
      &quot;DigitalandSocialMediaCapRP&quot;: 55,&#xd;
      &quot;OutofHomeRP&quot;: null,&#xd;
      &quot;OutofHomeCapRP&quot;: null,&#xd;
      &quot;SponsorshipRP&quot;: null,&#xd;
      &quot;SponsorshipCapRP&quot;: null,&#xd;
      &quot;PrePrintRP&quot;: null,&#xd;
      &quot;PrePrintCapRP&quot;: null,&#xd;
      &quot;TVRP&quot;: null,&#xd;
      &quot;TVCapRP&quot;: null,&#xd;
      &quot;ReceiptAdvertisingRP&quot;: null,&#xd;
      &quot;ReceiptAdvertisingCapRP&quot;: null,&#xd;
      &quot;BlueCMNBucketRP&quot;: null,&#xd;
      &quot;BlueCMNBucketCapRP&quot;: null,&#xd;
      &quot;RadioRP&quot;: null,&#xd;
      &quot;RadioCapRP&quot;: null&#xd;
    }&#xd;
  ],&#xd;
  &quot;FormKey&quot;: &quot;programsace&quot;,&#xd;
  &quot;ProgramStatusId&quot;: 5,&#xd;
&#xd;
   &quot;ModifiedByUserId&quot;: &quot;3512176&quot;,&#xd;
  &quot;CreatedByUserId&quot;: &quot;3512176&quot;,&#xd;
  &quot;ModifiedDate&quot;: {&#xd;
    &quot;$date&quot;: 1520608496223&#xd;
  },&#xd;
  &quot;CreatedDate&quot;: {&#xd;
    &quot;$date&quot;: 1520608496223&#xd;
  },&#xd;
  &quot;TenantId&quot;: &quot;acehardware&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/UpdateScheduledProgramStatus?id=5aaa14792a97e124dcd9e762</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will Update Program status</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="0"></stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetProgramLme/{id}-GET-not used" enabled="false">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramLme/</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1518085672000</longProp>
        <longProp name="ThreadGroup.end_time">1518085672000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program LME1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramLme/${__BeanShell(bsh.shared.numProgramid.get(${a}),)}?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will fetch all the LME list programs based on o4KjXpWX1FiV0Jkk6TBqMw ${__BeanShell(bsh.shared.numProgramid.get(${a}),)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program LME2-" enabled="false">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetProgramLme/5a9cdfa52a97e12b582a4e28wrongid</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario- pass wrong ProgramId</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetSchedulerProgramList-GET-not there in swagger" enabled="false">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetSchedulerProgramList</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1519976023000</longProp>
        <longProp name="ThreadGroup.end_time">1519976023000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Scheduler Program List1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/GetSchedulerProgramList</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-This will fetch all the scheduler programs list (All Programs)</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Transaction/AllTransferAccural-GET-this method is not been used" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517832774000</longProp>
        <longProp name="ThreadGroup.end_time">1517832774000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Transaction/AllTransferAccural</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AllTransferAccrual1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Transaction/AllTransferAccural</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/updateProgram-PUT-Not been used" enabled="false">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/updateProgram?id=5a71b0a72a97e121f81e7fda</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517564477000</longProp>
        <longProp name="ThreadGroup.end_time">1517564477000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${load}</stringProp>
        </LoopController>
        <hashTree>
          <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
            <stringProp name="CounterConfig.start">1</stringProp>
            <stringProp name="CounterConfig.end"></stringProp>
            <stringProp name="CounterConfig.incr">1</stringProp>
            <stringProp name="CounterConfig.name">a</stringProp>
            <stringProp name="CounterConfig.format"></stringProp>
            <boolProp name="CounterConfig.per_user">false</boolProp>
          </CounterConfig>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Edit/Update Program1+" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
  &quot;ClaimDecisionId&quot;: &quot;24&quot;,&#xd;
  &quot;FundDistributionHierarchy&quot;: &quot;org&quot;,&#xd;
  &quot;HierarchyLevel&quot;: &quot;6,7&quot;,&#xd;
  &quot;Documents&quot;: [&#xd;
    {&#xd;
      &quot;name&quot;: &quot;New Microsoft Word Document.docx&quot;,&#xd;
      &quot;size&quot;: 11590&#xd;
    }&#xd;
  ],&#xd;
  &quot;ProgramName&quot;: &quot;${__BeanShell(bsh.shared.Programname.get(${a}),)}&quot;,&#xd;
  &quot;Description&quot;: &quot;Changing the Description&quot;,&#xd;
  &quot;ProgramCurrency&quot;: &quot;USD&quot;,&#xd;
  &quot;StartDate&quot;: &quot;2018-04-20T18:30:00Z&quot;,&#xd;
  &quot;EndDate&quot;: &quot;2018-04-27T18:30:00Z&quot;,&#xd;
  &quot;_id&quot;: {&#xd;
    &quot;$oid&quot;: &quot;${__BeanShell(bsh.shared.numProgramid.get(${a}),)}&quot;&#xd;
  },&#xd;
  &quot;ClaimWorkflowId&quot;: 23,&#xd;
  &quot;AllowOverdraft&quot;: &quot;Yes&quot;,&#xd;
  &quot;BrandingRequired&quot;: &quot;Yes&quot;,&#xd;
  &quot;AllowECom&quot;: &quot;yes&quot;,&#xd;
  &quot;AccrualType&quot;: &quot;Flat&quot;,&#xd;
  &quot;FlatAccrualPeriod&quot;: &quot;Annual&quot;,&#xd;
  &quot;RollingAccrualPeriod&quot;: &quot;&quot;,&#xd;
  &quot;LastTransactionDate&quot;: &quot;2018-04-11T18:30:00Z&quot;,&#xd;
  &quot;ExpirationDate&quot;: &quot;2018-04-27T18:30:00Z&quot;,&#xd;
  &quot;Activities&quot;: [&#xd;
    {&#xd;
      &quot;DirectMailName&quot;: &quot;Direct Mail&quot;,&#xd;
      &quot;DirectMailDescription&quot;: &quot;1. Image of the creative. &lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;FleetgraphicsDescription&quot;: &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;FleetgraphicsName&quot;: &quot;Fleet graphics&quot;,&#xd;
      &quot;ROPName&quot;: &quot;ROP&quot;,&#xd;
      &quot;ROPDescription&quot;: &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&lt;/n&gt; 3. One (1) original full-page tear sheet. (A tear heet is a page from the publication that serves as verification that the advertisement was published).&quot;,&#xd;
      &quot;DigitalandSocialMediaName&quot;: &quot;Digital and Social Media&quot;,&#xd;
      &quot;DigitalandSocialMediaDescription&quot;: &quot;1. Image of the Creative (Screenshot of the ad from the system or mobile).&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;OutofHomeName&quot;: &quot;Out of Home&quot;,&#xd;
      &quot;OutofHomeDescription&quot;: &quot;1. Image of the Billboard.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
      &quot;SponsorshipName&quot;: &quot;Sponsorship&quot;,&#xd;
      &quot;PrePrintName&quot;: &quot;Pre Print&quot;,&#xd;
      &quot;TVName&quot;: &quot;TV&quot;,&#xd;
      &quot;TVDescription&quot;: &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
      &quot;ReceiptAdvertisingName&quot;: &quot;Receipt Advertising&quot;,&#xd;
      &quot;BlueCMNBucketName&quot;: &quot;Blue CMN Bucket&quot;,&#xd;
      &quot;RadioName&quot;: &quot;Radio&quot;,&#xd;
      &quot;RadioDescription&quot;: &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
      &quot;JDPowerTourName&quot;: &quot;JD Power Tour&quot;,&#xd;
      &quot;JDPowerTourDescription&quot;: &quot;1. Copy of paid Invoice&quot;,&#xd;
      &quot;OtherName&quot;: &quot;Other&quot;,&#xd;
      &quot;OtherDescription&quot;: &quot;Image of the creative&quot;,&#xd;
      &quot;ReimbursementType&quot;: &quot;Variable&quot;,&#xd;
      &quot;FixedReimbursement&quot;: null,&#xd;
      &quot;AllowCapping&quot;: &quot;yes&quot;,&#xd;
      &quot;DirectMail&quot;: false,&#xd;
      &quot;Fleetgraphics&quot;: false,&#xd;
      &quot;ROP&quot;: false,&#xd;
      &quot;DigitalandSocialMedia&quot;: true,&#xd;
      &quot;OutofHome&quot;: false,&#xd;
      &quot;Sponsorship&quot;: false,&#xd;
      &quot;SponsorshipDescription&quot;: &quot;&quot;,&#xd;
      &quot;PrePrint&quot;: false,&#xd;
      &quot;PrePrintDescription&quot;: &quot;&quot;,&#xd;
      &quot;TV&quot;: false,&#xd;
      &quot;ReceiptAdvertising&quot;: false,&#xd;
      &quot;ReceiptAdvertisingDescription&quot;: &quot;&quot;,&#xd;
      &quot;BlueCMNBucket&quot;: false,&#xd;
      &quot;BlueCMNBucketDescription&quot;: &quot;&quot;,&#xd;
      &quot;Radio&quot;: false,&#xd;
      &quot;JDPowerTour&quot;: false,&#xd;
      &quot;Other&quot;: false,&#xd;
      &quot;ActivitiesTableTextField&quot;: &quot;&quot;,&#xd;
      &quot;JDPowerTourRP&quot;: null,&#xd;
      &quot;JDPowerTourCapRP&quot;: null,&#xd;
      &quot;DirectMailRP&quot;: null,&#xd;
      &quot;DirectMailCapRP&quot;: null,&#xd;
      &quot;FleetgraphicsRP&quot;: null,&#xd;
      &quot;FleetgraphicsCapRP&quot;: null,&#xd;
      &quot;ROPRP&quot;: null,&#xd;
      &quot;ROPCapRP&quot;: null,&#xd;
      &quot;DigitalandSocialMediaRP&quot;: 10,&#xd;
      &quot;DigitalandSocialMediaCapRP&quot;: 55,&#xd;
      &quot;OutofHomeRP&quot;: null,&#xd;
      &quot;OutofHomeCapRP&quot;: null,&#xd;
      &quot;SponsorshipRP&quot;: null,&#xd;
      &quot;SponsorshipCapRP&quot;: null,&#xd;
      &quot;PrePrintRP&quot;: null,&#xd;
      &quot;PrePrintCapRP&quot;: null,&#xd;
      &quot;TVRP&quot;: null,&#xd;
      &quot;TVCapRP&quot;: null,&#xd;
      &quot;ReceiptAdvertisingRP&quot;: null,&#xd;
      &quot;ReceiptAdvertisingCapRP&quot;: null,&#xd;
      &quot;BlueCMNBucketRP&quot;: null,&#xd;
      &quot;BlueCMNBucketCapRP&quot;: null,&#xd;
      &quot;RadioRP&quot;: null,&#xd;
      &quot;RadioCapRP&quot;: null,&#xd;
      &quot;OtherRP&quot;: null,&#xd;
      &quot;OtherCapRP&quot;: null&#xd;
    }&#xd;
  ],&#xd;
  &quot;FormKey&quot;: &quot;programsace&quot;,&#xd;
  &quot;ProgramStatusId&quot;: 3,&#xd;
  &quot;ModifiedByUserId&quot;: &quot;${UserId}&quot;,&#xd;
  &quot;CreatedByUserId&quot;: &quot;${UserId}&quot;,&#xd;
  &quot;ModifiedDate&quot;: {&#xd;
    &quot;$date&quot;: 1520608496223&#xd;
  },&#xd;
  &quot;CreatedDate&quot;: {&#xd;
    &quot;$date&quot;: 1520608496223&#xd;
  },&#xd;
  &quot;TenantId&quot;: &quot;acehardware&quot;,&#xd;
  &quot;ProgramId&quot;: 243&#xd;
}&#xd;
</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain"></stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol"></stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/updateProgram?id=${__BeanShell(bsh.shared.numProgramid.get(${a}),)}</stringProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
            <stringProp name="TestPlan.comments">Positive Scenario-This will edit a Program</stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">2</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="2524">OK</stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="false">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="0"></stringProp>
              </collectionProp>
              <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
              <stringProp name="Assertion.custom_message"></stringProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Edit/Update Program2-" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
             &quot;_id&quot; : ObjectId(&quot;5a9e86d04956283cb868e9db&quot;),&#xd;
              &quot;ClaimDecisionId&quot; : &quot;24&quot;,&#xd;
              &quot;FundDistributionHierarchy&quot; : &quot;org&quot;,&#xd;
              &quot;HierarchyLevel&quot; : &quot;6,7&quot;,&#xd;
              &quot;Documents&quot; : [],&#xd;
              &quot;ProgramName&quot; : &quot;Edit_Prg_Name&quot;,&#xd;
              &quot;Description&quot; : &quot;changed Description test&quot;,&#xd;
              &quot;ProgramCurrency&quot; : &quot;USD&quot;,&#xd;
              &quot;StartDate&quot; : &quot;2018-02-28T18:30:00Z&quot;,&#xd;
              &quot;EndDate&quot; : &quot;2018-03-29T18:30:00Z&quot;,&#xd;
              &quot;ClaimWorkflowId&quot; : &quot;23&quot;,&#xd;
              &quot;AllowOverdraft&quot; : &quot;Yes&quot;,&#xd;
              &quot;BrandingRequired&quot; : &quot;Yes&quot;,&#xd;
              &quot;AllowECom&quot; : &quot;yes&quot;,&#xd;
              &quot;AccrualType&quot; : &quot;Flat&quot;,&#xd;
              &quot;FlatAccrualPeriod&quot; : &quot;Annual&quot;,&#xd;
              &quot;RollingAccrualPeriod&quot; : &quot;&quot;,&#xd;
              &quot;LastTransactionDate&quot; : &quot;2018-04-04T18:30:00Z&quot;,&#xd;
              &quot;ExpirationDate&quot; : &quot;2018-04-17T18:30:00Z&quot;,&#xd;
              &quot;Activities&quot; : [&#xd;
                             {&#xd;
                                           &quot;DirectMailName&quot; : &quot;Direct Mail&quot;,&#xd;
                                           &quot;DirectMailDescription&quot; : &quot;1. Image of the creative. &lt;/n&gt; 2. Invoice.&quot;,&#xd;
                                           &quot;FleetgraphicsName&quot; : &quot;Fleet graphics&quot;,&#xd;
                                           &quot;FleetgraphicsDescription&quot; : &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
                                           &quot;ROPName&quot; : &quot;ROP&quot;,&#xd;
                                           &quot;ROPDescription&quot; : &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&lt;/n&gt; 3. One (1) original full-page tear sheet. (A tear heet is a page from the publication that serves as verification that the advertisement was published).&quot;,&#xd;
                                           &quot;DigitalandSocialMediaName&quot; : &quot;Digital and Social Media&quot;,&#xd;
                                           &quot;DigitalandSocialMediaDescription&quot; : &quot;1. Image of the Creative (Screenshot of the ad from the system or mobile).&lt;/n&gt; 2. Invoice.&quot;,&#xd;
                                           &quot;OutofHomeName&quot; : &quot;Out of Home&quot;,&#xd;
                                           &quot;OutofHomeDescription&quot; : &quot;1. Image of the Billboard.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
                                           &quot;SponsorshipName&quot; : &quot;Sponsorship&quot;,&#xd;
                                           &quot;PrePrintName&quot; : &quot;Pre Print&quot;,&#xd;
                                           &quot;TVName&quot; : &quot;TV&quot;,&#xd;
                                           &quot;TVDescription&quot; : &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
                                           &quot;ReceiptAdvertisingName&quot; : &quot;Receipt Advertising&quot;,&#xd;
                                           &quot;BlueCMNBucketName&quot; : &quot;Blue CMN Bucket&quot;,&#xd;
                                           &quot;RadioName&quot; : &quot;Radio&quot;,&#xd;
                                           &quot;RadioDescription&quot; : &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
                                           &quot;ReimbursementType&quot; : &quot;Variable&quot;,&#xd;
                                           &quot;FixedReimbursement&quot; : null,&#xd;
                                           &quot;AllowCapping&quot; : &quot;yes&quot;,&#xd;
                                           &quot;DirectMail&quot; : true,&#xd;
                                           &quot;FleetGraphics&quot; : false,&#xd;
                                           &quot;ROP&quot; : false,&#xd;
                                           &quot;DigitalandSocialMedia&quot; : false,&#xd;
                                           &quot;OutofHome&quot; : false,&#xd;
                                           &quot;Sponsorship&quot; : false,&#xd;
                                           &quot;SponsorshipDescription&quot; : &quot;&quot;,&#xd;
                                           &quot;PrePrint&quot; : false,&#xd;
                                           &quot;PrePrintDescription&quot; : &quot;&quot;,&#xd;
                                           &quot;TV&quot; : false,&#xd;
                                           &quot;ReceiptAdvertising&quot; : false,&#xd;
                                           &quot;ReceiptAdvertisingDescription&quot; : &quot;&quot;,&#xd;
                                           &quot;BlueCMNBucket&quot; : false,&#xd;
                                           &quot;BlueCMNBucketDescription&quot; : &quot;&quot;,&#xd;
                                           &quot;Radio&quot; : false,&#xd;
                                           &quot;ActivitiesTableTextField&quot; : &quot;&quot;,&#xd;
                                           &quot;DirectMailRP&quot; : &quot;50&quot;,&#xd;
                                           &quot;DirectMailCapRP&quot; : &quot;50&quot;,&#xd;
                                           &quot;FleetgraphicsRP&quot; : null,&#xd;
                                           &quot;FleetgraphicsCapRP&quot; : null,&#xd;
                                           &quot;ROPRP&quot; : null,&#xd;
                                           &quot;ROPCapRP&quot; : null,&#xd;
                                           &quot;DigitalandSocialMediaRP&quot; : null,&#xd;
                                           &quot;DigitalandSocialMediaCapRP&quot; : null,&#xd;
                                           &quot;OutofHomeRP&quot; : null,&#xd;
                                           &quot;OutofHomeCapRP&quot; : null,&#xd;
                                           &quot;SponsorshipRP&quot; : null,&#xd;
                                           &quot;SponsorshipCapRP&quot; : null,&#xd;
                                           &quot;PrePrintRP&quot; : null,&#xd;
                                           &quot;PrePrintCapRP&quot; : null,&#xd;
                                           &quot;TVRP&quot; : null,&#xd;
                                           &quot;TVCapRP&quot; : null,&#xd;
                                           &quot;ReceiptAdvertisingRP&quot; : null,&#xd;
                                           &quot;ReceiptAdvertisingCapRP&quot; : null,&#xd;
                                           &quot;BlueCMNBucketRP&quot; : null,&#xd;
                                           &quot;BlueCMNBucketCapRP&quot; : null,&#xd;
                                           &quot;RadioRP&quot; : null,&#xd;
                                           &quot;RadioCapRP&quot; : null&#xd;
                             }&#xd;
              ],&#xd;
              &quot;FormKey&quot; : &quot;programsace&quot;,&#xd;
              &quot;ProgramStatusId&quot; : &quot;2&quot;,&#xd;
              &quot;ModifiedByUserId&quot; : &quot;3512176&quot;,&#xd;
              &quot;CreatedByUserId&quot; : &quot;3512176&quot;,&#xd;
              &quot;ModifiedDate&quot; : &quot;2018-03-05T15:32:24.788+05:30&quot;,&#xd;
              &quot;CreatedDate&quot; : &quot;2018-03-05T15:32:24.788+05:30&quot;,&#xd;
              &quot;TenantId&quot; : &quot;Jacksonhewitt&quot;,&#xd;
              &quot;ProgramId&quot; : &quot;52&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/updateProgram?id=5a9e86d04956283cb868e9db</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-This will edit  Program&apos;s Name (Invalid)</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Edit/Update Program3-" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
             &quot;_id&quot; : ObjectId(&quot;5a9e86d04956283cb868e9db&quot;),&#xd;
              &quot;ClaimDecisionId&quot; : &quot;24&quot;,&#xd;
              &quot;FundDistributionHierarchy&quot; : &quot;org&quot;,&#xd;
              &quot;HierarchyLevel&quot; : &quot;6,7&quot;,&#xd;
              &quot;Documents&quot; : [],&#xd;
              &quot;ProgramName&quot; : &quot;PL-APITest111-06mar&quot;,&#xd;
              &quot;Description&quot; : &quot;changed Description test&quot;,&#xd;
              &quot;ProgramCurrency&quot; : &quot;USD&quot;,&#xd;
              &quot;StartDate&quot; : &quot;2018-02-28T18:30:00Z&quot;, // editing Program start date&#xd;
              &quot;EndDate&quot; : &quot;2018-03-29T18:30:00Z&quot;,&#xd;
              &quot;ClaimWorkflowId&quot; : &quot;23&quot;,&#xd;
              &quot;AllowOverdraft&quot; : &quot;Yes&quot;,&#xd;
              &quot;BrandingRequired&quot; : &quot;Yes&quot;,&#xd;
              &quot;AllowECom&quot; : &quot;yes&quot;,&#xd;
              &quot;AccrualType&quot; : &quot;Flat&quot;,&#xd;
              &quot;FlatAccrualPeriod&quot; : &quot;Annual&quot;,&#xd;
              &quot;RollingAccrualPeriod&quot; : &quot;&quot;,&#xd;
              &quot;LastTransactionDate&quot; : &quot;2018-04-04T18:30:00Z&quot;,&#xd;
              &quot;ExpirationDate&quot; : &quot;2018-04-17T18:30:00Z&quot;,&#xd;
              &quot;Activities&quot; : [&#xd;
                             {&#xd;
                                           &quot;DirectMailName&quot; : &quot;Direct Mail&quot;,&#xd;
                                           &quot;DirectMailDescription&quot; : &quot;1. Image of the creative. &lt;/n&gt; 2. Invoice.&quot;,&#xd;
                                           &quot;FleetgraphicsName&quot; : &quot;Fleet graphics&quot;,&#xd;
                                           &quot;FleetgraphicsDescription&quot; : &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
                                           &quot;ROPName&quot; : &quot;ROP&quot;,&#xd;
                                           &quot;ROPDescription&quot; : &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&lt;/n&gt; 3. One (1) original full-page tear sheet. (A tear heet is a page from the publication that serves as verification that the advertisement was published).&quot;,&#xd;
                                           &quot;DigitalandSocialMediaName&quot; : &quot;Digital and Social Media&quot;,&#xd;
                                           &quot;DigitalandSocialMediaDescription&quot; : &quot;1. Image of the Creative (Screenshot of the ad from the system or mobile).&lt;/n&gt; 2. Invoice.&quot;,&#xd;
                                           &quot;OutofHomeName&quot; : &quot;Out of Home&quot;,&#xd;
                                           &quot;OutofHomeDescription&quot; : &quot;1. Image of the Billboard.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
                                           &quot;SponsorshipName&quot; : &quot;Sponsorship&quot;,&#xd;
                                           &quot;PrePrintName&quot; : &quot;Pre Print&quot;,&#xd;
                                           &quot;TVName&quot; : &quot;TV&quot;,&#xd;
                                           &quot;TVDescription&quot; : &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
                                           &quot;ReceiptAdvertisingName&quot; : &quot;Receipt Advertising&quot;,&#xd;
                                           &quot;BlueCMNBucketName&quot; : &quot;Blue CMN Bucket&quot;,&#xd;
                                           &quot;RadioName&quot; : &quot;Radio&quot;,&#xd;
                                           &quot;RadioDescription&quot; : &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
                                           &quot;ReimbursementType&quot; : &quot;Variable&quot;,&#xd;
                                           &quot;FixedReimbursement&quot; : null,&#xd;
                                           &quot;AllowCapping&quot; : &quot;yes&quot;,&#xd;
                                           &quot;DirectMail&quot; : true,&#xd;
                                           &quot;FleetGraphics&quot; : false,&#xd;
                                           &quot;ROP&quot; : false,&#xd;
                                           &quot;DigitalandSocialMedia&quot; : false,&#xd;
                                           &quot;OutofHome&quot; : false,&#xd;
                                           &quot;Sponsorship&quot; : false,&#xd;
                                           &quot;SponsorshipDescription&quot; : &quot;&quot;,&#xd;
                                           &quot;PrePrint&quot; : false,&#xd;
                                           &quot;PrePrintDescription&quot; : &quot;&quot;,&#xd;
                                           &quot;TV&quot; : false,&#xd;
                                           &quot;ReceiptAdvertising&quot; : false,&#xd;
                                           &quot;ReceiptAdvertisingDescription&quot; : &quot;&quot;,&#xd;
                                           &quot;BlueCMNBucket&quot; : false,&#xd;
                                           &quot;BlueCMNBucketDescription&quot; : &quot;&quot;,&#xd;
                                           &quot;Radio&quot; : false,&#xd;
                                           &quot;ActivitiesTableTextField&quot; : &quot;&quot;,&#xd;
                                           &quot;DirectMailRP&quot; : &quot;50&quot;,&#xd;
                                           &quot;DirectMailCapRP&quot; : &quot;50&quot;,&#xd;
                                           &quot;FleetgraphicsRP&quot; : null,&#xd;
                                           &quot;FleetgraphicsCapRP&quot; : null,&#xd;
                                           &quot;ROPRP&quot; : null,&#xd;
                                           &quot;ROPCapRP&quot; : null,&#xd;
                                           &quot;DigitalandSocialMediaRP&quot; : null,&#xd;
                                           &quot;DigitalandSocialMediaCapRP&quot; : null,&#xd;
                                           &quot;OutofHomeRP&quot; : null,&#xd;
                                           &quot;OutofHomeCapRP&quot; : null,&#xd;
                                           &quot;SponsorshipRP&quot; : null,&#xd;
                                           &quot;SponsorshipCapRP&quot; : null,&#xd;
                                           &quot;PrePrintRP&quot; : null,&#xd;
                                           &quot;PrePrintCapRP&quot; : null,&#xd;
                                           &quot;TVRP&quot; : null,&#xd;
                                           &quot;TVCapRP&quot; : null,&#xd;
                                           &quot;ReceiptAdvertisingRP&quot; : null,&#xd;
                                           &quot;ReceiptAdvertisingCapRP&quot; : null,&#xd;
                                           &quot;BlueCMNBucketRP&quot; : null,&#xd;
                                           &quot;BlueCMNBucketCapRP&quot; : null,&#xd;
                                           &quot;RadioRP&quot; : null,&#xd;
                                           &quot;RadioCapRP&quot; : null&#xd;
                             }&#xd;
              ],&#xd;
              &quot;FormKey&quot; : &quot;programsace&quot;,&#xd;
              &quot;ProgramStatusId&quot; : &quot;2&quot;,&#xd;
              &quot;ModifiedByUserId&quot; : &quot;3512176&quot;,&#xd;
              &quot;CreatedByUserId&quot; : &quot;3512176&quot;,&#xd;
              &quot;ModifiedDate&quot; : &quot;2018-03-05T15:32:24.788+05:30&quot;,&#xd;
              &quot;CreatedDate&quot; : &quot;2018-03-05T15:32:24.788+05:30&quot;,&#xd;
              &quot;TenantId&quot; : &quot;Jacksonhewitt&quot;,&#xd;
              &quot;ProgramId&quot; : &quot;52&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/updateProgram?id=5a9e86d04956283cb868e9db</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-This will edit a Program&apos;s start date</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Edit/Update Program4-" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
             &quot;_id&quot; : ObjectId(&quot;5a9e86d04956283cb868e9db&quot;),&#xd;
              &quot;ClaimDecisionId&quot; : &quot;24&quot;,&#xd;
              &quot;FundDistributionHierarchy&quot; : &quot;org&quot;,&#xd;
              &quot;HierarchyLevel&quot; : &quot;6,7&quot;,&#xd;
              &quot;Documents&quot; : [],&#xd;
              &quot;ProgramName&quot; : &quot;PL-APITest111-06mar&quot;,&#xd;
              &quot;Description&quot; : &quot;changed Description test&quot;,&#xd;
              &quot;ProgramCurrency&quot; : &quot;USD&quot;,&#xd;
              &quot;StartDate&quot; : &quot;2018-02-28T18:30:00Z&quot;, &#xd;
              &quot;EndDate&quot; : &quot;2018-03-29T18:30:00Z&quot;,&#xd;
              &quot;ClaimWorkflowId&quot; : &quot;23&quot;,&#xd;
              &quot;AllowOverdraft&quot; : &quot;Yes&quot;,&#xd;
              &quot;BrandingRequired&quot; : &quot;Yes&quot;,&#xd;
              &quot;AllowECom&quot; : &quot;yes&quot;,&#xd;
              &quot;AccrualType&quot; : &quot;&quot;,&#xd;
              &quot;FlatAccrualPeriod&quot; : &quot;Annual&quot;,&#xd;
              &quot;RollingAccrualPeriod&quot; : &quot;&quot;,&#xd;
              &quot;LastTransactionDate&quot; : &quot;2018-04-04T18:30:00Z&quot;,&#xd;
              &quot;ExpirationDate&quot; : &quot;2018-04-17T18:30:00Z&quot;,&#xd;
              &quot;Activities&quot; : [&#xd;
                             {&#xd;
                                           &quot;DirectMailName&quot; : &quot;Direct Mail&quot;,&#xd;
                                           &quot;DirectMailDescription&quot; : &quot;1. Image of the creative. &lt;/n&gt; 2. Invoice.&quot;,&#xd;
                                           &quot;FleetgraphicsName&quot; : &quot;Fleet graphics&quot;,&#xd;
                                           &quot;FleetgraphicsDescription&quot; : &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
                                           &quot;ROPName&quot; : &quot;ROP&quot;,&#xd;
                                           &quot;ROPDescription&quot; : &quot;1. Image of the creative.&lt;/n&gt; 2. Invoice.&lt;/n&gt; 3. One (1) original full-page tear sheet. (A tear heet is a page from the publication that serves as verification that the advertisement was published).&quot;,&#xd;
                                           &quot;DigitalandSocialMediaName&quot; : &quot;Digital and Social Media&quot;,&#xd;
                                           &quot;DigitalandSocialMediaDescription&quot; : &quot;1. Image of the Creative (Screenshot of the ad from the system or mobile).&lt;/n&gt; 2. Invoice.&quot;,&#xd;
                                           &quot;OutofHomeName&quot; : &quot;Out of Home&quot;,&#xd;
                                           &quot;OutofHomeDescription&quot; : &quot;1. Image of the Billboard.&lt;/n&gt; 2. Invoice.&quot;,&#xd;
                                           &quot;SponsorshipName&quot; : &quot;Sponsorship&quot;,&#xd;
                                           &quot;PrePrintName&quot; : &quot;Pre Print&quot;,&#xd;
                                           &quot;TVName&quot; : &quot;TV&quot;,&#xd;
                                           &quot;TVDescription&quot; : &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
                                           &quot;ReceiptAdvertisingName&quot; : &quot;Receipt Advertising&quot;,&#xd;
                                           &quot;BlueCMNBucketName&quot; : &quot;Blue CMN Bucket&quot;,&#xd;
                                           &quot;RadioName&quot; : &quot;Radio&quot;,&#xd;
                                           &quot;RadioDescription&quot; : &quot;1. Invoice.&lt;/n&gt; 2. Notarized script with approved ANA/RAB or ANA TVB certification and net cost of spots.&quot;,&#xd;
                                           &quot;ReimbursementType&quot; : &quot;Variable&quot;,&#xd;
                                           &quot;FixedReimbursement&quot; : null,&#xd;
                                           &quot;AllowCapping&quot; : &quot;yes&quot;,&#xd;
                                           &quot;DirectMail&quot; : true,&#xd;
                                           &quot;FleetGraphics&quot; : false,&#xd;
                                           &quot;ROP&quot; : false,&#xd;
                                           &quot;DigitalandSocialMedia&quot; : false,&#xd;
                                           &quot;OutofHome&quot; : false,&#xd;
                                           &quot;Sponsorship&quot; : false,&#xd;
                                           &quot;SponsorshipDescription&quot; : &quot;&quot;,&#xd;
                                           &quot;PrePrint&quot; : false,&#xd;
                                           &quot;PrePrintDescription&quot; : &quot;&quot;,&#xd;
                                           &quot;TV&quot; : false,&#xd;
                                           &quot;ReceiptAdvertising&quot; : false,&#xd;
                                           &quot;ReceiptAdvertisingDescription&quot; : &quot;&quot;,&#xd;
                                           &quot;BlueCMNBucket&quot; : false,&#xd;
                                           &quot;BlueCMNBucketDescription&quot; : &quot;&quot;,&#xd;
                                           &quot;Radio&quot; : false,&#xd;
                                           &quot;ActivitiesTableTextField&quot; : &quot;&quot;,&#xd;
                                           &quot;DirectMailRP&quot; : &quot;50&quot;,&#xd;
                                           &quot;DirectMailCapRP&quot; : &quot;50&quot;,&#xd;
                                           &quot;FleetgraphicsRP&quot; : null,&#xd;
                                           &quot;FleetgraphicsCapRP&quot; : null,&#xd;
                                           &quot;ROPRP&quot; : null,&#xd;
                                           &quot;ROPCapRP&quot; : null,&#xd;
                                           &quot;DigitalandSocialMediaRP&quot; : null,&#xd;
                                           &quot;DigitalandSocialMediaCapRP&quot; : null,&#xd;
                                           &quot;OutofHomeRP&quot; : null,&#xd;
                                           &quot;OutofHomeCapRP&quot; : null,&#xd;
                                           &quot;SponsorshipRP&quot; : null,&#xd;
                                           &quot;SponsorshipCapRP&quot; : null,&#xd;
                                           &quot;PrePrintRP&quot; : null,&#xd;
                                           &quot;PrePrintCapRP&quot; : null,&#xd;
                                           &quot;TVRP&quot; : null,&#xd;
                                           &quot;TVCapRP&quot; : null,&#xd;
                                           &quot;ReceiptAdvertisingRP&quot; : null,&#xd;
                                           &quot;ReceiptAdvertisingCapRP&quot; : null,&#xd;
                                           &quot;BlueCMNBucketRP&quot; : null,&#xd;
                                           &quot;BlueCMNBucketCapRP&quot; : null,&#xd;
                                           &quot;RadioRP&quot; : null,&#xd;
                                           &quot;RadioCapRP&quot; : null&#xd;
                             }&#xd;
              ],&#xd;
              &quot;FormKey&quot; : &quot;programsace&quot;,&#xd;
              &quot;ProgramStatusId&quot; : &quot;2&quot;,&#xd;
              &quot;ModifiedByUserId&quot; : &quot;3512176&quot;,&#xd;
              &quot;CreatedByUserId&quot; : &quot;3512176&quot;,&#xd;
              &quot;ModifiedDate&quot; : &quot;2018-03-05T15:32:24.788+05:30&quot;,&#xd;
              &quot;CreatedDate&quot; : &quot;2018-03-05T15:32:24.788+05:30&quot;,&#xd;
              &quot;TenantId&quot; : &quot;Jacksonhewitt&quot;,&#xd;
              &quot;ProgramId&quot; : &quot;52&quot;&#xd;
}&#xd;
</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">azweb01d</stringProp>
          <stringProp name="HTTPSampler.port">11071</stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">utf-8</stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/updateProgram?id=5a9e86d04956283cb868e9db</stringProp>
          <stringProp name="HTTPSampler.method">PUT</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Negative Scenario-This will deselect a mandatory field while editing like Accrual Type</stringProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Transaction/AccrualUploadSample-GET-this method is not been used" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1517832774000</longProp>
        <longProp name="ThreadGroup.end_time">1517832774000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Transaction/AccrualUploadSample</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="AccrualUploadSample1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Transaction/AccrualUploadSample</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetExpiringAmountForRolling-GET-tested from Marketing Fund Account API" enabled="false">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramsForDashboard?tenantId=acehardware</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1522829120000</longProp>
        <longProp name="ThreadGroup.end_time">1522829120000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetExpiringAmountForRolling" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetExpiringAmountForRolling?programId</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-this will fetch Programs for Dashboard    </stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/MarketingFundAccount/GetMarketingFundAccounts-POST-Not been used" enabled="false">
        <stringProp name="ThreadGroup.on_sample_error">stoptest</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1524465799000</longProp>
        <longProp name="ThreadGroup.end_time">1524465799000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <stringProp name="TestPlan.comments">http://azweb02u:11076/api/MarketingFundAccount/v1/MarketingFundAccount/GetMarketingFundAccounts?tenantId=acehardware</stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="KatalonTest" enabled="false">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
{&#xd;
&quot;StoreNo&quot;: &quot;14905&quot;,&#xd;
&quot;ProgramId&quot;: &quot;5cb0332aba69314f34349b2d&quot;&#xd;
}&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">gateway.kube01-i.qa01.brandmuscle.net/api/cfm-account/v2</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/MarketingFundAccount/GetMarketingFundAccounts?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Admin" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjBCRjEzRjlDMjdFQjVBMkIwQTMyRTE2OUFGODk5OTE5RkEzMkNEREQiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJDX0VfbkNmcldpc0tNdUZwcjRtWkdmb3l6ZDAifQ.eyJuYmYiOjE1NTUzOTc1NTMsImV4cCI6MTU1NTQwNDc1MywiaXNzIjoiaHR0cHM6Ly9hY2VoYXJkd2FyZS52NXFhLmJyYW5kbXVzY2xlLm5ldC9hcGkvdjVvaWRjL3YxIiwiYXVkIjpbImh0dHBzOi8vYWNlaGFyZHdhcmUudjVxYS5icmFuZG11c2NsZS5uZXQvYXBpL3Y1b2lkYy92MS9yZXNvdXJjZXMiLCJicmFuZG11c2NsZWFwaSJdLCJjbGllbnRfaWQiOiJDRk0iLCJzdWIiOiJVQVRfQWRtaW4tNTY5IiwiYXV0aF90aW1lIjoxNTU1Mzk3NTUzLCJpZHAiOiJsb2NhbCIsImJtaS5idXNpbmVzc3VuaXRpZCI6IjU2OSIsImJtaS5idXNpbmVzc3VuaXRzeXN0ZW1uYW1lIjoiYWNlaGFyZHdhcmUiLCJibWkudXNlcmlkIjoiNDAzODk2NCIsImJtaS51c2VybmFtZSI6IlVBVF9BZG1pbiIsImJtaS5maXJzdG5hbWUiOiJKb2huIiwiYm1pLmxhc3RuYW1lIjoiU21pdGgiLCJibWkuaXNpbnRlcm5hbCI6IlRydWUiLCJibWkudGl0bGUiOiJQcm9qZWN0IE1hbmFnZXIiLCJibWkuYWRkcmVzcyI6IjExMDAgU3VwZXJpb3IgQXZlbnVlIiwiYm1pLmFkZHJlc3MyIjoiU3VpdGUgNTAwIiwiYm1pLmNpdHkiOiJDbGV2ZWxhbmQiLCJibWkuY291bnRyeSI6IlVTQSIsImJtaS5zdGF0ZSI6Ik9IIiwiYm1pLnppcGNvZGUiOiI0NDExNCIsImJtaS50ZWxlcGhvbmUiOiIyMTYtNDU0LTE4MjYiLCJibWkuZW1haWwiOiJwcmFzYW5uYS5sYWtzaG1pQGJyYW5kbXVzY2xlLmNvbSIsImJtaS5sb2NhbGUiOiJFTiIsImJtaS5yaWdodCI6WyJBZGRyZXNzQ3JlYXRlIiwiQWRkcmVzc0RlbGV0ZU1hbmFnZWQiLCJBcHByb3ZhbEVzY2FsYXRpb24iLCJBc3NldE1hbmFnZXIiLCJDYW5Dcm9wQWxsVXBsb2FkZWRJbWFnZXMiLCJDYW5Dcm9wVGVtcGxhdGVJbWFnZXMiLCJDYW5FbXVsYXRlIiwiQ29uZmlndXJlR3VpZGVkU2VhcmNoIiwiQ29uZmlndXJlUXVpY2tTZWFyY2giLCJDcmVhdGVHcm91cHMiLCJDcmVhdGl2ZUFwcHJvdmFsTm90UmVxdWlyZWQiLCJEZWxpdmVyeUFwcHJvdmFsTm90UmVxdWlyZWQiLCJEbyBOb3QgRGVsZXRlIFVzZXIgd2l0aCBUaGlzIFBlcm1pc3Npb24iLCJFZGl0X0FsbF9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkVkaXRfTWFuYWdlX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRWRpdEFkTWF0ZXJpYWxCeUFwcHJvdmVyIiwiRWRpdEFsbFVzZXJBcHByb3ZlciIsIkVkaXRBbGxVc2VyR3JvdXBzIiwiRWRpdEFsbFVzZXJNYW5hZ2VycyIsIkVESVRFTUFJTEJZQVBQUk9WRVIiLCJFZGl0TWFuYWdlZFVzZXJBcHByb3ZlciIsIkVkaXRNYW5hZ2VkVXNlckdyb3VwcyIsIkVkaXRNYW5hZ2VkVXNlck1hbmFnZXJzIiwiRW1haWxfQWRtaW4iLCJFbWFpbF9NYWlsaW5nTGlzdF9Ib3N0ZWRNYWlsaW5nTGlzdCIsIkVtYWlsX01haWxpbmdMaXN0X1VwbG9hZE1haWxpbmdMaXN0IiwiRW1haWxfTWFpbGluZ0xpc3RfVXNlckhvc3RlZE1haWxpbmdMaXN0IiwiRW1haWxfU2VuZF9FbWFpbHMiLCJFbWFpbF9VcGxvYWRfRW1haWxJZGxpc3QiLCJIVE1MU0VBUkNITE9DQVRJT05TIiwiSFRNTFZJRVdBTEwiLCJIVE1MVklFV09XTkVEIiwiUHJpbnRfTWFpbGluZ0xpc3RfVVNBRGF0YSIsIlNlYXJjaEFuZEVtdWxhdGVVc2VycyIsIlNlbGVjdEFuZEVtdWxhdGVVc2VyIiwiU0VURlVMRklMTE1FTlRTQ0hFRFVMRSIsIlN1cGVyQ3JlYXRpdmVBcHByb3ZlciIsIlN1cGVyUmVxdWVzdEFwcHJvdmVyIiwiVXBsb2FkQXNzZXQiLCJVcGxvYWRJbWFnZXNUb0xvY2F0aW9uIiwiVXBsb2FkTWFpbGluZ0xpc3RGb3JFbWFpbCIsIlVzZUNCUGF5bWVudCIsIlVzZUNDUGF5bWVudCIsIlVzZU9ubGluZUNvb3AiLCJWaWV3QWxsVXNlckFwcHJvdmVyIiwiVmlld0FsbFVzZXJHcm91cHMiLCJWaWV3QWxsVXNlck1hbmFnZXJzIiwiVmlld0NyZWF0aXZlQXBwcm92YWxzIiwiVmlld0dyb3VwcyIsIlZpZXdNYW5hZ2VkVXNlckFwcHJvdmVyIiwiVmlld01hbmFnZWRVc2VyR3JvdXBzIiwiVmlld01hbmFnZWRVc2VyTWFuYWdlcnMiLCJWaWV3UmVxdWVzdEFwcHJvdmFscyIsIkRlbGl2ZXJBc3NldCIsIkNhbkJlRW11bGF0ZWQiLCJFRElUV0VCUEFHRUJZQVBQUk9WRVIiLCJFbWFpbF9BcHByb3ZlX0VtYWlscyIsIkxvY2F0aW9uSW1hZ2VBcHByb3ZhbE5vdFJlcXVpcmVkIiwiVXBsb2FkTWFpbGluZ0xpc3RGb3JEaXJlY3RtYWlsIiwiREFSX0NsaWVudCIsImNsYWltLXJldmlldyIsInByZWFwcHJvdmFsLXZpZXciLCJzdGFydC13b3JrZmxvdyIsImJyYW5kaW5nLWRlbGV0ZSIsImNsYWltLXZpZXciLCJhY2NydWFsLWNyZWF0ZSIsInByZWFwcHJvdmFsLWNyZWF0ZSIsImRlcGxveS13b3JrZmxvdyIsImRpc2J1cnNlbWVudC12aWV3IiwidHJhbnNmZXItY3JlYXRlIiwiY2xhaW0tY3JlYXRlIiwiYWRqdXN0bWVudC1jcmVhdGUiLCJwcm9ncmFtLWNyZWF0ZSIsImJyYW5kaW5nLXJldmlldyIsInByZWFwcHJvdmFsLWRlbGV0ZSIsImNsYWltLWRlbGV0ZSIsInByb2dyYW0tdXBkYXRlIiwicHJlYXBwcm92YWwtcmV2aWV3IiwiYWNjb3VudC1jcmVhdGUiLCJkaXNidXJzZW1lbnQtY3JlYXRlIiwicHJvZ3JhbS1kZWxldGUiLCJicmFuZGluZy1jcmVhdGUiLCJicmFuZGluZy12aWV3IiwiZGlzYnVyc2VtZW50LXJldmlldyIsInByb2dyYW0tdmlldyIsImFjY291bnQtdmlldyIsIkFkZHJlc3NEZWxldGVPd25lZCIsIkFkZHJlc3NFZGl0TWFuYWdlZCIsIkFkZHJlc3NFZGl0T3duZWQiLCJBZGRyZXNzVmlld01hbmFnZWQiLCJDcmVhdGVfT3duX0FkZHJlc3NCb29rIiwiQ3JlYXRlX093bl9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkRlbGV0ZV9BbGxfQWRkcmVzc0Jvb2siLCJEZWxldGVfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRGVsZXRlX01hbmFnZV9BZGRyZXNzQm9vayIsIkRlbGV0ZV9NYW5hZ2VfQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJEZWxldGVfT3duX0FkZHJlc3NCb29rIiwiRGVsZXRlX093bl9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkVkaXRfQWxsX0FkZHJlc3NCb29rIiwiRWRpdF9Pd25fQWRkcmVzc0Jvb2siLCJWaWV3X093bl9BZGRyZXNzQm9vayIsIlZpZXdfT3duX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiQ3JlYXRlVXNlcnMiLCJFTlRFUlBSSVNFQURNSU4iLCJQYXNzdGhyb3VnaFVzZXJDcmVhdGlvbiIsIlNNU19NYWlsaW5nTGlzdF9QdWJMaXN0IiwiVGhpcmRQYXJ0eUZvckRpcmVjdG1haWwiLCJBbGxvd09yZGVyQW5kUGF5IiwiQWxsb3dPcmRlcldpdGhvdXRQYXltZW50IiwiQWxsb3dSZXN1bHRUb0V4Y2VsIiwiQ3JlYXRlTmV3QWRNYXRlcmlhbCIsIkRlbGV0ZUFkTWF0ZXJpYWwiLCJEZWxldGVEZWxpdmVyeVJlcXVlc3RzIiwiRG93bmxvYWRBc3NldHMiLCJFZGl0QWRNYXRlcmlhbCIsIkVtYWlsU2VhcmNoTG9jYXRpb25zIiwiRU1BSUxWSUVXQUxMIiwiU2VhcmNoTG9jYXRpb25zIiwiVmlld19BbGxfQWRkcmVzc0Jvb2siLCJWaWV3QWxsIiwiVmlld0FsbERvY3VtZW50cyIsIlZpZXdBbGxEb3dubG9hZEhpc3RvcnkiLCJWaWV3QWxsRW1haWxzIiwiVmlld0FsbFdlYlBhZ2VzIiwiVmlld0NyZWF0aXZlcyIsIlZpZXdEZWxpdmVyeU9wdGlvbnMiLCJWaWV3RGVsaXZlcnlSZXF1ZXN0cyIsIlZpZXdKUEciLCJWaWV3TG93UmVzUERGIiwiV2ViUGFnZVNlYXJjaExvY2F0aW9ucyIsIldFQlBBR0VWSUVXQUxMIiwiRW1haWxfQ3VzdG9taXplX1RlbXBsYXRlcyIsIkVtYWlsX1JlcG9ydHMiLCJWaWV3RW1haWxXb3JrQ2VudGVyIiwiQ2hhbmdlTG9jYXRpb25TdGF0dXMiLCJDcmVhdGVfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiQ3JlYXRlQWxsIiwiRGVsZXRlQWxsIiwiRWRpdEFsbCIsIkxvY2F0aW9uQWRtaW5pc3RyYXRvciIsIlZpZXdfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiVmlld0Rvd25sb2FkSGlzdG9yeSIsIkFkdmFuY2VkU2VhcmNoVXNlcnMiLCJEZWxldGVVc2VycyIsIkVESVRVU0VSUyIsIlNlYXJjaFVzZXIiLCJWaWV3VXNlcnMiLCJEQVJfQ29ycG9yYXRlIl0sImp0aSI6ImI5ZTI3MjZmMDJhY2Y3NzE2MjJkZmM1MDRkYmM4OTk2Iiwic2NvcGUiOlsib3BlbmlkIiwiYnVzaW5lc3N1bml0IiwicHJvZmlsZSIsInJvbGVzIl0sImFtciI6WyJwd2QiXX0.MlPa6AlTCOLVpPm6tMOPsfOWOxien1z3CXn_L7xBGOywWG9cLxrqcbKTLvy18hlHl8Xc9dsdh43xTh5_St8oCalL037delviTd_WNkeA-5eXpqWdBLZhKEOGP5BmsFYXhjcoNrtxBtQVqWg9qFJrUcGW3eMgZN9XoComHZUdg0tlwP-3BkYFYPOg_krTJ1P8q_WwZXawKgJfYZHTPyldi43P_z5xSFu8TLhg5ktfBP_ia5rxyhpBHfs1FVaGlfguPduRg7PmLS8n7T7Fq0_9T6FFr3h62O5FLFnxg_CDfdGtWq6dqdG9qMZaYbZH13n7oFKVCFxw7ST1uwOM-SDwmQ</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">marketingFundAccountId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..MarketingFundAccountId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${marketingFundAccountId_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${marketingFundAccountId_1}&quot;);
String[] mfaobj = vars.get(&quot;marketingFundAccountId_ALL&quot;).split(&quot;,&quot;); 
int len = mfaobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList MFAid = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	MFAid.add(mfaobj[i]);
}
bsh.shared.MFAid=MFAid;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">lmeid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..LMEId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${lmeid_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${lmeid_1}&quot;);
String[] lmeidobj = vars.get(&quot;lmeid_ALL&quot;).split(&quot;,&quot;); 
int len = lmeidobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList LMEid = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	LMEid.add(lmeidobj[i]);
}
bsh.shared.LMEid=LMEid;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetMarketingFundAccounts1+" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">[&#xd;
{&#xd;
&quot;StoreNo&quot;: &quot;26957&quot;,&#xd;
&quot;ProgramId&quot;: &quot;${__BeanShell(bsh.shared.numProgramid.get(${a}),)}&quot;&#xd;
}&#xd;
]</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">gateway.kube01-i.qa01.brandmuscle.net/api/cfm-account/v2</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">https</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/MarketingFundAccount/GetMarketingFundAccounts?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">${__BeanShell(bsh.shared.numProgramid.get(${a}),)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">marketingFundAccountId</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..MarketingFundAccountId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${marketingFundAccountId_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${marketingFundAccountId_1}&quot;);
String[] mfaobj = vars.get(&quot;marketingFundAccountId_ALL&quot;).split(&quot;,&quot;); 
int len = mfaobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList MFAid = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	MFAid.add(mfaobj[i]);
}
bsh.shared.MFAid=MFAid;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">lmeid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..LMEId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${lmeid_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${lmeid_1}&quot;);
String[] lmeidobj = vars.get(&quot;lmeid_ALL&quot;).split(&quot;,&quot;); 
int len = lmeidobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList LMEid = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	LMEid.add(lmeidobj[i]);
}
bsh.shared.LMEid=LMEid;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetProgramsForTransactions-GET" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramsForDashboard?tenantId=acehardware</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1522829120000</longProp>
        <longProp name="ThreadGroup.end_time">1522829120000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Program Transactions1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetProgramsForTransactions?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-this will fetch Programs for Dashboard</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="34333898">&quot;_id&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="35548181">&quot;ProgramName&quot;</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">programid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..$oid</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${programid_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${programid_1}&quot;);
String[] prgid = vars.get(&quot;programid_ALL&quot;).split(&quot;,&quot;); 
int len = prgid.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList numProgramid = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	numProgramid.add(prgid[i]);
}
bsh.shared.numProgramid=numProgramid;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">pname</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..ProgramName</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="true">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${pname_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${pname_1}&quot;);
String[] prgname = vars.get(&quot;pname_ALL&quot;).split(&quot;,&quot;); 
int len = prgname.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList Programname = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	Programname.add(prgname[i]);
}
bsh.shared.Programname=Programname;</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">userid</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$..CreatedByUserId</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">-1</stringProp>
            <boolProp name="JSONPostProcessor.compute_concat">true</boolProp>
          </JSONPostProcessor>
          <hashTree/>
          <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor" enabled="false">
            <boolProp name="resetInterpreter">false</boolProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="script">log.info(&quot;Request Id in Thread --&gt;&gt;&gt;&gt;&gt; &quot; + &quot;${userid_ALL}&quot;);
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${userid_1}&quot;);
String[] usridobj = vars.get(&quot;userid_ALL&quot;).split(&quot;,&quot;); 
int len = usridobj.length;
log.info(&quot;----&gt;&gt;&gt;&gt;&gt; &quot; + len);
ArrayList UserId = new ArrayList();
for(int i=0;i&lt;len;i++)
{
	UserId.add(usridobj[i]);
}

var UserId=&quot;3512177&quot;;
log.info(&quot;Request Id in Thread --&gt;&gt;&gt;@@@&gt;&gt; &quot; + &quot;${bsh.shared.UserId}&quot;);</stringProp>
          </BeanShellPostProcessor>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/UpdateProgramStatus-GET-tenantId can&apos;t be inserted in swagger as scheduler already stores tenantId" enabled="false">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramsForDashboard?tenantId=acehardware</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1522829120000</longProp>
        <longProp name="ThreadGroup.end_time">1522829120000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UpdateProgramStatus1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/UpdateProgramStatus</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-this will fetch Programs for Dashboard</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager-Test1" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IkNfRV9uQ2ZyV2lzS011RnByNG1aR2ZveXpkMCIsImtpZCI6IkNfRV9uQ2ZyV2lzS011RnByNG1aR2ZveXpkMCJ9.eyJpc3MiOiJodHRwOi8vYWNlaGFyZHdhcmUudjVxYS5icmFuZG11c2NsZS5sb2NhbC92NW9wZW5pZCIsImF1ZCI6Imh0dHA6Ly9hY2VoYXJkd2FyZS52NXFhLmJyYW5kbXVzY2xlLmxvY2FsL3Y1b3BlbmlkL3Jlc291cmNlcyIsImV4cCI6MTUzMTM4NDE3NSwibmJmIjoxNTMxMzczMzc1LCJjbGllbnRfaWQiOiJDRk0iLCJzY29wZSI6WyJvcGVuaWQiLCJidXNpbmVzc3VuaXQiLCJwcm9maWxlIiwicm9sZXMiLCJwZXJzb24iXSwic3ViIjoiMzUxMjE3NyIsImF1dGhfdGltZSI6MTUzMTM3MzM3NSwiaWRwIjoiaWRzcnYiLCJibWkuYnVzaW5lc3N1bml0aWQiOiI1NjgiLCJibWkuYnVzaW5lc3N1bml0c3lzdGVtbmFtZSI6ImFjZWhhcmR3YXJlIiwiYm1pLnBlcnNvbmlkIjoiNDExNDUyMiIsImJtaS51c2VybmFtZSI6IlRlc3QxIiwiYm1pLmZpcnN0bmFtZSI6IlRlc3RVc2VyIiwiYm1pLmxhc3RuYW1lIjoiVGVzdFVzZXIiLCJibWkuYWRkcmVzcyI6IjEyMyBtYWluIHN0LiIsImJtaS5hZGRyZXNzMiI6IiIsImJtaS5jaXR5IjoiY2xldmVsYW5kIiwiYm1pLnRlbGVwaG9uZSI6IjIzNDEyMzkwODciLCJibWkuemlwY29kZSI6IjQ0MTE0IiwiYm1pLnN0YXRlIjoiT0giLCJibWkuY291bnRyeSI6IlVTQSIsImJtaS50aXRsZSI6IiIsImJtaS5lbWFpbCI6InByYXRlZWsua3VtYXJAYnJhbmRtdXNjbGUuY29tIiwiYm1pLmlzaW50ZXJuYWwiOiJUcnVlIiwiYm1pLmxvY2FsZSI6ImVuIiwiYm1pLnJpZ2h0IjpbIkFkZEFzc2V0c1RvTGlnaHRCb3giLCJBRERNRVRBVE9HUk9VUCIsIkFERE1FVEFWQUxVRVRPRklFTEQiLCJBZGRyZXNzQ3JlYXRlIiwiQWRkcmVzc0RlbGV0ZU1hbmFnZWQiLCJBZGRyZXNzRGVsZXRlT3duZWQiLCJBZGRyZXNzRWRpdE1hbmFnZWQiLCJBZGRyZXNzRWRpdE93bmVkIiwiQWRkcmVzc1ZpZXdNYW5hZ2VkIiwiQWRkVG9DYXJ0IiwiQWRtaW5EZWxldGVKb2IiLCJBZG1pbkRlbGV0ZUpvYl9Qb3N0IiwiQWRtaW5Ub29sQWNjZXNzIiwiQWRtaW5Ub29sQWRtaW5pc3RyYXRvciIsIkFkbWluVG9vbEJ1c2luZXNzVW5pdCIsIkFkbWluVG9vbENvbmZpZ1BhZ2VzIiwiQWRtaW5Ub29sQ3VzdG9tQ29udHJvbFNlbGVjdCIsIkFkbWluVG9vbEltcG9ydEV4cG9ydCIsIkFkbWluVG9vbEluZGV4IiwiQWRtaW5Ub29sSW50ZXJuYWxJVFVzZXIiLCJBZG1pblRvb2xJbnRlcm5hbFVzZXIiLCJBZG1pblRvb2xSYXRlTWFuYWdlbWVudCIsIkFkbWluVG9vbFJlc291cmNlTWVzc2FnZXMiLCJBZG1pblRvb2xTa2luTWFuYWdlciIsIkFkbWluVXBkYXRlT3JkZXJTdGF0dXMiLCJBZHZhbmNlZFNlYXJjaFVzZXJzIiwiQWxsb3dBZGRUb0Fzc2V0Rm9sZGVyIiwiQWxsb3dPcmRlckFuZFBheSIsIkFsbG93T3JkZXJXaXRob3V0UGF5bWVudCIsIkFsbG93UmVzdWx0VG9FeGNlbCIsIkFsd2F5c0FsbG93QXNzZXREb3dubG9hZCIsIkFsd2F5c0FsbG93RG93bmxvYWRUb0Rlc2t0b3AiLCJCYXRjaFVwbG9hZE11bHRpcGxlQXNzZXRzIiwiQmF0Y2hVcGxvYWRQcm9kdWN0cyIsIkNhbkJlRW11bGF0ZWQiLCJDYW5DaGFuZ2VQYXNzd29yZCIsIkNhbkNyb3BBbGxVcGxvYWRlZEltYWdlcyIsIkNhbkNyb3BUZW1wbGF0ZUltYWdlcyIsIkNhbkVtdWxhdGUiLCJDYW5WaWV3RmlsZXMiLCJDYW5WaWV3V2ViQmFubmVyc1RhYiIsIkNoYW5nZUFzc2V0TWV0YURhdGFTZXQiLCJDaGFuZ2VMb2NhdGlvblN0YXR1cyIsIkNvbmZpZ3VyZUFzc2V0Vmlld3MiLCJDb25maWd1cmVHdWlkZWRTZWFyY2giLCJDb25maWd1cmVNZXRhU2V0TWFuYWdlbWVudCIsIkNvbmZpZ3VyZVF1aWNrU2VhcmNoIiwiQ29weVNlbGVjdGVkRmlsZXNEaXJlY3RvcmllcyIsIkNvcHlVc2VycyIsIkNyZWF0ZV9BbGxfQWRkcmVzc0Jvb2siLCJDcmVhdGVfQWxsX1JlZl9Db250YWN0IiwiQ3JlYXRlX01hbmFnZV9BZGRyZXNzQm9vayIsIkNyZWF0ZV9NYW5hZ2VfQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJDcmVhdGVfT3duX0FkZHJlc3NCb29rIiwiQ3JlYXRlX093bl9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkNyZWF0ZUFsbCIsIkNyZWF0ZUFwcGxpY2F0aW9ucyIsIkNyZWF0ZUNvdW50cnkiLCJDcmVhdGVETUEiLCJDcmVhdGVGb2xkZXJzIiwiQ3JlYXRlR3JvdXBzIiwiQ3JlYXRlTGlicmFyeUl0ZW0iLCJDcmVhdGVMaWdodEJveCIsIkNyZWF0ZU1hcmtldCIsIkNyZWF0ZU1lbnVpdGVtcyIsIkNSRUFURU1FVEFGSUVMRFMiLCJDcmVhdGVOZXdBZE1hdGVyaWFsIiwiQ3JlYXRlTmV3RGlyZWN0b3J5IiwiQ3JlYXRlTmV3VGV4dEZpbGUiLCJDcmVhdGVPd25lZCIsIkNyZWF0ZVBlcm1pc3Npb25zIiwiQ3JlYXRlUmVnaW9uIiwiQ3JlYXRlUm9sZXMiLCJDcmVhdGVTdGF0ZSIsIkNyZWF0ZVVzZXJzIiwiQ3JlYXRpdmVBcHByb3ZhbE5vdFJlcXVpcmVkIiwiRGVsZXRlX0FsbF9BZGRyZXNzQm9vayIsIkRlbGV0ZV9BbGxfQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJEZWxldGVfQWxsX1JlZl9Db250YWN0IiwiRGVsZXRlX01hbmFnZV9BZGRyZXNzQm9vayIsIkRlbGV0ZV9NYW5hZ2VfQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJEZWxldGVfT3duX0FkZHJlc3NCb29rIiwiRGVsZXRlX093bl9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkRlbGV0ZUFkTWF0ZXJpYWwiLCJEZWxldGVBbGwiLCJEZWxldGVBcHBsaWNhdGlvbnMiLCJEZWxldGVBc3NldCIsIkRlbGV0ZUNvdW50cnkiLCJEZWxldGVEZWxpdmVyeVJlcXVlc3RzIiwiRGVsZXRlRE1BIiwiRGVsZXRlRm9sZGVycyIsIkRlbGV0ZUdyb3VwcyIsIkRlbGV0ZUxpYnJhcnlJdGVtIiwiRGVsZXRlTWFya2V0IiwiRGVsZXRlTWVudWl0ZW1zIiwiREVMRVRFTUVUQUZJRUxEUyIsIkRlbGV0ZU93bmVkIiwiRGVsZXRlUGVybWlzc2lvbnMiLCJEZWxldGVSZWdpb24iLCJEZWxldGVSb2xlcyIsIkRlbGV0ZVNlbGVjdGVkRmlsZXNEaXJlY3RvcmllcyIsIkRlbGV0ZVN0YXRlIiwiRGVsZXRlVXNlcnMiLCJEZWxpdmVyeUFwcHJvdmFsTm90UmVxdWlyZWQiLCJEb05vdENoYW5nZVBhc3N3b3JkT25BdXRoZW50aWNhdGlvbiIsIkRvd25sb2FkIEltYWdlcyIsIkRvd25sb2FkQXNzZXRzIiwiRG93bmxvYWRMaWdodEJveGVzIiwiRG93bmxvYWRTZWxlY3RlZEZpbGUiLCJEb3dubG9hZFRlbXBsYXRlIiwiZUJyb2NodXJlX1JlcG9ydHMiLCJlQnJvY2h1cmVfUmVwb3J0c19BZG1pbiIsImVCcm9jaHVyZV9SZXBvcnRzX01hbmFnZXIiLCJlQnJvY2h1cmVfUmVwb3J0c19Vc2VycyIsIkVkaXRfQWxsX0FkZHJlc3NCb29rIiwiRWRpdF9BbGxfQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJFZGl0X0FsbF9SZWZfQ29udGFjdCIsIkVkaXRfTWFuYWdlX0FkZHJlc3NCb29rIiwiRWRpdF9NYW5hZ2VfQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJFZGl0X093bl9BZGRyZXNzQm9vayIsIkVkaXRBZE1hdGVyaWFsIiwiRWRpdEFkTWF0ZXJpYWxCeUFwcHJvdmVyIiwiRWRpdEFsbCIsIkVkaXRBbGxVc2VyQXBwcm92ZXIiLCJFZGl0QWxsVXNlckdyb3VwcyIsIkVkaXRBbGxVc2VyTWFuYWdlcnMiLCJFZGl0QXNzZXRzTWV0YURhdGEiLCJFRElURU1BSUxCWUFQUFJPVkVSIiwiRWRpdEVtdWxhdGlvbk1hcHBpbmciLCJFZGl0TGlicmFyeUl0ZW0iLCJFZGl0TWFuYWdlZFVzZXJBcHByb3ZlciIsIkVkaXRNYW5hZ2VkVXNlckdyb3VwcyIsIkVkaXRNYW5hZ2VkVXNlck1hbmFnZXJzIiwiRURJVE1FVEFGSUVMRFMiLCJFZGl0T3duZWQiLCJFZGl0VXNlckJ1c2luZXNzVW5pdCIsIkVESVRVU0VSUyIsIkVESVRXRUJQQUdFQllBUFBST1ZFUiIsIkVtYWlsX0FkbWluIiwiRW1haWxfQXBwcm92ZV9FbWFpbHMiLCJFbWFpbF9DcmVhdGVfVGVtcGxhdGVzIiwiRW1haWxfQ3VzdG9taXplX1RlbXBsYXRlcyIsIkVtYWlsX01haWxpbmdMaXN0X1NlYXJjaEFkZHJlc3NCb29rIiwiRW1haWxfTWFpbGluZ0xpc3RfVXBsb2FkTWFpbGluZ0xpc3QiLCJFbWFpbF9SZXBvcnRzIiwiRW1haWxfU2VuZF9FbWFpbHMiLCJFbWFpbF9VcGxvYWRfRW1haWxJZGxpc3QiLCJFbWFpbFNlYXJjaExvY2F0aW9ucyIsIkVtYWlsVmlkZW9Kb2JFeHBvcnRCdXR0b24iLCJFTUFJTFZJRVdBTEwiLCJFTlRFUlBSSVNFQURNSU4iLCJFeHBvcnRBc3NldHMiLCJGaWxlTWFuYWdlclRvb2wiLCJHcmFudEZvbGRlckFuZEZpbGVFeHRlbnNpb25zQWNjZXNzVG9Hcm91cCIsImhhc09mZkxpbmVDb29wIiwiSFRNTFNFQVJDSExPQ0FUSU9OUyIsIkhUTUxWSUVXQUxMIiwiSFRNTFZJRVdPV05FRCIsIklnbm9yZUZvbGRlckdhdGluZyIsIklnbm9yZVVzZXJHYXRpbmciLCJJbXBvcnRBcHBsaWNhdGlvbnNBbmRQZXJtaXNzaW9ucyIsIkltcG9ydEFzc2V0cyIsIkltcG9ydEV4cG9ydE1lbnUiLCJMb2NhbGl6ZU1lbnVJdGVtIiwiTG9jYXRpb25BZG1pbmlzdHJhdG9yIiwiTG9jYXRpb25CYXRjaEltYWdlcyIsIkxvY2F0aW9uSW1hZ2VBcHByb3ZhbE5vdFJlcXVpcmVkIiwiTWFuYWdlQWxsVXNlcnNMaWdodGJveGVzIiwiTWFuYWdlRmllbGRzIiwiTWFuYWdlSW5kZXhpbmdPcHRpb25zIiwiTWFya0xpZ2h0Ym94QXNUZW1wbGF0ZU9ubHkiLCJNZWRpYUNlbnRlckFjY2VzcyIsIk1vdmVTZWxlY3RlZEZpbGVzRGlyZWN0b3JpZXMiLCJPcGVuVGV4dEVkaXRvcldpdGhBZGRpdGlvbmFsU2F2ZUFzT3B0aW9uIiwiT3BlblRleHRFZGl0b3JXaXRoQWRkaXRpb25hbFNhdmVPcHRpb24iLCJPcGVuVGV4dEVkaXRvcldpdGhvdXRTYXZlT3JTYXZlQXNPcHRpb24iLCJQYXNzdGhyb3VnaFVzZXJDcmVhdGlvbiIsIlByb2Nlc3NFeGNlbEZpbGVzIiwiUHJvY2Vzc0V4cGlyYXRpb24iLCJQdWJsaWNhdGlvbkFjY2VzcyIsIlJlbGVhc2VUZW1wbGF0ZSIsIlJlbmFtZVNlbGVjdGVkRmlsZSIsIlJlcGxhY2VBc3NldCIsIlJlcGxhY2VUaHVtYm5haWwiLCJTZWFyY2hBbmRFbXVsYXRlVXNlcnMiLCJTZWFyY2hMb2NhdGlvbnMiLCJTZWFyY2hVc2VyIiwiU2VhcmNoVXNlckJ1c2luZXNzVW5pdCIsIlNlbGVjdEFsbFdvcmtDZW50ZXIiLCJTZWxlY3RBbmRFbXVsYXRlVXNlciIsIlNldFNlY3VyaXR5UHJlZmVyZW5jZXMiLCJTaG93QWN0aXZlVXNlckNoZWNrYm94IiwiU01TX0NyZWF0ZV9UZW1wbGF0ZXMiLCJTTVNfTWFpbGluZ0xpc3RfUHViTGlzdCIsIlNvY2lhbF9NZWRpYV9BY2NvdW50X01hbmFnZW1lbnQiLCJTb2NpYWxfTWVkaWFfQ3JlYXRlX1Bvc3QiLCJTb2NpYWxfTWVkaWFfRWRpdF9BZG1pbl9Qb3N0IiwiU29jaWFsX01lZGlhX0VkaXRfTWFuYWdlZF9Qb3N0IiwiU29jaWFsX01lZGlhX0VkaXRfT3duX1Bvc3QiLCJTb2NpYWxfTWVkaWFfRXhjZXB0aW9uX1JlcG9ydCIsIlNvY2lhbF9NZWRpYV9FeGNlcHRpb25fVmFsaWRhdGlvbnMiLCJTb2NpYWxfTWVkaWFfTWFuYWdlX0NhdGVnb3JpZXMiLCJTb2NpYWxfTWVkaWFfTWFuYWdlX01hc3NfTWVzc2FnZXMiLCJTb2NpYWxfTWVkaWFfTWFuYWdlX1RlbXBsYXRlX01lc3NhZ2VzIiwiU29jaWFsX01lZGlhX01lbnVfT3B0aW9uIiwiU29jaWFsX01lZGlhX1ZpZXdfQWRtaW5fUG9zdCIsIlNvY2lhbF9NZWRpYV9WaWV3X01hbmFnZWRfUG9zdCIsIlNvY2lhbF9NZWRpYV9WaWV3X01lc3NhZ2VzIiwiU29jaWFsX01lZGlhX1ZpZXdfT3duX1Bvc3QiLCJTdXBlckNyZWF0aXZlQXBwcm92ZXIiLCJTdXBlclJlcXVlc3RBcHByb3ZlciIsIlVwZGF0ZUluZGV4IiwiVXBkYXRlT3JkZXJTdGF0dXMiLCJVcGxvYWRBc3NldCIsIlVwbG9hZEVtYWlsSWRzRnJvbUJvb2siLCJVcGxvYWRFbWFpbElkc0Zyb21NYWlsaW5nTGlzdCIsIlVwbG9hZEltYWdlc1RvTG9jYXRpb24iLCJVcGxvYWRNYWlsaW5nTGlzdEZvckRpcmVjdG1haWwiLCJVcGxvYWRNYWlsaW5nTGlzdEZvckVtYWlsIiwiVGhpcmRQYXJ0eUZvckRpcmVjdG1haWwiLCJVc2VDQlBheW1lbnQiLCJVc2VPbmxpbmVDb29wIiwiVmlkZW9fQXBwcm92ZV9GaWxlcyIsIlZpZGVvX0NyZWF0ZV9UZW1wbGF0ZXMiLCJWaWRlb19DdXN0b21pemVfVGVtcGxhdGVzIiwiVmlkZW9fRGVsaXZlciIsIlZpZGVvX1VwbG9hZF9GaWxlcyIsIlZpZGVvX1ZpZXdfVGVtcGxhdGVzIiwiVmlld19BbGxfQWRkcmVzc0Jvb2siLCJWaWV3X0FsbF9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIlZpZXdfQWxsX1JlZl9Db250YWN0IiwiVmlld19NYW5hZ2VfQWRkcmVzc0Jvb2siLCJWaWV3X01hbmFnZV9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIlZpZXdfTWFuYWdlX1JlZl9Db250YWN0IiwiVmlld19Pd25fQWRkcmVzc0Jvb2siLCJWaWV3X093bl9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIlZpZXdfT3duX1JlZl9Db250YWN0IiwiVmlld0FsbCIsIlZpZXdBbGxEb2N1bWVudHMiLCJWaWV3QWxsRG93bmxvYWRIaXN0b3J5IiwiVmlld0FsbEVtYWlscyIsIlZpZXdBbGxQdWJsaXNoZWRBc3NldHMiLCJWaWV3QWxsVW5QdWJsaXNoZWRBc3NldHMiLCJWaWV3QWxsVXNlckFwcHJvdmVyIiwiVmlld0FsbFVzZXJHcm91cHMiLCJWaWV3QWxsVXNlck1hbmFnZXJzIiwiVmlld0FsbFdlYlBhZ2VzIiwiVmlld0FwcGxpY2F0aW9ucyIsIlZpZXdDb3VudHJ5IiwiVmlld0NyZWF0aXZlQXBwcm92YWxzIiwiVmlld0NyZWF0aXZlcyIsIlZpZXdEZWxpdmVyeU9wdGlvbnMiLCJWaWV3RGVsaXZlcnlSZXF1ZXN0cyIsIlZpZXdETUEiLCJWaWV3RG93bmxvYWRIaXN0b3J5IiwiVmlld0VtYWlsV29ya0NlbnRlciIsIlZpZXdGb2xkZXJzIiwiVmlld0dyb3VwcyIsIlZpZXdKUEciLCJWaWV3TGlicmFyeSIsIlZpZXdMb2NhdGlvbkltYWdlU3RhdHVzIiwiVmlld0xvd1Jlc1BERiIsIlZpZXdMb3dSZXNWaWRlbyIsIlZpZXdMb3dSZXNWUFBQREYiLCJWaWV3TWFuYWdlZFVzZXJBcHByb3ZlciIsIlZpZXdNYW5hZ2VkVXNlckdyb3VwcyIsIlZpZXdNYW5hZ2VkVXNlck1hbmFnZXJzIiwiVmlld01hcmtldCIsIlZpZXdNZWRpYW9wdGlvbnMiLCJWaWV3TWVudWJ1aWxkZXIiLCJWaWV3TWV0YVNldE1hbmFnZW1lbnQiLCJWaWV3T3JkZXJDYXJ0IiwiVmlld093bmVkIiwiVmlld1Blcm1hbmVudGx5VXBkYXRlUHJvZmlsZUJ1dHRvbiIsIlZpZXdQZXJtaXNzaW9ucyIsIlZpZXdSZWNlbnRJdGVtcyIsIlZpZXdSZWdpb24iLCJWaWV3UmVxdWVzdEFwcHJvdmFscyIsIlZpZXdSb2xlcyIsIlZJRVdTTVNUQUIiLCJWaWV3U3RhdGUiLCJWSUVXU1dGIiwiVmlld1VzZXJzIiwiVmlld1ZpZGVvV29ya0NlbnRlciIsIlZpZXdXZWJQYWdlV29ya0NlbnRlciIsIldlYlBhZ2VfQ3JlYXRlX1RlbXBsYXRlcyIsIldlYlBhZ2VTZWFyY2hMb2NhdGlvbnMiLCJXRUJQQUdFVklFV0FMTCIsImNsYWltLXJldmlldyIsInByZWFwcHJvdmFsLXZpZXciLCJzdGFydC13b3JrZmxvdyIsImJyYW5kaW5nLWRlbGV0ZSIsImNsYWltLXZpZXciLCJhY2NydWFsLWNyZWF0ZSIsInByZWFwcHJvdmFsLWNyZWF0ZSIsImRlcGxveS13b3JrZmxvdyIsImRpc2J1cnNlbWVudC12aWV3IiwidHJhbnNmZXItY3JlYXRlIiwiY2xhaW0tY3JlYXRlIiwiYWRqdXN0bWVudC1jcmVhdGUiLCJwcm9ncmFtLWNyZWF0ZSIsImJyYW5kaW5nLXJldmlldyIsInByZWFwcHJvdmFsLWRlbGV0ZSIsImNsYWltLWRlbGV0ZSIsInByb2dyYW0tdXBkYXRlIiwicHJlYXBwcm92YWwtcmV2aWV3IiwiYWNjb3VudC1jcmVhdGUiLCJkaXNidXJzZW1lbnQtY3JlYXRlIiwicHJvZ3JhbS1kZWxldGUiLCJicmFuZGluZy1jcmVhdGUiLCJicmFuZGluZy12aWV3IiwiZGlzYnVyc2VtZW50LXJldmlldyIsInByb2dyYW0tdmlldyIsImFjY291bnQtdmlldyJdLCJhbXIiOlsicGFzc3dvcmQiXX0.U6IIsrKGxCXq9EeRB71DseajD0TQTUqf1KEC8kcua_4rI8MMy9kBBsenqunR-e_dAHuFTCA9qwSvQjD0heuHyUuIJz3ZX73yN7j3nYwltfo30jT9fHM7-hEsW5y4tHTAUqCkYb9glzXNSqCtT8m8A-ho-L-LITri9YFkBQ0ZlS-j8uINljSMy-b1Fa5jDHcOgpIcNFO9C7a4w56D87itUb3GMUv6KLHCMLfASFwfbuLru4vvktN0tJ5hoVx2FTpINFpC3OHjgnAg--_LwQceKv3ds1a4ei1mR4pAaQaVS9lARlbrSwd9_YluVZMVg-BoRw44fRZF5hdoU4xPB5QPDw</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">tenantId</stringProp>
                <stringProp name="Header.value">acehardware</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetLMEForEdps-GET" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramsForDashboard?tenantId=acehardware</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1522829120000</longProp>
        <longProp name="ThreadGroup.end_time">1522829120000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetLMEForEdps1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetLMEForEdps?tenantId=acehardware&amp;year=2019&amp;hierarchyId=org</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-this will fetch Programs for Dashboard</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager_LME" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjBCRjEzRjlDMjdFQjVBMkIwQTMyRTE2OUFGODk5OTE5RkEzMkNEREQiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJDX0VfbkNmcldpc0tNdUZwcjRtWkdmb3l6ZDAifQ.eyJuYmYiOjE1NTU1NzQ0MzUsImV4cCI6MTU1NTU4MTYzNSwiaXNzIjoiaHR0cHM6Ly9hY2VoYXJkd2FyZS52NXFhLmJyYW5kbXVzY2xlLm5ldC9hcGkvdjVvaWRjL3YxIiwiYXVkIjpbImh0dHBzOi8vYWNlaGFyZHdhcmUudjVxYS5icmFuZG11c2NsZS5uZXQvYXBpL3Y1b2lkYy92MS9yZXNvdXJjZXMiLCJicmFuZG11c2NsZWFwaSJdLCJjbGllbnRfaWQiOiJDRk0iLCJzdWIiOiJVQVRfUmV0YWlsRW1wbG95ZWUtNTY5IiwiYXV0aF90aW1lIjoxNTU1NTc0NDM1LCJpZHAiOiJsb2NhbCIsImJtaS5idXNpbmVzc3VuaXRpZCI6IjU2OSIsImJtaS5idXNpbmVzc3VuaXRzeXN0ZW1uYW1lIjoiYWNlaGFyZHdhcmUiLCJibWkudXNlcmlkIjoiNDAzODk2OCIsImJtaS51c2VybmFtZSI6IlVBVF9SZXRhaWxFbXBsb3llZSIsImJtaS5maXJzdG5hbWUiOiJSZXRhaWxFbXBsb3llZSIsImJtaS5sYXN0bmFtZSI6IlVBVCIsImJtaS5pc2ludGVybmFsIjoiRmFsc2UiLCJibWkudGl0bGUiOiIiLCJibWkuYWRkcmVzcyI6IjEyMzQgTWFpbiBTdC4sIFN1aXRlIDEwMCIsImJtaS5hZGRyZXNzMiI6IlN1aXRlIDEwMCIsImJtaS5jaXR5IjoiQ2xldmVsYW5kIiwiYm1pLmNvdW50cnkiOiJVU0EiLCJibWkuc3RhdGUiOiJPSCIsImJtaS56aXBjb2RlIjoiNDQwOTUiLCJibWkudGVsZXBob25lIjoiMjE2ODc2MjAxOSIsImJtaS5lbWFpbCI6InByYXNhbm5hLmxha3NobWlAYnJhbmRtdXNjbGUuY29tIiwiYm1pLmxvY2FsZSI6ImVuIiwiYm1pLnJpZ2h0IjpbIkNhbkJlRW11bGF0ZWQiLCJDYW5Dcm9wQWxsVXBsb2FkZWRJbWFnZXMiLCJDYW5Dcm9wVGVtcGxhdGVJbWFnZXMiLCJIVE1MU0VBUkNITE9DQVRJT05TIiwiSFRNTFZJRVdPV05FRCIsIkxvY2F0aW9uSW1hZ2VBcHByb3ZhbE5vdFJlcXVpcmVkIiwiVXBsb2FkSW1hZ2VzVG9Mb2NhdGlvbiIsIlVwbG9hZE1haWxpbmdMaXN0Rm9yRGlyZWN0bWFpbCIsIlVzZUNCUGF5bWVudCIsIlVzZUNDUGF5bWVudCIsIlVzZU9ubGluZUNvb3AiLCJWaWV3QWxsVXNlck1hbmFnZXJzIiwiVmlld01hbmFnZWRVc2VyTWFuYWdlcnMiLCJWaWV3TWFuYWdlZFVzZXJzRG93bmxvYWRIaXN0b3J5IiwiRGVsaXZlckFzc2V0IiwiQWRkcmVzc0NyZWF0ZSIsIkFkZHJlc3NEZWxldGVNYW5hZ2VkIiwiQWRkcmVzc0RlbGV0ZU93bmVkIiwiQWRkcmVzc0VkaXRNYW5hZ2VkIiwiQWRkcmVzc0VkaXRPd25lZCIsIkFkZHJlc3NWaWV3TWFuYWdlZCIsIkNyZWF0ZV9Pd25fQWRkcmVzc0Jvb2siLCJDcmVhdGVfT3duX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRGVsZXRlX0FsbF9BZGRyZXNzQm9vayIsIkRlbGV0ZV9BbGxfQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJEZWxldGVfTWFuYWdlX0FkZHJlc3NCb29rIiwiRGVsZXRlX01hbmFnZV9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkRlbGV0ZV9Pd25fQWRkcmVzc0Jvb2siLCJEZWxldGVfT3duX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRWRpdF9BbGxfQWRkcmVzc0Jvb2siLCJFZGl0X0FsbF9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkVkaXRfT3duX0FkZHJlc3NCb29rIiwiVmlld19Pd25fQWRkcmVzc0Jvb2siLCJWaWV3X093bl9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkNyZWF0ZVVzZXJzIiwiRWRpdEFsbFVzZXJHcm91cHMiLCJFZGl0QWxsVXNlck1hbmFnZXJzIiwiRWRpdE1hbmFnZWRVc2VyTWFuYWdlcnMiLCJFTlRFUlBSSVNFQURNSU4iLCJQYXNzdGhyb3VnaFVzZXJDcmVhdGlvbiIsIlByaW50X01haWxpbmdMaXN0X1VTQURhdGEiLCJTTVNfTWFpbGluZ0xpc3RfUHViTGlzdCIsIlRoaXJkUGFydHlGb3JEaXJlY3RtYWlsIiwiVmlld0FsbFVzZXJHcm91cHMiLCJWaWV3R3JvdXBzIiwiVmlld01hbmFnZWRVc2VyR3JvdXBzIiwiRW1haWxfQ3VzdG9taXplX1RlbXBsYXRlcyIsIkVtYWlsX01haWxpbmdMaXN0X1VwbG9hZE1haWxpbmdMaXN0IiwiRW1haWxfUmVwb3J0cyIsIkVtYWlsX1NlbmRfRW1haWxzIiwiRW1haWxfVXBsb2FkX0VtYWlsSWRsaXN0IiwiVmlld0VtYWlsV29ya0NlbnRlciIsIkNoYW5nZUxvY2F0aW9uU3RhdHVzIiwiQ3JlYXRlT3duZWQiLCJEZWxldGVPd25lZCIsIkVkaXRPd25lZCIsIlZpZXdfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiVmlld093bmVkIiwiQWxsb3dBZGRUb0Fzc2V0Rm9sZGVyIiwiQWxsb3dPcmRlckFuZFBheSIsIkFsbG93T3JkZXJXaXRob3V0UGF5bWVudCIsIkNyZWF0ZV9NYW5hZ2VfQWRkcmVzc0Jvb2siLCJDcmVhdGVOZXdBZE1hdGVyaWFsIiwiRGVsZXRlQWRNYXRlcmlhbCIsIkRlbGV0ZURlbGl2ZXJ5UmVxdWVzdHMiLCJEb3dubG9hZEFzc2V0cyIsIkVkaXRfTWFuYWdlX0FkZHJlc3NCb29rIiwiRWRpdEFkTWF0ZXJpYWwiLCJWaWV3X01hbmFnZV9BZGRyZXNzQm9vayIsIlZpZXdfTWFuYWdlX1JlZl9Db250YWN0IiwiVmlld0NyZWF0aXZlcyIsIlZpZXdEZWxpdmVyeU9wdGlvbnMiLCJWaWV3RGVsaXZlcnlSZXF1ZXN0cyIsIlZpZXdEb3dubG9hZEhpc3RvcnkiLCJWaWV3SlBHIiwiVmlld0xvd1Jlc1BERiIsIlNFVEZVTEZJTExNRU5UU0NIRURVTEUiLCJwcmVhcHByb3ZhbC12aWV3Iiwic3RhcnQtd29ya2Zsb3ciLCJicmFuZGluZy1kZWxldGUiLCJjbGFpbS12aWV3IiwicHJlYXBwcm92YWwtY3JlYXRlIiwiY2xhaW0tY3JlYXRlIiwicHJlYXBwcm92YWwtZGVsZXRlIiwiY2xhaW0tZGVsZXRlIiwiYnJhbmRpbmctY3JlYXRlIiwiYnJhbmRpbmctdmlldyIsInByb2dyYW0tdmlldyIsImFjY291bnQtdmlldyIsInZpZXctZWRwcyIsInF1aWNrbGluay1wcm9ncmFtZ3VpZGVsaW5lcyIsInF1aWNrbGluay1jbGFpbXVzZXJndWlkZSIsInF1aWNrbGluay1yZWNlaXB0dGFwZSJdLCJqdGkiOiJhYmU1ZmI3YTFlZjA1OWRhMGZkODQ2MTJlNTBkOTgwZSIsInNjb3BlIjpbIm9wZW5pZCIsImJ1c2luZXNzdW5pdCIsInByb2ZpbGUiLCJyb2xlcyJdLCJhbXIiOlsicHdkIl19.KZIum_yPCWp0Uo47gZaDptdF1s_1gbFK-kghI2TgZH739oykhy4il33xj0c6gsqrKOH6Ar3uEuYYG0d-wYo8tjuYWAL37c8vQ9gwtDL_XAU6K6xFeaojT65FdXyQoP4v47Dm6igSSrVAGaiXGhqocMEGjmqAV2c-d2H2-9O96Zjy4HOCRMAWNZ-h9kgAdjH-133bPOzEtfjV0KjmanIV3-dpBFXbcu4nhkkzx7fQN2tgoM0Inm_sTMVHb5VVXg7opEG6L7SRePyu4_7ObtOFz90rmNHO0guPw98VsSyFAgna3SXE4Lhfm_u2h-qzmMXshyw3Wx0uaZMqK96WB_X4jQ</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/SaveEdps-POST---edps entity data" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramsForDashboard?tenantId=acehardware</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1522829120000</longProp>
        <longProp name="ThreadGroup.end_time">1522829120000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="SaveEdps1+" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;LMEId&quot;:&quot;IazgaBhLgFaoFRtfyBb5iw&quot;,&#xd;
&quot;LMEName&quot; : &quot;26957 - (HQ) Agway Stores&quot;,&#xd;
&quot;Q1&quot;:false,&#xd;
&quot;Q2&quot;:false,&#xd;
&quot;Q3&quot;:true,&#xd;
&quot;Q4&quot;:false,&#xd;
&quot;Year&quot;:&quot;2019&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/SaveEdps?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-this will fetch Programs for Dashboard${__BeanShell(bsh.shared.LMEid.get(${a}),)}</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager_LME" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__BeanShell(bsh.shared.tokenlme)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager_LME" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjBCRjEzRjlDMjdFQjVBMkIwQTMyRTE2OUFGODk5OTE5RkEzMkNEREQiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJDX0VfbkNmcldpc0tNdUZwcjRtWkdmb3l6ZDAifQ.eyJuYmYiOjE1NTU1NzQ0MzUsImV4cCI6MTU1NTU4MTYzNSwiaXNzIjoiaHR0cHM6Ly9hY2VoYXJkd2FyZS52NXFhLmJyYW5kbXVzY2xlLm5ldC9hcGkvdjVvaWRjL3YxIiwiYXVkIjpbImh0dHBzOi8vYWNlaGFyZHdhcmUudjVxYS5icmFuZG11c2NsZS5uZXQvYXBpL3Y1b2lkYy92MS9yZXNvdXJjZXMiLCJicmFuZG11c2NsZWFwaSJdLCJjbGllbnRfaWQiOiJDRk0iLCJzdWIiOiJVQVRfUmV0YWlsRW1wbG95ZWUtNTY5IiwiYXV0aF90aW1lIjoxNTU1NTc0NDM1LCJpZHAiOiJsb2NhbCIsImJtaS5idXNpbmVzc3VuaXRpZCI6IjU2OSIsImJtaS5idXNpbmVzc3VuaXRzeXN0ZW1uYW1lIjoiYWNlaGFyZHdhcmUiLCJibWkudXNlcmlkIjoiNDAzODk2OCIsImJtaS51c2VybmFtZSI6IlVBVF9SZXRhaWxFbXBsb3llZSIsImJtaS5maXJzdG5hbWUiOiJSZXRhaWxFbXBsb3llZSIsImJtaS5sYXN0bmFtZSI6IlVBVCIsImJtaS5pc2ludGVybmFsIjoiRmFsc2UiLCJibWkudGl0bGUiOiIiLCJibWkuYWRkcmVzcyI6IjEyMzQgTWFpbiBTdC4sIFN1aXRlIDEwMCIsImJtaS5hZGRyZXNzMiI6IlN1aXRlIDEwMCIsImJtaS5jaXR5IjoiQ2xldmVsYW5kIiwiYm1pLmNvdW50cnkiOiJVU0EiLCJibWkuc3RhdGUiOiJPSCIsImJtaS56aXBjb2RlIjoiNDQwOTUiLCJibWkudGVsZXBob25lIjoiMjE2ODc2MjAxOSIsImJtaS5lbWFpbCI6InByYXNhbm5hLmxha3NobWlAYnJhbmRtdXNjbGUuY29tIiwiYm1pLmxvY2FsZSI6ImVuIiwiYm1pLnJpZ2h0IjpbIkNhbkJlRW11bGF0ZWQiLCJDYW5Dcm9wQWxsVXBsb2FkZWRJbWFnZXMiLCJDYW5Dcm9wVGVtcGxhdGVJbWFnZXMiLCJIVE1MU0VBUkNITE9DQVRJT05TIiwiSFRNTFZJRVdPV05FRCIsIkxvY2F0aW9uSW1hZ2VBcHByb3ZhbE5vdFJlcXVpcmVkIiwiVXBsb2FkSW1hZ2VzVG9Mb2NhdGlvbiIsIlVwbG9hZE1haWxpbmdMaXN0Rm9yRGlyZWN0bWFpbCIsIlVzZUNCUGF5bWVudCIsIlVzZUNDUGF5bWVudCIsIlVzZU9ubGluZUNvb3AiLCJWaWV3QWxsVXNlck1hbmFnZXJzIiwiVmlld01hbmFnZWRVc2VyTWFuYWdlcnMiLCJWaWV3TWFuYWdlZFVzZXJzRG93bmxvYWRIaXN0b3J5IiwiRGVsaXZlckFzc2V0IiwiQWRkcmVzc0NyZWF0ZSIsIkFkZHJlc3NEZWxldGVNYW5hZ2VkIiwiQWRkcmVzc0RlbGV0ZU93bmVkIiwiQWRkcmVzc0VkaXRNYW5hZ2VkIiwiQWRkcmVzc0VkaXRPd25lZCIsIkFkZHJlc3NWaWV3TWFuYWdlZCIsIkNyZWF0ZV9Pd25fQWRkcmVzc0Jvb2siLCJDcmVhdGVfT3duX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRGVsZXRlX0FsbF9BZGRyZXNzQm9vayIsIkRlbGV0ZV9BbGxfQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJEZWxldGVfTWFuYWdlX0FkZHJlc3NCb29rIiwiRGVsZXRlX01hbmFnZV9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkRlbGV0ZV9Pd25fQWRkcmVzc0Jvb2siLCJEZWxldGVfT3duX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRWRpdF9BbGxfQWRkcmVzc0Jvb2siLCJFZGl0X0FsbF9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkVkaXRfT3duX0FkZHJlc3NCb29rIiwiVmlld19Pd25fQWRkcmVzc0Jvb2siLCJWaWV3X093bl9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkNyZWF0ZVVzZXJzIiwiRWRpdEFsbFVzZXJHcm91cHMiLCJFZGl0QWxsVXNlck1hbmFnZXJzIiwiRWRpdE1hbmFnZWRVc2VyTWFuYWdlcnMiLCJFTlRFUlBSSVNFQURNSU4iLCJQYXNzdGhyb3VnaFVzZXJDcmVhdGlvbiIsIlByaW50X01haWxpbmdMaXN0X1VTQURhdGEiLCJTTVNfTWFpbGluZ0xpc3RfUHViTGlzdCIsIlRoaXJkUGFydHlGb3JEaXJlY3RtYWlsIiwiVmlld0FsbFVzZXJHcm91cHMiLCJWaWV3R3JvdXBzIiwiVmlld01hbmFnZWRVc2VyR3JvdXBzIiwiRW1haWxfQ3VzdG9taXplX1RlbXBsYXRlcyIsIkVtYWlsX01haWxpbmdMaXN0X1VwbG9hZE1haWxpbmdMaXN0IiwiRW1haWxfUmVwb3J0cyIsIkVtYWlsX1NlbmRfRW1haWxzIiwiRW1haWxfVXBsb2FkX0VtYWlsSWRsaXN0IiwiVmlld0VtYWlsV29ya0NlbnRlciIsIkNoYW5nZUxvY2F0aW9uU3RhdHVzIiwiQ3JlYXRlT3duZWQiLCJEZWxldGVPd25lZCIsIkVkaXRPd25lZCIsIlZpZXdfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiVmlld093bmVkIiwiQWxsb3dBZGRUb0Fzc2V0Rm9sZGVyIiwiQWxsb3dPcmRlckFuZFBheSIsIkFsbG93T3JkZXJXaXRob3V0UGF5bWVudCIsIkNyZWF0ZV9NYW5hZ2VfQWRkcmVzc0Jvb2siLCJDcmVhdGVOZXdBZE1hdGVyaWFsIiwiRGVsZXRlQWRNYXRlcmlhbCIsIkRlbGV0ZURlbGl2ZXJ5UmVxdWVzdHMiLCJEb3dubG9hZEFzc2V0cyIsIkVkaXRfTWFuYWdlX0FkZHJlc3NCb29rIiwiRWRpdEFkTWF0ZXJpYWwiLCJWaWV3X01hbmFnZV9BZGRyZXNzQm9vayIsIlZpZXdfTWFuYWdlX1JlZl9Db250YWN0IiwiVmlld0NyZWF0aXZlcyIsIlZpZXdEZWxpdmVyeU9wdGlvbnMiLCJWaWV3RGVsaXZlcnlSZXF1ZXN0cyIsIlZpZXdEb3dubG9hZEhpc3RvcnkiLCJWaWV3SlBHIiwiVmlld0xvd1Jlc1BERiIsIlNFVEZVTEZJTExNRU5UU0NIRURVTEUiLCJwcmVhcHByb3ZhbC12aWV3Iiwic3RhcnQtd29ya2Zsb3ciLCJicmFuZGluZy1kZWxldGUiLCJjbGFpbS12aWV3IiwicHJlYXBwcm92YWwtY3JlYXRlIiwiY2xhaW0tY3JlYXRlIiwicHJlYXBwcm92YWwtZGVsZXRlIiwiY2xhaW0tZGVsZXRlIiwiYnJhbmRpbmctY3JlYXRlIiwiYnJhbmRpbmctdmlldyIsInByb2dyYW0tdmlldyIsImFjY291bnQtdmlldyIsInZpZXctZWRwcyIsInF1aWNrbGluay1wcm9ncmFtZ3VpZGVsaW5lcyIsInF1aWNrbGluay1jbGFpbXVzZXJndWlkZSIsInF1aWNrbGluay1yZWNlaXB0dGFwZSJdLCJqdGkiOiJhYmU1ZmI3YTFlZjA1OWRhMGZkODQ2MTJlNTBkOTgwZSIsInNjb3BlIjpbIm9wZW5pZCIsImJ1c2luZXNzdW5pdCIsInByb2ZpbGUiLCJyb2xlcyJdLCJhbXIiOlsicHdkIl19.KZIum_yPCWp0Uo47gZaDptdF1s_1gbFK-kghI2TgZH739oykhy4il33xj0c6gsqrKOH6Ar3uEuYYG0d-wYo8tjuYWAL37c8vQ9gwtDL_XAU6K6xFeaojT65FdXyQoP4v47Dm6igSSrVAGaiXGhqocMEGjmqAV2c-d2H2-9O96Zjy4HOCRMAWNZ-h9kgAdjH-133bPOzEtfjV0KjmanIV3-dpBFXbcu4nhkkzx7fQN2tgoM0Inm_sTMVHb5VVXg7opEG6L7SRePyu4_7ObtOFz90rmNHO0guPw98VsSyFAgna3SXE4Lhfm_u2h-qzmMXshyw3Wx0uaZMqK96WB_X4jQ</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/UpdateEdps-POST---edps entity data" enabled="true">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramsForDashboard?tenantId=acehardware</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1522829120000</longProp>
        <longProp name="ThreadGroup.end_time">1522829120000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="UpdateEdps1+" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&#xd;
&quot;LMEId&quot;:&quot;IazgaBhLgFaoFRtfyBb5iw&quot;,&#xd;
&quot;LMEName&quot; : &quot;26957 - (HQ) Agway Stores&quot;,&#xd;
&quot;Q1&quot;:false,&#xd;
&quot;Q2&quot;:false,&#xd;
&quot;Q3&quot;:true,&#xd;
&quot;Q4&quot;:true,&#xd;
&quot;Year&quot;:&quot;2019&quot;&#xd;
}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/UpdateEdps?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-this will fetch Programs for Dashboard</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager_LME" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${__BeanShell(bsh.shared.tokenlme)}</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager_LME" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer eyJhbGciOiJSUzI1NiIsImtpZCI6IjBCRjEzRjlDMjdFQjVBMkIwQTMyRTE2OUFGODk5OTE5RkEzMkNEREQiLCJ0eXAiOiJKV1QiLCJ4NXQiOiJDX0VfbkNmcldpc0tNdUZwcjRtWkdmb3l6ZDAifQ.eyJuYmYiOjE1NTU1NzQ0MzUsImV4cCI6MTU1NTU4MTYzNSwiaXNzIjoiaHR0cHM6Ly9hY2VoYXJkd2FyZS52NXFhLmJyYW5kbXVzY2xlLm5ldC9hcGkvdjVvaWRjL3YxIiwiYXVkIjpbImh0dHBzOi8vYWNlaGFyZHdhcmUudjVxYS5icmFuZG11c2NsZS5uZXQvYXBpL3Y1b2lkYy92MS9yZXNvdXJjZXMiLCJicmFuZG11c2NsZWFwaSJdLCJjbGllbnRfaWQiOiJDRk0iLCJzdWIiOiJVQVRfUmV0YWlsRW1wbG95ZWUtNTY5IiwiYXV0aF90aW1lIjoxNTU1NTc0NDM1LCJpZHAiOiJsb2NhbCIsImJtaS5idXNpbmVzc3VuaXRpZCI6IjU2OSIsImJtaS5idXNpbmVzc3VuaXRzeXN0ZW1uYW1lIjoiYWNlaGFyZHdhcmUiLCJibWkudXNlcmlkIjoiNDAzODk2OCIsImJtaS51c2VybmFtZSI6IlVBVF9SZXRhaWxFbXBsb3llZSIsImJtaS5maXJzdG5hbWUiOiJSZXRhaWxFbXBsb3llZSIsImJtaS5sYXN0bmFtZSI6IlVBVCIsImJtaS5pc2ludGVybmFsIjoiRmFsc2UiLCJibWkudGl0bGUiOiIiLCJibWkuYWRkcmVzcyI6IjEyMzQgTWFpbiBTdC4sIFN1aXRlIDEwMCIsImJtaS5hZGRyZXNzMiI6IlN1aXRlIDEwMCIsImJtaS5jaXR5IjoiQ2xldmVsYW5kIiwiYm1pLmNvdW50cnkiOiJVU0EiLCJibWkuc3RhdGUiOiJPSCIsImJtaS56aXBjb2RlIjoiNDQwOTUiLCJibWkudGVsZXBob25lIjoiMjE2ODc2MjAxOSIsImJtaS5lbWFpbCI6InByYXNhbm5hLmxha3NobWlAYnJhbmRtdXNjbGUuY29tIiwiYm1pLmxvY2FsZSI6ImVuIiwiYm1pLnJpZ2h0IjpbIkNhbkJlRW11bGF0ZWQiLCJDYW5Dcm9wQWxsVXBsb2FkZWRJbWFnZXMiLCJDYW5Dcm9wVGVtcGxhdGVJbWFnZXMiLCJIVE1MU0VBUkNITE9DQVRJT05TIiwiSFRNTFZJRVdPV05FRCIsIkxvY2F0aW9uSW1hZ2VBcHByb3ZhbE5vdFJlcXVpcmVkIiwiVXBsb2FkSW1hZ2VzVG9Mb2NhdGlvbiIsIlVwbG9hZE1haWxpbmdMaXN0Rm9yRGlyZWN0bWFpbCIsIlVzZUNCUGF5bWVudCIsIlVzZUNDUGF5bWVudCIsIlVzZU9ubGluZUNvb3AiLCJWaWV3QWxsVXNlck1hbmFnZXJzIiwiVmlld01hbmFnZWRVc2VyTWFuYWdlcnMiLCJWaWV3TWFuYWdlZFVzZXJzRG93bmxvYWRIaXN0b3J5IiwiRGVsaXZlckFzc2V0IiwiQWRkcmVzc0NyZWF0ZSIsIkFkZHJlc3NEZWxldGVNYW5hZ2VkIiwiQWRkcmVzc0RlbGV0ZU93bmVkIiwiQWRkcmVzc0VkaXRNYW5hZ2VkIiwiQWRkcmVzc0VkaXRPd25lZCIsIkFkZHJlc3NWaWV3TWFuYWdlZCIsIkNyZWF0ZV9Pd25fQWRkcmVzc0Jvb2siLCJDcmVhdGVfT3duX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRGVsZXRlX0FsbF9BZGRyZXNzQm9vayIsIkRlbGV0ZV9BbGxfQWRkcmVzc0Jvb2tfTG9jYXRpb24iLCJEZWxldGVfTWFuYWdlX0FkZHJlc3NCb29rIiwiRGVsZXRlX01hbmFnZV9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkRlbGV0ZV9Pd25fQWRkcmVzc0Jvb2siLCJEZWxldGVfT3duX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiRWRpdF9BbGxfQWRkcmVzc0Jvb2siLCJFZGl0X0FsbF9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkVkaXRfT3duX0FkZHJlc3NCb29rIiwiVmlld19Pd25fQWRkcmVzc0Jvb2siLCJWaWV3X093bl9BZGRyZXNzQm9va19Mb2NhdGlvbiIsIkNyZWF0ZVVzZXJzIiwiRWRpdEFsbFVzZXJHcm91cHMiLCJFZGl0QWxsVXNlck1hbmFnZXJzIiwiRWRpdE1hbmFnZWRVc2VyTWFuYWdlcnMiLCJFTlRFUlBSSVNFQURNSU4iLCJQYXNzdGhyb3VnaFVzZXJDcmVhdGlvbiIsIlByaW50X01haWxpbmdMaXN0X1VTQURhdGEiLCJTTVNfTWFpbGluZ0xpc3RfUHViTGlzdCIsIlRoaXJkUGFydHlGb3JEaXJlY3RtYWlsIiwiVmlld0FsbFVzZXJHcm91cHMiLCJWaWV3R3JvdXBzIiwiVmlld01hbmFnZWRVc2VyR3JvdXBzIiwiRW1haWxfQ3VzdG9taXplX1RlbXBsYXRlcyIsIkVtYWlsX01haWxpbmdMaXN0X1VwbG9hZE1haWxpbmdMaXN0IiwiRW1haWxfUmVwb3J0cyIsIkVtYWlsX1NlbmRfRW1haWxzIiwiRW1haWxfVXBsb2FkX0VtYWlsSWRsaXN0IiwiVmlld0VtYWlsV29ya0NlbnRlciIsIkNoYW5nZUxvY2F0aW9uU3RhdHVzIiwiQ3JlYXRlT3duZWQiLCJEZWxldGVPd25lZCIsIkVkaXRPd25lZCIsIlZpZXdfQWxsX0FkZHJlc3NCb29rX0xvY2F0aW9uIiwiVmlld093bmVkIiwiQWxsb3dBZGRUb0Fzc2V0Rm9sZGVyIiwiQWxsb3dPcmRlckFuZFBheSIsIkFsbG93T3JkZXJXaXRob3V0UGF5bWVudCIsIkNyZWF0ZV9NYW5hZ2VfQWRkcmVzc0Jvb2siLCJDcmVhdGVOZXdBZE1hdGVyaWFsIiwiRGVsZXRlQWRNYXRlcmlhbCIsIkRlbGV0ZURlbGl2ZXJ5UmVxdWVzdHMiLCJEb3dubG9hZEFzc2V0cyIsIkVkaXRfTWFuYWdlX0FkZHJlc3NCb29rIiwiRWRpdEFkTWF0ZXJpYWwiLCJWaWV3X01hbmFnZV9BZGRyZXNzQm9vayIsIlZpZXdfTWFuYWdlX1JlZl9Db250YWN0IiwiVmlld0NyZWF0aXZlcyIsIlZpZXdEZWxpdmVyeU9wdGlvbnMiLCJWaWV3RGVsaXZlcnlSZXF1ZXN0cyIsIlZpZXdEb3dubG9hZEhpc3RvcnkiLCJWaWV3SlBHIiwiVmlld0xvd1Jlc1BERiIsIlNFVEZVTEZJTExNRU5UU0NIRURVTEUiLCJwcmVhcHByb3ZhbC12aWV3Iiwic3RhcnQtd29ya2Zsb3ciLCJicmFuZGluZy1kZWxldGUiLCJjbGFpbS12aWV3IiwicHJlYXBwcm92YWwtY3JlYXRlIiwiY2xhaW0tY3JlYXRlIiwicHJlYXBwcm92YWwtZGVsZXRlIiwiY2xhaW0tZGVsZXRlIiwiYnJhbmRpbmctY3JlYXRlIiwiYnJhbmRpbmctdmlldyIsInByb2dyYW0tdmlldyIsImFjY291bnQtdmlldyIsInZpZXctZWRwcyIsInF1aWNrbGluay1wcm9ncmFtZ3VpZGVsaW5lcyIsInF1aWNrbGluay1jbGFpbXVzZXJndWlkZSIsInF1aWNrbGluay1yZWNlaXB0dGFwZSJdLCJqdGkiOiJhYmU1ZmI3YTFlZjA1OWRhMGZkODQ2MTJlNTBkOTgwZSIsInNjb3BlIjpbIm9wZW5pZCIsImJ1c2luZXNzdW5pdCIsInByb2ZpbGUiLCJyb2xlcyJdLCJhbXIiOlsicHdkIl19.KZIum_yPCWp0Uo47gZaDptdF1s_1gbFK-kghI2TgZH739oykhy4il33xj0c6gsqrKOH6Ar3uEuYYG0d-wYo8tjuYWAL37c8vQ9gwtDL_XAU6K6xFeaojT65FdXyQoP4v47Dm6igSSrVAGaiXGhqocMEGjmqAV2c-d2H2-9O96Zjy4HOCRMAWNZ-h9kgAdjH-133bPOzEtfjV0KjmanIV3-dpBFXbcu4nhkkzx7fQN2tgoM0Inm_sTMVHb5VVXg7opEG6L7SRePyu4_7ObtOFz90rmNHO0guPw98VsSyFAgna3SXE4Lhfm_u2h-qzmMXshyw3Wx0uaZMqK96WB_X4jQ</stringProp>
              </elementProp>
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/ValidateAutoClaims-GET---- which Url should be used------not developed yet." enabled="false">
        <stringProp name="TestPlan.comments">http://azweb02u:11071/api/ChannelBuilder/v1/Programs/GetProgramsForDashboard?tenantId=acehardware</stringProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${load}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1522829120000</longProp>
        <longProp name="ThreadGroup.end_time">1522829120000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ValidateAutoClaims1+" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/api/ChannelBuilder/v1/Programs/ValidateAutoClaims?url=&amp;tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">Positive Scenario-this will fetch Programs for Dashboard</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Transaction/TransferedList" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="TransferedListGET" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Transaction/TransferedList?programId=5cb0332aba69314f34349b2d&amp;TransactionTypeId=7&amp;tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/ProgramScheduler/CustomFundExpiring" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="CustomFundExpiring-POST" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/CustomFundExpiring?expiryPercentage=20&amp;isOverriding=false&amp;programIds=5cb73cd6cf8f0a0001b5cdf1&amp;tenantId=pandora</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/ProgramScheduler/MapMarketingEntities" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="/MapMarketingEntities " enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/MapMarketingEntities?programId=5cb73cd6cf8f0a0001b5cdf1&amp;programName=Pandora-AllActivities-testing&amp;accrualamount=100&amp;tenantId=pandora</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
          <stringProp name="TestPlan.comments">/Programs/MapMarketingEntities?programId=acehardware&amp;programName=123&amp;accrualamount=12&amp;tenantId=pandora</stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/ProgramScheduler/ExpireFunds" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Expire Funds" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/ExpireFunds?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Transaction/Validateaccruals" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Validateaccruals" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Transaction/Validateaccruals?tenantId=acehardware</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="/Programs/GetProgramsForSelectedLME" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GetProgramsForSelectedLME" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/Programs/GetProgramsForSelectedLME?lmeId=IazgaBhLgFaoFRtfyBb5iw&amp;tenantId=acehardware&amp;isPreApprovalAllowed=yes&amp;transactionProcessType=Claim</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">2</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="2524">OK</stringProp>
            </collectionProp>
            <stringProp name="Assertion.test_field">Assertion.response_message</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">16</intProp>
            <stringProp name="Assertion.custom_message"></stringProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.gui.JSONFormatterGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonformatter.JSONFormatter" testname="jp@gc - JSON Format Post Processor" enabled="true"/>
      <hashTree/>
      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShell PostProcessor-Validating Json Response" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">
import org.json.JSONException;
import org.json.JSONObject;

try
{
    JSONObject obj = new JSONObject(prev.getResponseData());
    log.info(&quot;************valid json&quot;); 
}
catch(Exception e)
{
    log.info(&quot;==========&gt;&gt;&gt;&gt;&gt;Not a valid json&quot;);
    prev.setSuccessful(false);
   
}</stringProp>
        <stringProp name="TestPlan.comments"> prev.setResponseMessage(ex.getMessage());</stringProp>
      </BeanShellPostProcessor>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
